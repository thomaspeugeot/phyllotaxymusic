// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SpiralAxisGrid_sql sql.NullBool
var dummy_SpiralAxisGrid_time time.Duration
var dummy_SpiralAxisGrid_sort sort.Float64Slice

// SpiralAxisGridAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spiralaxisgridAPI
type SpiralAxisGridAPI struct {
	gorm.Model

	models.SpiralAxisGrid_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SpiralAxisGridPointersEncoding SpiralAxisGridPointersEncoding
}

// SpiralAxisGridPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SpiralAxisGridPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field SpiralAxises is a slice of pointers to another Struct (optional or 0..1)
	SpiralAxises IntSlice `gorm:"type:TEXT"`
}

// SpiralAxisGridDB describes a spiralaxisgrid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spiralaxisgridDB
type SpiralAxisGridDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spiralaxisgridDB.Name
	Name_Data sql.NullString

	// Declation for basic field spiralaxisgridDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SpiralAxisGridPointersEncoding
}

// SpiralAxisGridDBs arrays spiralaxisgridDBs
// swagger:response spiralaxisgridDBsResponse
type SpiralAxisGridDBs []SpiralAxisGridDB

// SpiralAxisGridDBResponse provides response
// swagger:response spiralaxisgridDBResponse
type SpiralAxisGridDBResponse struct {
	SpiralAxisGridDB
}

// SpiralAxisGridWOP is a SpiralAxisGrid without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SpiralAxisGridWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SpiralAxisGrid_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoSpiralAxisGridStruct struct {
	// stores SpiralAxisGridDB according to their gorm ID
	Map_SpiralAxisGridDBID_SpiralAxisGridDB map[uint]*SpiralAxisGridDB

	// stores SpiralAxisGridDB ID according to SpiralAxisGrid address
	Map_SpiralAxisGridPtr_SpiralAxisGridDBID map[*models.SpiralAxisGrid]uint

	// stores SpiralAxisGrid according to their gorm ID
	Map_SpiralAxisGridDBID_SpiralAxisGridPtr map[uint]*models.SpiralAxisGrid

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSpiralAxisGrid.stage
	return
}

func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) GetDB() *gorm.DB {
	return backRepoSpiralAxisGrid.db
}

// GetSpiralAxisGridDBFromSpiralAxisGridPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) GetSpiralAxisGridDBFromSpiralAxisGridPtr(spiralaxisgrid *models.SpiralAxisGrid) (spiralaxisgridDB *SpiralAxisGridDB) {
	id := backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid]
	spiralaxisgridDB = backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[id]
	return
}

// BackRepoSpiralAxisGrid.CommitPhaseOne commits all staged instances of SpiralAxisGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spiralaxisgrid := range stage.SpiralAxisGrids {
		backRepoSpiralAxisGrid.CommitPhaseOneInstance(spiralaxisgrid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spiralaxisgrid := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr {
		if _, ok := stage.SpiralAxisGrids[spiralaxisgrid]; !ok {
			backRepoSpiralAxisGrid.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSpiralAxisGrid.CommitDeleteInstance commits deletion of SpiralAxisGrid to the BackRepo
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CommitDeleteInstance(id uint) (Error error) {

	spiralaxisgrid := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr[id]

	// spiralaxisgrid is not staged anymore, remove spiralaxisgridDB
	spiralaxisgridDB := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[id]
	query := backRepoSpiralAxisGrid.db.Unscoped().Delete(&spiralaxisgridDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID, spiralaxisgrid)
	delete(backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr, id)
	delete(backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB, id)

	return
}

// BackRepoSpiralAxisGrid.CommitPhaseOneInstance commits spiralaxisgrid staged instances of SpiralAxisGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CommitPhaseOneInstance(spiralaxisgrid *models.SpiralAxisGrid) (Error error) {

	// check if the spiralaxisgrid is not commited yet
	if _, ok := backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid]; ok {
		return
	}

	// initiate spiralaxisgrid
	var spiralaxisgridDB SpiralAxisGridDB
	spiralaxisgridDB.CopyBasicFieldsFromSpiralAxisGrid(spiralaxisgrid)

	query := backRepoSpiralAxisGrid.db.Create(&spiralaxisgridDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid] = spiralaxisgridDB.ID
	backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr[spiralaxisgridDB.ID] = spiralaxisgrid
	backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[spiralaxisgridDB.ID] = &spiralaxisgridDB

	return
}

// BackRepoSpiralAxisGrid.CommitPhaseTwo commits all staged instances of SpiralAxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralaxisgrid := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr {
		backRepoSpiralAxisGrid.CommitPhaseTwoInstance(backRepo, idx, spiralaxisgrid)
	}

	return
}

// BackRepoSpiralAxisGrid.CommitPhaseTwoInstance commits {{structname }} of models.SpiralAxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spiralaxisgrid *models.SpiralAxisGrid) (Error error) {

	// fetch matching spiralaxisgridDB
	if spiralaxisgridDB, ok := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[idx]; ok {

		spiralaxisgridDB.CopyBasicFieldsFromSpiralAxisGrid(spiralaxisgrid)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value spiralaxisgrid.ShapeCategory translates to updating the spiralaxisgrid.ShapeCategoryID
		spiralaxisgridDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if spiralaxisgrid.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[spiralaxisgrid.ShapeCategory]; ok {
				spiralaxisgridDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				spiralaxisgridDB.ShapeCategoryID.Valid = true
			}
		} else {
			spiralaxisgridDB.ShapeCategoryID.Int64 = 0
			spiralaxisgridDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		spiralaxisgridDB.SpiralAxisGridPointersEncoding.SpiralAxises = make([]int, 0)
		// 2. encode
		for _, spiralaxisAssocEnd := range spiralaxisgrid.SpiralAxises {
			spiralaxisAssocEnd_DB :=
				backRepo.BackRepoSpiralAxis.GetSpiralAxisDBFromSpiralAxisPtr(spiralaxisAssocEnd)
			
			// the stage might be inconsistant, meaning that the spiralaxisAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if spiralaxisAssocEnd_DB == nil {
				continue
			}
			
			spiralaxisgridDB.SpiralAxisGridPointersEncoding.SpiralAxises =
				append(spiralaxisgridDB.SpiralAxisGridPointersEncoding.SpiralAxises, int(spiralaxisAssocEnd_DB.ID))
		}

		query := backRepoSpiralAxisGrid.db.Save(&spiralaxisgridDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SpiralAxisGrid intance %s", spiralaxisgrid.Name))
		return err
	}

	return
}

// BackRepoSpiralAxisGrid.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CheckoutPhaseOne() (Error error) {

	spiralaxisgridDBArray := make([]SpiralAxisGridDB, 0)
	query := backRepoSpiralAxisGrid.db.Find(&spiralaxisgridDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spiralaxisgridInstancesToBeRemovedFromTheStage := make(map[*models.SpiralAxisGrid]any)
	for key, value := range backRepoSpiralAxisGrid.stage.SpiralAxisGrids {
		spiralaxisgridInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spiralaxisgridDB := range spiralaxisgridDBArray {
		backRepoSpiralAxisGrid.CheckoutPhaseOneInstance(&spiralaxisgridDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spiralaxisgrid, ok := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr[spiralaxisgridDB.ID]
		if ok {
			delete(spiralaxisgridInstancesToBeRemovedFromTheStage, spiralaxisgrid)
		}
	}

	// remove from stage and back repo's 3 maps all spiralaxisgrids that are not in the checkout
	for spiralaxisgrid := range spiralaxisgridInstancesToBeRemovedFromTheStage {
		spiralaxisgrid.Unstage(backRepoSpiralAxisGrid.GetStage())

		// remove instance from the back repo 3 maps
		spiralaxisgridID := backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid]
		delete(backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID, spiralaxisgrid)
		delete(backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB, spiralaxisgridID)
		delete(backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr, spiralaxisgridID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spiralaxisgridDB that has been found in the DB, updates the backRepo and stages the
// models version of the spiralaxisgridDB
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CheckoutPhaseOneInstance(spiralaxisgridDB *SpiralAxisGridDB) (Error error) {

	spiralaxisgrid, ok := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr[spiralaxisgridDB.ID]
	if !ok {
		spiralaxisgrid = new(models.SpiralAxisGrid)

		backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr[spiralaxisgridDB.ID] = spiralaxisgrid
		backRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid] = spiralaxisgridDB.ID

		// append model store with the new element
		spiralaxisgrid.Name = spiralaxisgridDB.Name_Data.String
		spiralaxisgrid.Stage(backRepoSpiralAxisGrid.GetStage())
	}
	spiralaxisgridDB.CopyBasicFieldsToSpiralAxisGrid(spiralaxisgrid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spiralaxisgrid.Stage(backRepoSpiralAxisGrid.GetStage())

	// preserve pointer to spiralaxisgridDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SpiralAxisGridDBID_SpiralAxisGridDB)[spiralaxisgridDB hold variable pointers
	spiralaxisgridDB_Data := *spiralaxisgridDB
	preservedPtrToSpiralAxisGrid := &spiralaxisgridDB_Data
	backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[spiralaxisgridDB.ID] = preservedPtrToSpiralAxisGrid

	return
}

// BackRepoSpiralAxisGrid.CheckoutPhaseTwo Checkouts all staged instances of SpiralAxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spiralaxisgridDB := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB {
		backRepoSpiralAxisGrid.CheckoutPhaseTwoInstance(backRepo, spiralaxisgridDB)
	}
	return
}

// BackRepoSpiralAxisGrid.CheckoutPhaseTwoInstance Checkouts staged instances of SpiralAxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spiralaxisgridDB *SpiralAxisGridDB) (Error error) {

	spiralaxisgrid := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr[spiralaxisgridDB.ID]

	spiralaxisgridDB.DecodePointers(backRepo, spiralaxisgrid)

	return
}

func (spiralaxisgridDB *SpiralAxisGridDB) DecodePointers(backRepo *BackRepoStruct, spiralaxisgrid *models.SpiralAxisGrid) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field
	spiralaxisgrid.ShapeCategory = nil
	if spiralaxisgridDB.ShapeCategoryID.Int64 != 0 {
		spiralaxisgrid.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(spiralaxisgridDB.ShapeCategoryID.Int64)]
	}
	// This loop redeem spiralaxisgrid.SpiralAxises in the stage from the encode in the back repo
	// It parses all SpiralAxisDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spiralaxisgrid.SpiralAxises = spiralaxisgrid.SpiralAxises[:0]
	for _, _SpiralAxisid := range spiralaxisgridDB.SpiralAxisGridPointersEncoding.SpiralAxises {
		spiralaxisgrid.SpiralAxises = append(spiralaxisgrid.SpiralAxises, backRepo.BackRepoSpiralAxis.Map_SpiralAxisDBID_SpiralAxisPtr[uint(_SpiralAxisid)])
	}

	return
}

// CommitSpiralAxisGrid allows commit of a single spiralaxisgrid (if already staged)
func (backRepo *BackRepoStruct) CommitSpiralAxisGrid(spiralaxisgrid *models.SpiralAxisGrid) {
	backRepo.BackRepoSpiralAxisGrid.CommitPhaseOneInstance(spiralaxisgrid)
	if id, ok := backRepo.BackRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid]; ok {
		backRepo.BackRepoSpiralAxisGrid.CommitPhaseTwoInstance(backRepo, id, spiralaxisgrid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSpiralAxisGrid allows checkout of a single spiralaxisgrid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSpiralAxisGrid(spiralaxisgrid *models.SpiralAxisGrid) {
	// check if the spiralaxisgrid is staged
	if _, ok := backRepo.BackRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid]; ok {

		if id, ok := backRepo.BackRepoSpiralAxisGrid.Map_SpiralAxisGridPtr_SpiralAxisGridDBID[spiralaxisgrid]; ok {
			var spiralaxisgridDB SpiralAxisGridDB
			spiralaxisgridDB.ID = id

			if err := backRepo.BackRepoSpiralAxisGrid.db.First(&spiralaxisgridDB, id).Error; err != nil {
				log.Fatalln("CheckoutSpiralAxisGrid : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSpiralAxisGrid.CheckoutPhaseOneInstance(&spiralaxisgridDB)
			backRepo.BackRepoSpiralAxisGrid.CheckoutPhaseTwoInstance(backRepo, &spiralaxisgridDB)
		}
	}
}

// CopyBasicFieldsFromSpiralAxisGrid
func (spiralaxisgridDB *SpiralAxisGridDB) CopyBasicFieldsFromSpiralAxisGrid(spiralaxisgrid *models.SpiralAxisGrid) {
	// insertion point for fields commit

	spiralaxisgridDB.Name_Data.String = spiralaxisgrid.Name
	spiralaxisgridDB.Name_Data.Valid = true

	spiralaxisgridDB.IsDisplayed_Data.Bool = spiralaxisgrid.IsDisplayed
	spiralaxisgridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromSpiralAxisGrid_WOP
func (spiralaxisgridDB *SpiralAxisGridDB) CopyBasicFieldsFromSpiralAxisGrid_WOP(spiralaxisgrid *models.SpiralAxisGrid_WOP) {
	// insertion point for fields commit

	spiralaxisgridDB.Name_Data.String = spiralaxisgrid.Name
	spiralaxisgridDB.Name_Data.Valid = true

	spiralaxisgridDB.IsDisplayed_Data.Bool = spiralaxisgrid.IsDisplayed
	spiralaxisgridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromSpiralAxisGridWOP
func (spiralaxisgridDB *SpiralAxisGridDB) CopyBasicFieldsFromSpiralAxisGridWOP(spiralaxisgrid *SpiralAxisGridWOP) {
	// insertion point for fields commit

	spiralaxisgridDB.Name_Data.String = spiralaxisgrid.Name
	spiralaxisgridDB.Name_Data.Valid = true

	spiralaxisgridDB.IsDisplayed_Data.Bool = spiralaxisgrid.IsDisplayed
	spiralaxisgridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToSpiralAxisGrid
func (spiralaxisgridDB *SpiralAxisGridDB) CopyBasicFieldsToSpiralAxisGrid(spiralaxisgrid *models.SpiralAxisGrid) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralaxisgrid.Name = spiralaxisgridDB.Name_Data.String
	spiralaxisgrid.IsDisplayed = spiralaxisgridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToSpiralAxisGrid_WOP
func (spiralaxisgridDB *SpiralAxisGridDB) CopyBasicFieldsToSpiralAxisGrid_WOP(spiralaxisgrid *models.SpiralAxisGrid_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralaxisgrid.Name = spiralaxisgridDB.Name_Data.String
	spiralaxisgrid.IsDisplayed = spiralaxisgridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToSpiralAxisGridWOP
func (spiralaxisgridDB *SpiralAxisGridDB) CopyBasicFieldsToSpiralAxisGridWOP(spiralaxisgrid *SpiralAxisGridWOP) {
	spiralaxisgrid.ID = int(spiralaxisgridDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spiralaxisgrid.Name = spiralaxisgridDB.Name_Data.String
	spiralaxisgrid.IsDisplayed = spiralaxisgridDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all SpiralAxisGridDB instances in the backrepo
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SpiralAxisGridDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralAxisGridDB, 0)
	for _, spiralaxisgridDB := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB {
		forBackup = append(forBackup, spiralaxisgridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SpiralAxisGrid ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SpiralAxisGrid file", err.Error())
	}
}

// Backup generates a json file from a slice of all SpiralAxisGridDB instances in the backrepo
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralAxisGridDB, 0)
	for _, spiralaxisgridDB := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB {
		forBackup = append(forBackup, spiralaxisgridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SpiralAxisGrid")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SpiralAxisGrid_Fields, -1)
	for _, spiralaxisgridDB := range forBackup {

		var spiralaxisgridWOP SpiralAxisGridWOP
		spiralaxisgridDB.CopyBasicFieldsToSpiralAxisGridWOP(&spiralaxisgridWOP)

		row := sh.AddRow()
		row.WriteStruct(&spiralaxisgridWOP, -1)
	}
}

// RestoreXL from the "SpiralAxisGrid" sheet all SpiralAxisGridDB instances
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSpiralAxisGridid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SpiralAxisGrid"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSpiralAxisGrid.rowVisitorSpiralAxisGrid)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) rowVisitorSpiralAxisGrid(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spiralaxisgridWOP SpiralAxisGridWOP
		row.ReadStruct(&spiralaxisgridWOP)

		// add the unmarshalled struct to the stage
		spiralaxisgridDB := new(SpiralAxisGridDB)
		spiralaxisgridDB.CopyBasicFieldsFromSpiralAxisGridWOP(&spiralaxisgridWOP)

		spiralaxisgridDB_ID_atBackupTime := spiralaxisgridDB.ID
		spiralaxisgridDB.ID = 0
		query := backRepoSpiralAxisGrid.db.Create(spiralaxisgridDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[spiralaxisgridDB.ID] = spiralaxisgridDB
		BackRepoSpiralAxisGridid_atBckpTime_newID[spiralaxisgridDB_ID_atBackupTime] = spiralaxisgridDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SpiralAxisGridDB.json" in dirPath that stores an array
// of SpiralAxisGridDB and stores it in the database
// the map BackRepoSpiralAxisGridid_atBckpTime_newID is updated accordingly
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSpiralAxisGridid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SpiralAxisGridDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SpiralAxisGrid file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SpiralAxisGridDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SpiralAxisGridDBID_SpiralAxisGridDB
	for _, spiralaxisgridDB := range forRestore {

		spiralaxisgridDB_ID_atBackupTime := spiralaxisgridDB.ID
		spiralaxisgridDB.ID = 0
		query := backRepoSpiralAxisGrid.db.Create(spiralaxisgridDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[spiralaxisgridDB.ID] = spiralaxisgridDB
		BackRepoSpiralAxisGridid_atBckpTime_newID[spiralaxisgridDB_ID_atBackupTime] = spiralaxisgridDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SpiralAxisGrid file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SpiralAxisGrid>id_atBckpTime_newID
// to compute new index
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) RestorePhaseTwo() {

	for _, spiralaxisgridDB := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB {

		// next line of code is to avert unused variable compilation error
		_ = spiralaxisgridDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if spiralaxisgridDB.ShapeCategoryID.Int64 != 0 {
			spiralaxisgridDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(spiralaxisgridDB.ShapeCategoryID.Int64)])
			spiralaxisgridDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSpiralAxisGrid.db.Model(spiralaxisgridDB).Updates(*spiralaxisgridDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSpiralAxisGrid.ResetReversePointers commits all staged instances of SpiralAxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralaxisgrid := range backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridPtr {
		backRepoSpiralAxisGrid.ResetReversePointersInstance(backRepo, idx, spiralaxisgrid)
	}

	return
}

func (backRepoSpiralAxisGrid *BackRepoSpiralAxisGridStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spiralaxisgrid *models.SpiralAxisGrid) (Error error) {

	// fetch matching spiralaxisgridDB
	if spiralaxisgridDB, ok := backRepoSpiralAxisGrid.Map_SpiralAxisGridDBID_SpiralAxisGridDB[idx]; ok {
		_ = spiralaxisgridDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSpiralAxisGridid_atBckpTime_newID map[uint]uint
