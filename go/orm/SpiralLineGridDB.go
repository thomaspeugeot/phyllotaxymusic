// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SpiralLineGrid_sql sql.NullBool
var dummy_SpiralLineGrid_time time.Duration
var dummy_SpiralLineGrid_sort sort.Float64Slice

// SpiralLineGridAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spirallinegridAPI
type SpiralLineGridAPI struct {
	gorm.Model

	models.SpiralLineGrid_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SpiralLineGridPointersEncoding SpiralLineGridPointersEncoding
}

// SpiralLineGridPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SpiralLineGridPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field SpiralLines is a slice of pointers to another Struct (optional or 0..1)
	SpiralLines IntSlice `gorm:"type:TEXT"`
}

// SpiralLineGridDB describes a spirallinegrid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spirallinegridDB
type SpiralLineGridDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spirallinegridDB.Name
	Name_Data sql.NullString

	// Declation for basic field spirallinegridDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SpiralLineGridPointersEncoding
}

// SpiralLineGridDBs arrays spirallinegridDBs
// swagger:response spirallinegridDBsResponse
type SpiralLineGridDBs []SpiralLineGridDB

// SpiralLineGridDBResponse provides response
// swagger:response spirallinegridDBResponse
type SpiralLineGridDBResponse struct {
	SpiralLineGridDB
}

// SpiralLineGridWOP is a SpiralLineGrid without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SpiralLineGridWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SpiralLineGrid_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoSpiralLineGridStruct struct {
	// stores SpiralLineGridDB according to their gorm ID
	Map_SpiralLineGridDBID_SpiralLineGridDB map[uint]*SpiralLineGridDB

	// stores SpiralLineGridDB ID according to SpiralLineGrid address
	Map_SpiralLineGridPtr_SpiralLineGridDBID map[*models.SpiralLineGrid]uint

	// stores SpiralLineGrid according to their gorm ID
	Map_SpiralLineGridDBID_SpiralLineGridPtr map[uint]*models.SpiralLineGrid

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSpiralLineGrid.stage
	return
}

func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) GetDB() db.DBInterface {
	return backRepoSpiralLineGrid.db
}

// GetSpiralLineGridDBFromSpiralLineGridPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) GetSpiralLineGridDBFromSpiralLineGridPtr(spirallinegrid *models.SpiralLineGrid) (spirallinegridDB *SpiralLineGridDB) {
	id := backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid]
	spirallinegridDB = backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[id]
	return
}

// BackRepoSpiralLineGrid.CommitPhaseOne commits all staged instances of SpiralLineGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spirallinegrid := range stage.SpiralLineGrids {
		backRepoSpiralLineGrid.CommitPhaseOneInstance(spirallinegrid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spirallinegrid := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr {
		if _, ok := stage.SpiralLineGrids[spirallinegrid]; !ok {
			backRepoSpiralLineGrid.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSpiralLineGrid.CommitDeleteInstance commits deletion of SpiralLineGrid to the BackRepo
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CommitDeleteInstance(id uint) (Error error) {

	spirallinegrid := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[id]

	// spirallinegrid is not staged anymore, remove spirallinegridDB
	spirallinegridDB := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[id]
	db, _ := backRepoSpiralLineGrid.db.Unscoped()
	_, err := db.Delete(spirallinegridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID, spirallinegrid)
	delete(backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr, id)
	delete(backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB, id)

	return
}

// BackRepoSpiralLineGrid.CommitPhaseOneInstance commits spirallinegrid staged instances of SpiralLineGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CommitPhaseOneInstance(spirallinegrid *models.SpiralLineGrid) (Error error) {

	// check if the spirallinegrid is not commited yet
	if _, ok := backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid]; ok {
		return
	}

	// initiate spirallinegrid
	var spirallinegridDB SpiralLineGridDB
	spirallinegridDB.CopyBasicFieldsFromSpiralLineGrid(spirallinegrid)

	_, err := backRepoSpiralLineGrid.db.Create(&spirallinegridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid] = spirallinegridDB.ID
	backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[spirallinegridDB.ID] = spirallinegrid
	backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[spirallinegridDB.ID] = &spirallinegridDB

	return
}

// BackRepoSpiralLineGrid.CommitPhaseTwo commits all staged instances of SpiralLineGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spirallinegrid := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr {
		backRepoSpiralLineGrid.CommitPhaseTwoInstance(backRepo, idx, spirallinegrid)
	}

	return
}

// BackRepoSpiralLineGrid.CommitPhaseTwoInstance commits {{structname }} of models.SpiralLineGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spirallinegrid *models.SpiralLineGrid) (Error error) {

	// fetch matching spirallinegridDB
	if spirallinegridDB, ok := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[idx]; ok {

		spirallinegridDB.CopyBasicFieldsFromSpiralLineGrid(spirallinegrid)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value spirallinegrid.ShapeCategory translates to updating the spirallinegrid.ShapeCategoryID
		spirallinegridDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if spirallinegrid.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[spirallinegrid.ShapeCategory]; ok {
				spirallinegridDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				spirallinegridDB.ShapeCategoryID.Valid = true
			}
		} else {
			spirallinegridDB.ShapeCategoryID.Int64 = 0
			spirallinegridDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		spirallinegridDB.SpiralLineGridPointersEncoding.SpiralLines = make([]int, 0)
		// 2. encode
		for _, spirallineAssocEnd := range spirallinegrid.SpiralLines {
			spirallineAssocEnd_DB :=
				backRepo.BackRepoSpiralLine.GetSpiralLineDBFromSpiralLinePtr(spirallineAssocEnd)
			
			// the stage might be inconsistant, meaning that the spirallineAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if spirallineAssocEnd_DB == nil {
				continue
			}
			
			spirallinegridDB.SpiralLineGridPointersEncoding.SpiralLines =
				append(spirallinegridDB.SpiralLineGridPointersEncoding.SpiralLines, int(spirallineAssocEnd_DB.ID))
		}

		_, err := backRepoSpiralLineGrid.db.Save(spirallinegridDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SpiralLineGrid intance %s", spirallinegrid.Name))
		return err
	}

	return
}

// BackRepoSpiralLineGrid.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CheckoutPhaseOne() (Error error) {

	spirallinegridDBArray := make([]SpiralLineGridDB, 0)
	_, err := backRepoSpiralLineGrid.db.Find(&spirallinegridDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spirallinegridInstancesToBeRemovedFromTheStage := make(map[*models.SpiralLineGrid]any)
	for key, value := range backRepoSpiralLineGrid.stage.SpiralLineGrids {
		spirallinegridInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spirallinegridDB := range spirallinegridDBArray {
		backRepoSpiralLineGrid.CheckoutPhaseOneInstance(&spirallinegridDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spirallinegrid, ok := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[spirallinegridDB.ID]
		if ok {
			delete(spirallinegridInstancesToBeRemovedFromTheStage, spirallinegrid)
		}
	}

	// remove from stage and back repo's 3 maps all spirallinegrids that are not in the checkout
	for spirallinegrid := range spirallinegridInstancesToBeRemovedFromTheStage {
		spirallinegrid.Unstage(backRepoSpiralLineGrid.GetStage())

		// remove instance from the back repo 3 maps
		spirallinegridID := backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid]
		delete(backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID, spirallinegrid)
		delete(backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB, spirallinegridID)
		delete(backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr, spirallinegridID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spirallinegridDB that has been found in the DB, updates the backRepo and stages the
// models version of the spirallinegridDB
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CheckoutPhaseOneInstance(spirallinegridDB *SpiralLineGridDB) (Error error) {

	spirallinegrid, ok := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[spirallinegridDB.ID]
	if !ok {
		spirallinegrid = new(models.SpiralLineGrid)

		backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[spirallinegridDB.ID] = spirallinegrid
		backRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid] = spirallinegridDB.ID

		// append model store with the new element
		spirallinegrid.Name = spirallinegridDB.Name_Data.String
		spirallinegrid.Stage(backRepoSpiralLineGrid.GetStage())
	}
	spirallinegridDB.CopyBasicFieldsToSpiralLineGrid(spirallinegrid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spirallinegrid.Stage(backRepoSpiralLineGrid.GetStage())

	// preserve pointer to spirallinegridDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SpiralLineGridDBID_SpiralLineGridDB)[spirallinegridDB hold variable pointers
	spirallinegridDB_Data := *spirallinegridDB
	preservedPtrToSpiralLineGrid := &spirallinegridDB_Data
	backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[spirallinegridDB.ID] = preservedPtrToSpiralLineGrid

	return
}

// BackRepoSpiralLineGrid.CheckoutPhaseTwo Checkouts all staged instances of SpiralLineGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spirallinegridDB := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB {
		backRepoSpiralLineGrid.CheckoutPhaseTwoInstance(backRepo, spirallinegridDB)
	}
	return
}

// BackRepoSpiralLineGrid.CheckoutPhaseTwoInstance Checkouts staged instances of SpiralLineGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spirallinegridDB *SpiralLineGridDB) (Error error) {

	spirallinegrid := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[spirallinegridDB.ID]

	spirallinegridDB.DecodePointers(backRepo, spirallinegrid)

	return
}

func (spirallinegridDB *SpiralLineGridDB) DecodePointers(backRepo *BackRepoStruct, spirallinegrid *models.SpiralLineGrid) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := spirallinegridDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: spirallinegrid.ShapeCategory, unknown pointer id", id)
			}

			// updates only if field has changed
			if spirallinegrid.ShapeCategory == nil || spirallinegrid.ShapeCategory != tmp {
				spirallinegrid.ShapeCategory = tmp
			}
		} else {
			spirallinegrid.ShapeCategory = nil
		}
	}
	
	// This loop redeem spirallinegrid.SpiralLines in the stage from the encode in the back repo
	// It parses all SpiralLineDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spirallinegrid.SpiralLines = spirallinegrid.SpiralLines[:0]
	for _, _SpiralLineid := range spirallinegridDB.SpiralLineGridPointersEncoding.SpiralLines {
		spirallinegrid.SpiralLines = append(spirallinegrid.SpiralLines, backRepo.BackRepoSpiralLine.Map_SpiralLineDBID_SpiralLinePtr[uint(_SpiralLineid)])
	}

	return
}

// CommitSpiralLineGrid allows commit of a single spirallinegrid (if already staged)
func (backRepo *BackRepoStruct) CommitSpiralLineGrid(spirallinegrid *models.SpiralLineGrid) {
	backRepo.BackRepoSpiralLineGrid.CommitPhaseOneInstance(spirallinegrid)
	if id, ok := backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid]; ok {
		backRepo.BackRepoSpiralLineGrid.CommitPhaseTwoInstance(backRepo, id, spirallinegrid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSpiralLineGrid allows checkout of a single spirallinegrid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSpiralLineGrid(spirallinegrid *models.SpiralLineGrid) {
	// check if the spirallinegrid is staged
	if _, ok := backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid]; ok {

		if id, ok := backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[spirallinegrid]; ok {
			var spirallinegridDB SpiralLineGridDB
			spirallinegridDB.ID = id

			if _, err := backRepo.BackRepoSpiralLineGrid.db.First(&spirallinegridDB, id); err != nil {
				log.Fatalln("CheckoutSpiralLineGrid : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSpiralLineGrid.CheckoutPhaseOneInstance(&spirallinegridDB)
			backRepo.BackRepoSpiralLineGrid.CheckoutPhaseTwoInstance(backRepo, &spirallinegridDB)
		}
	}
}

// CopyBasicFieldsFromSpiralLineGrid
func (spirallinegridDB *SpiralLineGridDB) CopyBasicFieldsFromSpiralLineGrid(spirallinegrid *models.SpiralLineGrid) {
	// insertion point for fields commit

	spirallinegridDB.Name_Data.String = spirallinegrid.Name
	spirallinegridDB.Name_Data.Valid = true

	spirallinegridDB.IsDisplayed_Data.Bool = spirallinegrid.IsDisplayed
	spirallinegridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromSpiralLineGrid_WOP
func (spirallinegridDB *SpiralLineGridDB) CopyBasicFieldsFromSpiralLineGrid_WOP(spirallinegrid *models.SpiralLineGrid_WOP) {
	// insertion point for fields commit

	spirallinegridDB.Name_Data.String = spirallinegrid.Name
	spirallinegridDB.Name_Data.Valid = true

	spirallinegridDB.IsDisplayed_Data.Bool = spirallinegrid.IsDisplayed
	spirallinegridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromSpiralLineGridWOP
func (spirallinegridDB *SpiralLineGridDB) CopyBasicFieldsFromSpiralLineGridWOP(spirallinegrid *SpiralLineGridWOP) {
	// insertion point for fields commit

	spirallinegridDB.Name_Data.String = spirallinegrid.Name
	spirallinegridDB.Name_Data.Valid = true

	spirallinegridDB.IsDisplayed_Data.Bool = spirallinegrid.IsDisplayed
	spirallinegridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToSpiralLineGrid
func (spirallinegridDB *SpiralLineGridDB) CopyBasicFieldsToSpiralLineGrid(spirallinegrid *models.SpiralLineGrid) {
	// insertion point for checkout of basic fields (back repo to stage)
	spirallinegrid.Name = spirallinegridDB.Name_Data.String
	spirallinegrid.IsDisplayed = spirallinegridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToSpiralLineGrid_WOP
func (spirallinegridDB *SpiralLineGridDB) CopyBasicFieldsToSpiralLineGrid_WOP(spirallinegrid *models.SpiralLineGrid_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spirallinegrid.Name = spirallinegridDB.Name_Data.String
	spirallinegrid.IsDisplayed = spirallinegridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToSpiralLineGridWOP
func (spirallinegridDB *SpiralLineGridDB) CopyBasicFieldsToSpiralLineGridWOP(spirallinegrid *SpiralLineGridWOP) {
	spirallinegrid.ID = int(spirallinegridDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spirallinegrid.Name = spirallinegridDB.Name_Data.String
	spirallinegrid.IsDisplayed = spirallinegridDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all SpiralLineGridDB instances in the backrepo
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SpiralLineGridDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralLineGridDB, 0)
	for _, spirallinegridDB := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB {
		forBackup = append(forBackup, spirallinegridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SpiralLineGrid ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SpiralLineGrid file", err.Error())
	}
}

// Backup generates a json file from a slice of all SpiralLineGridDB instances in the backrepo
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralLineGridDB, 0)
	for _, spirallinegridDB := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB {
		forBackup = append(forBackup, spirallinegridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SpiralLineGrid")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SpiralLineGrid_Fields, -1)
	for _, spirallinegridDB := range forBackup {

		var spirallinegridWOP SpiralLineGridWOP
		spirallinegridDB.CopyBasicFieldsToSpiralLineGridWOP(&spirallinegridWOP)

		row := sh.AddRow()
		row.WriteStruct(&spirallinegridWOP, -1)
	}
}

// RestoreXL from the "SpiralLineGrid" sheet all SpiralLineGridDB instances
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSpiralLineGridid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SpiralLineGrid"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSpiralLineGrid.rowVisitorSpiralLineGrid)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) rowVisitorSpiralLineGrid(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spirallinegridWOP SpiralLineGridWOP
		row.ReadStruct(&spirallinegridWOP)

		// add the unmarshalled struct to the stage
		spirallinegridDB := new(SpiralLineGridDB)
		spirallinegridDB.CopyBasicFieldsFromSpiralLineGridWOP(&spirallinegridWOP)

		spirallinegridDB_ID_atBackupTime := spirallinegridDB.ID
		spirallinegridDB.ID = 0
		_, err := backRepoSpiralLineGrid.db.Create(spirallinegridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[spirallinegridDB.ID] = spirallinegridDB
		BackRepoSpiralLineGridid_atBckpTime_newID[spirallinegridDB_ID_atBackupTime] = spirallinegridDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SpiralLineGridDB.json" in dirPath that stores an array
// of SpiralLineGridDB and stores it in the database
// the map BackRepoSpiralLineGridid_atBckpTime_newID is updated accordingly
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSpiralLineGridid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SpiralLineGridDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SpiralLineGrid file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SpiralLineGridDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SpiralLineGridDBID_SpiralLineGridDB
	for _, spirallinegridDB := range forRestore {

		spirallinegridDB_ID_atBackupTime := spirallinegridDB.ID
		spirallinegridDB.ID = 0
		_, err := backRepoSpiralLineGrid.db.Create(spirallinegridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[spirallinegridDB.ID] = spirallinegridDB
		BackRepoSpiralLineGridid_atBckpTime_newID[spirallinegridDB_ID_atBackupTime] = spirallinegridDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SpiralLineGrid file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SpiralLineGrid>id_atBckpTime_newID
// to compute new index
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) RestorePhaseTwo() {

	for _, spirallinegridDB := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB {

		// next line of code is to avert unused variable compilation error
		_ = spirallinegridDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if spirallinegridDB.ShapeCategoryID.Int64 != 0 {
			spirallinegridDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(spirallinegridDB.ShapeCategoryID.Int64)])
			spirallinegridDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSpiralLineGrid.db.Model(spirallinegridDB)
		_, err := db.Updates(*spirallinegridDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSpiralLineGrid.ResetReversePointers commits all staged instances of SpiralLineGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spirallinegrid := range backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr {
		backRepoSpiralLineGrid.ResetReversePointersInstance(backRepo, idx, spirallinegrid)
	}

	return
}

func (backRepoSpiralLineGrid *BackRepoSpiralLineGridStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spirallinegrid *models.SpiralLineGrid) (Error error) {

	// fetch matching spirallinegridDB
	if spirallinegridDB, ok := backRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridDB[idx]; ok {
		_ = spirallinegridDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSpiralLineGridid_atBckpTime_newID map[uint]uint
