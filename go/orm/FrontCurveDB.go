// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FrontCurve_sql sql.NullBool
var dummy_FrontCurve_time time.Duration
var dummy_FrontCurve_sort sort.Float64Slice

// FrontCurveAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model frontcurveAPI
type FrontCurveAPI struct {
	gorm.Model

	models.FrontCurve_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FrontCurvePointersEncoding FrontCurvePointersEncoding
}

// FrontCurvePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FrontCurvePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FrontCurveDB describes a frontcurve in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model frontcurveDB
type FrontCurveDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field frontcurveDB.Name
	Name_Data sql.NullString

	// Declation for basic field frontcurveDB.Path
	Path_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FrontCurvePointersEncoding
}

// FrontCurveDBs arrays frontcurveDBs
// swagger:response frontcurveDBsResponse
type FrontCurveDBs []FrontCurveDB

// FrontCurveDBResponse provides response
// swagger:response frontcurveDBResponse
type FrontCurveDBResponse struct {
	FrontCurveDB
}

// FrontCurveWOP is a FrontCurve without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FrontCurveWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Path string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FrontCurve_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Path",
}

type BackRepoFrontCurveStruct struct {
	// stores FrontCurveDB according to their gorm ID
	Map_FrontCurveDBID_FrontCurveDB map[uint]*FrontCurveDB

	// stores FrontCurveDB ID according to FrontCurve address
	Map_FrontCurvePtr_FrontCurveDBID map[*models.FrontCurve]uint

	// stores FrontCurve according to their gorm ID
	Map_FrontCurveDBID_FrontCurvePtr map[uint]*models.FrontCurve

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoFrontCurve *BackRepoFrontCurveStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFrontCurve.stage
	return
}

func (backRepoFrontCurve *BackRepoFrontCurveStruct) GetDB() db.DBInterface {
	return backRepoFrontCurve.db
}

// GetFrontCurveDBFromFrontCurvePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFrontCurve *BackRepoFrontCurveStruct) GetFrontCurveDBFromFrontCurvePtr(frontcurve *models.FrontCurve) (frontcurveDB *FrontCurveDB) {
	id := backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve]
	frontcurveDB = backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[id]
	return
}

// BackRepoFrontCurve.CommitPhaseOne commits all staged instances of FrontCurve to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for frontcurve := range stage.FrontCurves {
		backRepoFrontCurve.CommitPhaseOneInstance(frontcurve)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, frontcurve := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr {
		if _, ok := stage.FrontCurves[frontcurve]; !ok {
			backRepoFrontCurve.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFrontCurve.CommitDeleteInstance commits deletion of FrontCurve to the BackRepo
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CommitDeleteInstance(id uint) (Error error) {

	frontcurve := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[id]

	// frontcurve is not staged anymore, remove frontcurveDB
	frontcurveDB := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[id]
	db, _ := backRepoFrontCurve.db.Unscoped()
	_, err := db.Delete(frontcurveDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID, frontcurve)
	delete(backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr, id)
	delete(backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB, id)

	return
}

// BackRepoFrontCurve.CommitPhaseOneInstance commits frontcurve staged instances of FrontCurve to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CommitPhaseOneInstance(frontcurve *models.FrontCurve) (Error error) {

	// check if the frontcurve is not commited yet
	if _, ok := backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve]; ok {
		return
	}

	// initiate frontcurve
	var frontcurveDB FrontCurveDB
	frontcurveDB.CopyBasicFieldsFromFrontCurve(frontcurve)

	_, err := backRepoFrontCurve.db.Create(&frontcurveDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve] = frontcurveDB.ID
	backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[frontcurveDB.ID] = frontcurve
	backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[frontcurveDB.ID] = &frontcurveDB

	return
}

// BackRepoFrontCurve.CommitPhaseTwo commits all staged instances of FrontCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, frontcurve := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr {
		backRepoFrontCurve.CommitPhaseTwoInstance(backRepo, idx, frontcurve)
	}

	return
}

// BackRepoFrontCurve.CommitPhaseTwoInstance commits {{structname }} of models.FrontCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, frontcurve *models.FrontCurve) (Error error) {

	// fetch matching frontcurveDB
	if frontcurveDB, ok := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[idx]; ok {

		frontcurveDB.CopyBasicFieldsFromFrontCurve(frontcurve)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFrontCurve.db.Save(frontcurveDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FrontCurve intance %s", frontcurve.Name))
		return err
	}

	return
}

// BackRepoFrontCurve.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CheckoutPhaseOne() (Error error) {

	frontcurveDBArray := make([]FrontCurveDB, 0)
	_, err := backRepoFrontCurve.db.Find(&frontcurveDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	frontcurveInstancesToBeRemovedFromTheStage := make(map[*models.FrontCurve]any)
	for key, value := range backRepoFrontCurve.stage.FrontCurves {
		frontcurveInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, frontcurveDB := range frontcurveDBArray {
		backRepoFrontCurve.CheckoutPhaseOneInstance(&frontcurveDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		frontcurve, ok := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[frontcurveDB.ID]
		if ok {
			delete(frontcurveInstancesToBeRemovedFromTheStage, frontcurve)
		}
	}

	// remove from stage and back repo's 3 maps all frontcurves that are not in the checkout
	for frontcurve := range frontcurveInstancesToBeRemovedFromTheStage {
		frontcurve.Unstage(backRepoFrontCurve.GetStage())

		// remove instance from the back repo 3 maps
		frontcurveID := backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve]
		delete(backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID, frontcurve)
		delete(backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB, frontcurveID)
		delete(backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr, frontcurveID)
	}

	return
}

// CheckoutPhaseOneInstance takes a frontcurveDB that has been found in the DB, updates the backRepo and stages the
// models version of the frontcurveDB
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CheckoutPhaseOneInstance(frontcurveDB *FrontCurveDB) (Error error) {

	frontcurve, ok := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[frontcurveDB.ID]
	if !ok {
		frontcurve = new(models.FrontCurve)

		backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[frontcurveDB.ID] = frontcurve
		backRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve] = frontcurveDB.ID

		// append model store with the new element
		frontcurve.Name = frontcurveDB.Name_Data.String
		frontcurve.Stage(backRepoFrontCurve.GetStage())
	}
	frontcurveDB.CopyBasicFieldsToFrontCurve(frontcurve)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	frontcurve.Stage(backRepoFrontCurve.GetStage())

	// preserve pointer to frontcurveDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FrontCurveDBID_FrontCurveDB)[frontcurveDB hold variable pointers
	frontcurveDB_Data := *frontcurveDB
	preservedPtrToFrontCurve := &frontcurveDB_Data
	backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[frontcurveDB.ID] = preservedPtrToFrontCurve

	return
}

// BackRepoFrontCurve.CheckoutPhaseTwo Checkouts all staged instances of FrontCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, frontcurveDB := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB {
		backRepoFrontCurve.CheckoutPhaseTwoInstance(backRepo, frontcurveDB)
	}
	return
}

// BackRepoFrontCurve.CheckoutPhaseTwoInstance Checkouts staged instances of FrontCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurve *BackRepoFrontCurveStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, frontcurveDB *FrontCurveDB) (Error error) {

	frontcurve := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[frontcurveDB.ID]

	frontcurveDB.DecodePointers(backRepo, frontcurve)

	return
}

func (frontcurveDB *FrontCurveDB) DecodePointers(backRepo *BackRepoStruct, frontcurve *models.FrontCurve) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFrontCurve allows commit of a single frontcurve (if already staged)
func (backRepo *BackRepoStruct) CommitFrontCurve(frontcurve *models.FrontCurve) {
	backRepo.BackRepoFrontCurve.CommitPhaseOneInstance(frontcurve)
	if id, ok := backRepo.BackRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve]; ok {
		backRepo.BackRepoFrontCurve.CommitPhaseTwoInstance(backRepo, id, frontcurve)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFrontCurve allows checkout of a single frontcurve (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFrontCurve(frontcurve *models.FrontCurve) {
	// check if the frontcurve is staged
	if _, ok := backRepo.BackRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve]; ok {

		if id, ok := backRepo.BackRepoFrontCurve.Map_FrontCurvePtr_FrontCurveDBID[frontcurve]; ok {
			var frontcurveDB FrontCurveDB
			frontcurveDB.ID = id

			if _, err := backRepo.BackRepoFrontCurve.db.First(&frontcurveDB, id); err != nil {
				log.Fatalln("CheckoutFrontCurve : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFrontCurve.CheckoutPhaseOneInstance(&frontcurveDB)
			backRepo.BackRepoFrontCurve.CheckoutPhaseTwoInstance(backRepo, &frontcurveDB)
		}
	}
}

// CopyBasicFieldsFromFrontCurve
func (frontcurveDB *FrontCurveDB) CopyBasicFieldsFromFrontCurve(frontcurve *models.FrontCurve) {
	// insertion point for fields commit

	frontcurveDB.Name_Data.String = frontcurve.Name
	frontcurveDB.Name_Data.Valid = true

	frontcurveDB.Path_Data.String = frontcurve.Path
	frontcurveDB.Path_Data.Valid = true
}

// CopyBasicFieldsFromFrontCurve_WOP
func (frontcurveDB *FrontCurveDB) CopyBasicFieldsFromFrontCurve_WOP(frontcurve *models.FrontCurve_WOP) {
	// insertion point for fields commit

	frontcurveDB.Name_Data.String = frontcurve.Name
	frontcurveDB.Name_Data.Valid = true

	frontcurveDB.Path_Data.String = frontcurve.Path
	frontcurveDB.Path_Data.Valid = true
}

// CopyBasicFieldsFromFrontCurveWOP
func (frontcurveDB *FrontCurveDB) CopyBasicFieldsFromFrontCurveWOP(frontcurve *FrontCurveWOP) {
	// insertion point for fields commit

	frontcurveDB.Name_Data.String = frontcurve.Name
	frontcurveDB.Name_Data.Valid = true

	frontcurveDB.Path_Data.String = frontcurve.Path
	frontcurveDB.Path_Data.Valid = true
}

// CopyBasicFieldsToFrontCurve
func (frontcurveDB *FrontCurveDB) CopyBasicFieldsToFrontCurve(frontcurve *models.FrontCurve) {
	// insertion point for checkout of basic fields (back repo to stage)
	frontcurve.Name = frontcurveDB.Name_Data.String
	frontcurve.Path = frontcurveDB.Path_Data.String
}

// CopyBasicFieldsToFrontCurve_WOP
func (frontcurveDB *FrontCurveDB) CopyBasicFieldsToFrontCurve_WOP(frontcurve *models.FrontCurve_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	frontcurve.Name = frontcurveDB.Name_Data.String
	frontcurve.Path = frontcurveDB.Path_Data.String
}

// CopyBasicFieldsToFrontCurveWOP
func (frontcurveDB *FrontCurveDB) CopyBasicFieldsToFrontCurveWOP(frontcurve *FrontCurveWOP) {
	frontcurve.ID = int(frontcurveDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	frontcurve.Name = frontcurveDB.Name_Data.String
	frontcurve.Path = frontcurveDB.Path_Data.String
}

// Backup generates a json file from a slice of all FrontCurveDB instances in the backrepo
func (backRepoFrontCurve *BackRepoFrontCurveStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FrontCurveDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FrontCurveDB, 0)
	for _, frontcurveDB := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB {
		forBackup = append(forBackup, frontcurveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FrontCurve ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FrontCurve file", err.Error())
	}
}

// Backup generates a json file from a slice of all FrontCurveDB instances in the backrepo
func (backRepoFrontCurve *BackRepoFrontCurveStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FrontCurveDB, 0)
	for _, frontcurveDB := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB {
		forBackup = append(forBackup, frontcurveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FrontCurve")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FrontCurve_Fields, -1)
	for _, frontcurveDB := range forBackup {

		var frontcurveWOP FrontCurveWOP
		frontcurveDB.CopyBasicFieldsToFrontCurveWOP(&frontcurveWOP)

		row := sh.AddRow()
		row.WriteStruct(&frontcurveWOP, -1)
	}
}

// RestoreXL from the "FrontCurve" sheet all FrontCurveDB instances
func (backRepoFrontCurve *BackRepoFrontCurveStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFrontCurveid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FrontCurve"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFrontCurve.rowVisitorFrontCurve)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFrontCurve *BackRepoFrontCurveStruct) rowVisitorFrontCurve(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var frontcurveWOP FrontCurveWOP
		row.ReadStruct(&frontcurveWOP)

		// add the unmarshalled struct to the stage
		frontcurveDB := new(FrontCurveDB)
		frontcurveDB.CopyBasicFieldsFromFrontCurveWOP(&frontcurveWOP)

		frontcurveDB_ID_atBackupTime := frontcurveDB.ID
		frontcurveDB.ID = 0
		_, err := backRepoFrontCurve.db.Create(frontcurveDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[frontcurveDB.ID] = frontcurveDB
		BackRepoFrontCurveid_atBckpTime_newID[frontcurveDB_ID_atBackupTime] = frontcurveDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FrontCurveDB.json" in dirPath that stores an array
// of FrontCurveDB and stores it in the database
// the map BackRepoFrontCurveid_atBckpTime_newID is updated accordingly
func (backRepoFrontCurve *BackRepoFrontCurveStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFrontCurveid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FrontCurveDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FrontCurve file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FrontCurveDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FrontCurveDBID_FrontCurveDB
	for _, frontcurveDB := range forRestore {

		frontcurveDB_ID_atBackupTime := frontcurveDB.ID
		frontcurveDB.ID = 0
		_, err := backRepoFrontCurve.db.Create(frontcurveDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[frontcurveDB.ID] = frontcurveDB
		BackRepoFrontCurveid_atBckpTime_newID[frontcurveDB_ID_atBackupTime] = frontcurveDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FrontCurve file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FrontCurve>id_atBckpTime_newID
// to compute new index
func (backRepoFrontCurve *BackRepoFrontCurveStruct) RestorePhaseTwo() {

	for _, frontcurveDB := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB {

		// next line of code is to avert unused variable compilation error
		_ = frontcurveDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFrontCurve.db.Model(frontcurveDB)
		_, err := db.Updates(*frontcurveDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFrontCurve.ResetReversePointers commits all staged instances of FrontCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurve *BackRepoFrontCurveStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, frontcurve := range backRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr {
		backRepoFrontCurve.ResetReversePointersInstance(backRepo, idx, frontcurve)
	}

	return
}

func (backRepoFrontCurve *BackRepoFrontCurveStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, frontcurve *models.FrontCurve) (Error error) {

	// fetch matching frontcurveDB
	if frontcurveDB, ok := backRepoFrontCurve.Map_FrontCurveDBID_FrontCurveDB[idx]; ok {
		_ = frontcurveDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFrontCurveid_atBckpTime_newID map[uint]uint
