// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BezierGrid_sql sql.NullBool
var dummy_BezierGrid_time time.Duration
var dummy_BezierGrid_sort sort.Float64Slice

// BezierGridAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beziergridAPI
type BezierGridAPI struct {
	gorm.Model

	models.BezierGrid_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BezierGridPointersEncoding BezierGridPointersEncoding
}

// BezierGridPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BezierGridPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Reference is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ReferenceID sql.NullInt64

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field Beziers is a slice of pointers to another Struct (optional or 0..1)
	Beziers IntSlice `gorm:"type:TEXT"`
}

// BezierGridDB describes a beziergrid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beziergridDB
type BezierGridDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beziergridDB.Name
	Name_Data sql.NullString

	// Declation for basic field beziergridDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BezierGridPointersEncoding
}

// BezierGridDBs arrays beziergridDBs
// swagger:response beziergridDBsResponse
type BezierGridDBs []BezierGridDB

// BezierGridDBResponse provides response
// swagger:response beziergridDBResponse
type BezierGridDBResponse struct {
	BezierGridDB
}

// BezierGridWOP is a BezierGrid without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BezierGridWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var BezierGrid_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoBezierGridStruct struct {
	// stores BezierGridDB according to their gorm ID
	Map_BezierGridDBID_BezierGridDB map[uint]*BezierGridDB

	// stores BezierGridDB ID according to BezierGrid address
	Map_BezierGridPtr_BezierGridDBID map[*models.BezierGrid]uint

	// stores BezierGrid according to their gorm ID
	Map_BezierGridDBID_BezierGridPtr map[uint]*models.BezierGrid

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoBezierGrid *BackRepoBezierGridStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBezierGrid.stage
	return
}

func (backRepoBezierGrid *BackRepoBezierGridStruct) GetDB() db.DBInterface {
	return backRepoBezierGrid.db
}

// GetBezierGridDBFromBezierGridPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBezierGrid *BackRepoBezierGridStruct) GetBezierGridDBFromBezierGridPtr(beziergrid *models.BezierGrid) (beziergridDB *BezierGridDB) {
	id := backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid]
	beziergridDB = backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[id]
	return
}

// BackRepoBezierGrid.CommitPhaseOne commits all staged instances of BezierGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierGrid *BackRepoBezierGridStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beziergrid := range stage.BezierGrids {
		backRepoBezierGrid.CommitPhaseOneInstance(beziergrid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beziergrid := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr {
		if _, ok := stage.BezierGrids[beziergrid]; !ok {
			backRepoBezierGrid.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBezierGrid.CommitDeleteInstance commits deletion of BezierGrid to the BackRepo
func (backRepoBezierGrid *BackRepoBezierGridStruct) CommitDeleteInstance(id uint) (Error error) {

	beziergrid := backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[id]

	// beziergrid is not staged anymore, remove beziergridDB
	beziergridDB := backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[id]
	db, _ := backRepoBezierGrid.db.Unscoped()
	_, err := db.Delete(beziergridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID, beziergrid)
	delete(backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr, id)
	delete(backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB, id)

	return
}

// BackRepoBezierGrid.CommitPhaseOneInstance commits beziergrid staged instances of BezierGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierGrid *BackRepoBezierGridStruct) CommitPhaseOneInstance(beziergrid *models.BezierGrid) (Error error) {

	// check if the beziergrid is not commited yet
	if _, ok := backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid]; ok {
		return
	}

	// initiate beziergrid
	var beziergridDB BezierGridDB
	beziergridDB.CopyBasicFieldsFromBezierGrid(beziergrid)

	_, err := backRepoBezierGrid.db.Create(&beziergridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid] = beziergridDB.ID
	backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[beziergridDB.ID] = beziergrid
	backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[beziergridDB.ID] = &beziergridDB

	return
}

// BackRepoBezierGrid.CommitPhaseTwo commits all staged instances of BezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGrid *BackRepoBezierGridStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beziergrid := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr {
		backRepoBezierGrid.CommitPhaseTwoInstance(backRepo, idx, beziergrid)
	}

	return
}

// BackRepoBezierGrid.CommitPhaseTwoInstance commits {{structname }} of models.BezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGrid *BackRepoBezierGridStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beziergrid *models.BezierGrid) (Error error) {

	// fetch matching beziergridDB
	if beziergridDB, ok := backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[idx]; ok {

		beziergridDB.CopyBasicFieldsFromBezierGrid(beziergrid)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value beziergrid.Reference translates to updating the beziergrid.ReferenceID
		beziergridDB.ReferenceID.Valid = true // allow for a 0 value (nil association)
		if beziergrid.Reference != nil {
			if ReferenceId, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[beziergrid.Reference]; ok {
				beziergridDB.ReferenceID.Int64 = int64(ReferenceId)
				beziergridDB.ReferenceID.Valid = true
			}
		} else {
			beziergridDB.ReferenceID.Int64 = 0
			beziergridDB.ReferenceID.Valid = true
		}

		// commit pointer value beziergrid.ShapeCategory translates to updating the beziergrid.ShapeCategoryID
		beziergridDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if beziergrid.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[beziergrid.ShapeCategory]; ok {
				beziergridDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				beziergridDB.ShapeCategoryID.Valid = true
			}
		} else {
			beziergridDB.ShapeCategoryID.Int64 = 0
			beziergridDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		beziergridDB.BezierGridPointersEncoding.Beziers = make([]int, 0)
		// 2. encode
		for _, bezierAssocEnd := range beziergrid.Beziers {
			bezierAssocEnd_DB :=
				backRepo.BackRepoBezier.GetBezierDBFromBezierPtr(bezierAssocEnd)
			
			// the stage might be inconsistant, meaning that the bezierAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if bezierAssocEnd_DB == nil {
				continue
			}
			
			beziergridDB.BezierGridPointersEncoding.Beziers =
				append(beziergridDB.BezierGridPointersEncoding.Beziers, int(bezierAssocEnd_DB.ID))
		}

		_, err := backRepoBezierGrid.db.Save(beziergridDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BezierGrid intance %s", beziergrid.Name))
		return err
	}

	return
}

// BackRepoBezierGrid.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBezierGrid *BackRepoBezierGridStruct) CheckoutPhaseOne() (Error error) {

	beziergridDBArray := make([]BezierGridDB, 0)
	_, err := backRepoBezierGrid.db.Find(&beziergridDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beziergridInstancesToBeRemovedFromTheStage := make(map[*models.BezierGrid]any)
	for key, value := range backRepoBezierGrid.stage.BezierGrids {
		beziergridInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beziergridDB := range beziergridDBArray {
		backRepoBezierGrid.CheckoutPhaseOneInstance(&beziergridDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beziergrid, ok := backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[beziergridDB.ID]
		if ok {
			delete(beziergridInstancesToBeRemovedFromTheStage, beziergrid)
		}
	}

	// remove from stage and back repo's 3 maps all beziergrids that are not in the checkout
	for beziergrid := range beziergridInstancesToBeRemovedFromTheStage {
		beziergrid.Unstage(backRepoBezierGrid.GetStage())

		// remove instance from the back repo 3 maps
		beziergridID := backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid]
		delete(backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID, beziergrid)
		delete(backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB, beziergridID)
		delete(backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr, beziergridID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beziergridDB that has been found in the DB, updates the backRepo and stages the
// models version of the beziergridDB
func (backRepoBezierGrid *BackRepoBezierGridStruct) CheckoutPhaseOneInstance(beziergridDB *BezierGridDB) (Error error) {

	beziergrid, ok := backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[beziergridDB.ID]
	if !ok {
		beziergrid = new(models.BezierGrid)

		backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[beziergridDB.ID] = beziergrid
		backRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid] = beziergridDB.ID

		// append model store with the new element
		beziergrid.Name = beziergridDB.Name_Data.String
		beziergrid.Stage(backRepoBezierGrid.GetStage())
	}
	beziergridDB.CopyBasicFieldsToBezierGrid(beziergrid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beziergrid.Stage(backRepoBezierGrid.GetStage())

	// preserve pointer to beziergridDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BezierGridDBID_BezierGridDB)[beziergridDB hold variable pointers
	beziergridDB_Data := *beziergridDB
	preservedPtrToBezierGrid := &beziergridDB_Data
	backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[beziergridDB.ID] = preservedPtrToBezierGrid

	return
}

// BackRepoBezierGrid.CheckoutPhaseTwo Checkouts all staged instances of BezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGrid *BackRepoBezierGridStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beziergridDB := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB {
		backRepoBezierGrid.CheckoutPhaseTwoInstance(backRepo, beziergridDB)
	}
	return
}

// BackRepoBezierGrid.CheckoutPhaseTwoInstance Checkouts staged instances of BezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGrid *BackRepoBezierGridStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beziergridDB *BezierGridDB) (Error error) {

	beziergrid := backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[beziergridDB.ID]

	beziergridDB.DecodePointers(backRepo, beziergrid)

	return
}

func (beziergridDB *BezierGridDB) DecodePointers(backRepo *BackRepoStruct, beziergrid *models.BezierGrid) {

	// insertion point for checkout of pointer encoding
	// Reference field	
	{
		id := beziergridDB.ReferenceID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoBezier.Map_BezierDBID_BezierPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: beziergrid.Reference, unknown pointer id", id)
			}

			// updates only if field has changed
			if beziergrid.Reference == nil || beziergrid.Reference != tmp {
				beziergrid.Reference = tmp
			}
		} else {
			beziergrid.Reference = nil
		}
	}
	
	// ShapeCategory field	
	{
		id := beziergridDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: beziergrid.ShapeCategory, unknown pointer id", id)
			}

			// updates only if field has changed
			if beziergrid.ShapeCategory == nil || beziergrid.ShapeCategory != tmp {
				beziergrid.ShapeCategory = tmp
			}
		} else {
			beziergrid.ShapeCategory = nil
		}
	}
	
	// This loop redeem beziergrid.Beziers in the stage from the encode in the back repo
	// It parses all BezierDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	beziergrid.Beziers = beziergrid.Beziers[:0]
	for _, _Bezierid := range beziergridDB.BezierGridPointersEncoding.Beziers {
		beziergrid.Beziers = append(beziergrid.Beziers, backRepo.BackRepoBezier.Map_BezierDBID_BezierPtr[uint(_Bezierid)])
	}

	return
}

// CommitBezierGrid allows commit of a single beziergrid (if already staged)
func (backRepo *BackRepoStruct) CommitBezierGrid(beziergrid *models.BezierGrid) {
	backRepo.BackRepoBezierGrid.CommitPhaseOneInstance(beziergrid)
	if id, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid]; ok {
		backRepo.BackRepoBezierGrid.CommitPhaseTwoInstance(backRepo, id, beziergrid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBezierGrid allows checkout of a single beziergrid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBezierGrid(beziergrid *models.BezierGrid) {
	// check if the beziergrid is staged
	if _, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid]; ok {

		if id, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[beziergrid]; ok {
			var beziergridDB BezierGridDB
			beziergridDB.ID = id

			if _, err := backRepo.BackRepoBezierGrid.db.First(&beziergridDB, id); err != nil {
				log.Fatalln("CheckoutBezierGrid : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBezierGrid.CheckoutPhaseOneInstance(&beziergridDB)
			backRepo.BackRepoBezierGrid.CheckoutPhaseTwoInstance(backRepo, &beziergridDB)
		}
	}
}

// CopyBasicFieldsFromBezierGrid
func (beziergridDB *BezierGridDB) CopyBasicFieldsFromBezierGrid(beziergrid *models.BezierGrid) {
	// insertion point for fields commit

	beziergridDB.Name_Data.String = beziergrid.Name
	beziergridDB.Name_Data.Valid = true

	beziergridDB.IsDisplayed_Data.Bool = beziergrid.IsDisplayed
	beziergridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromBezierGrid_WOP
func (beziergridDB *BezierGridDB) CopyBasicFieldsFromBezierGrid_WOP(beziergrid *models.BezierGrid_WOP) {
	// insertion point for fields commit

	beziergridDB.Name_Data.String = beziergrid.Name
	beziergridDB.Name_Data.Valid = true

	beziergridDB.IsDisplayed_Data.Bool = beziergrid.IsDisplayed
	beziergridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromBezierGridWOP
func (beziergridDB *BezierGridDB) CopyBasicFieldsFromBezierGridWOP(beziergrid *BezierGridWOP) {
	// insertion point for fields commit

	beziergridDB.Name_Data.String = beziergrid.Name
	beziergridDB.Name_Data.Valid = true

	beziergridDB.IsDisplayed_Data.Bool = beziergrid.IsDisplayed
	beziergridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToBezierGrid
func (beziergridDB *BezierGridDB) CopyBasicFieldsToBezierGrid(beziergrid *models.BezierGrid) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziergrid.Name = beziergridDB.Name_Data.String
	beziergrid.IsDisplayed = beziergridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToBezierGrid_WOP
func (beziergridDB *BezierGridDB) CopyBasicFieldsToBezierGrid_WOP(beziergrid *models.BezierGrid_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziergrid.Name = beziergridDB.Name_Data.String
	beziergrid.IsDisplayed = beziergridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToBezierGridWOP
func (beziergridDB *BezierGridDB) CopyBasicFieldsToBezierGridWOP(beziergrid *BezierGridWOP) {
	beziergrid.ID = int(beziergridDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beziergrid.Name = beziergridDB.Name_Data.String
	beziergrid.IsDisplayed = beziergridDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all BezierGridDB instances in the backrepo
func (backRepoBezierGrid *BackRepoBezierGridStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BezierGridDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierGridDB, 0)
	for _, beziergridDB := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB {
		forBackup = append(forBackup, beziergridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BezierGrid ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BezierGrid file", err.Error())
	}
}

// Backup generates a json file from a slice of all BezierGridDB instances in the backrepo
func (backRepoBezierGrid *BackRepoBezierGridStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierGridDB, 0)
	for _, beziergridDB := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB {
		forBackup = append(forBackup, beziergridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BezierGrid")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BezierGrid_Fields, -1)
	for _, beziergridDB := range forBackup {

		var beziergridWOP BezierGridWOP
		beziergridDB.CopyBasicFieldsToBezierGridWOP(&beziergridWOP)

		row := sh.AddRow()
		row.WriteStruct(&beziergridWOP, -1)
	}
}

// RestoreXL from the "BezierGrid" sheet all BezierGridDB instances
func (backRepoBezierGrid *BackRepoBezierGridStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBezierGridid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BezierGrid"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBezierGrid.rowVisitorBezierGrid)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBezierGrid *BackRepoBezierGridStruct) rowVisitorBezierGrid(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beziergridWOP BezierGridWOP
		row.ReadStruct(&beziergridWOP)

		// add the unmarshalled struct to the stage
		beziergridDB := new(BezierGridDB)
		beziergridDB.CopyBasicFieldsFromBezierGridWOP(&beziergridWOP)

		beziergridDB_ID_atBackupTime := beziergridDB.ID
		beziergridDB.ID = 0
		_, err := backRepoBezierGrid.db.Create(beziergridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[beziergridDB.ID] = beziergridDB
		BackRepoBezierGridid_atBckpTime_newID[beziergridDB_ID_atBackupTime] = beziergridDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BezierGridDB.json" in dirPath that stores an array
// of BezierGridDB and stores it in the database
// the map BackRepoBezierGridid_atBckpTime_newID is updated accordingly
func (backRepoBezierGrid *BackRepoBezierGridStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBezierGridid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BezierGridDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BezierGrid file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BezierGridDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BezierGridDBID_BezierGridDB
	for _, beziergridDB := range forRestore {

		beziergridDB_ID_atBackupTime := beziergridDB.ID
		beziergridDB.ID = 0
		_, err := backRepoBezierGrid.db.Create(beziergridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[beziergridDB.ID] = beziergridDB
		BackRepoBezierGridid_atBckpTime_newID[beziergridDB_ID_atBackupTime] = beziergridDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BezierGrid file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BezierGrid>id_atBckpTime_newID
// to compute new index
func (backRepoBezierGrid *BackRepoBezierGridStruct) RestorePhaseTwo() {

	for _, beziergridDB := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB {

		// next line of code is to avert unused variable compilation error
		_ = beziergridDB

		// insertion point for reindexing pointers encoding
		// reindexing Reference field
		if beziergridDB.ReferenceID.Int64 != 0 {
			beziergridDB.ReferenceID.Int64 = int64(BackRepoBezierid_atBckpTime_newID[uint(beziergridDB.ReferenceID.Int64)])
			beziergridDB.ReferenceID.Valid = true
		}

		// reindexing ShapeCategory field
		if beziergridDB.ShapeCategoryID.Int64 != 0 {
			beziergridDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(beziergridDB.ShapeCategoryID.Int64)])
			beziergridDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoBezierGrid.db.Model(beziergridDB)
		_, err := db.Updates(*beziergridDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoBezierGrid.ResetReversePointers commits all staged instances of BezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGrid *BackRepoBezierGridStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beziergrid := range backRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr {
		backRepoBezierGrid.ResetReversePointersInstance(backRepo, idx, beziergrid)
	}

	return
}

func (backRepoBezierGrid *BackRepoBezierGridStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beziergrid *models.BezierGrid) (Error error) {

	// fetch matching beziergridDB
	if beziergridDB, ok := backRepoBezierGrid.Map_BezierGridDBID_BezierGridDB[idx]; ok {
		_ = beziergridDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBezierGridid_atBckpTime_newID map[uint]uint
