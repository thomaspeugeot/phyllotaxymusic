// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bezier_sql sql.NullBool
var dummy_Bezier_time time.Duration
var dummy_Bezier_sort sort.Float64Slice

// BezierAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bezierAPI
type BezierAPI struct {
	gorm.Model

	models.Bezier_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BezierPointersEncoding BezierPointersEncoding
}

// BezierPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BezierPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// BezierDB describes a bezier in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bezierDB
type BezierDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bezierDB.Name
	Name_Data sql.NullString

	// Declation for basic field bezierDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field bezierDB.StartX
	StartX_Data sql.NullFloat64

	// Declation for basic field bezierDB.StartY
	StartY_Data sql.NullFloat64

	// Declation for basic field bezierDB.ControlPointStartX
	ControlPointStartX_Data sql.NullFloat64

	// Declation for basic field bezierDB.ControlPointStartY
	ControlPointStartY_Data sql.NullFloat64

	// Declation for basic field bezierDB.EndX
	EndX_Data sql.NullFloat64

	// Declation for basic field bezierDB.EndY
	EndY_Data sql.NullFloat64

	// Declation for basic field bezierDB.ControlPointEndX
	ControlPointEndX_Data sql.NullFloat64

	// Declation for basic field bezierDB.ControlPointEndY
	ControlPointEndY_Data sql.NullFloat64

	// Declation for basic field bezierDB.Color
	Color_Data sql.NullString

	// Declation for basic field bezierDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field bezierDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field bezierDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field bezierDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field bezierDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field bezierDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field bezierDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BezierPointersEncoding
}

// BezierDBs arrays bezierDBs
// swagger:response bezierDBsResponse
type BezierDBs []BezierDB

// BezierDBResponse provides response
// swagger:response bezierDBResponse
type BezierDBResponse struct {
	BezierDB
}

// BezierWOP is a Bezier without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BezierWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	StartX float64 `xlsx:"3"`

	StartY float64 `xlsx:"4"`

	ControlPointStartX float64 `xlsx:"5"`

	ControlPointStartY float64 `xlsx:"6"`

	EndX float64 `xlsx:"7"`

	EndY float64 `xlsx:"8"`

	ControlPointEndX float64 `xlsx:"9"`

	ControlPointEndY float64 `xlsx:"10"`

	Color string `xlsx:"11"`

	FillOpacity float64 `xlsx:"12"`

	Stroke string `xlsx:"13"`

	StrokeOpacity float64 `xlsx:"14"`

	StrokeWidth float64 `xlsx:"15"`

	StrokeDashArray string `xlsx:"16"`

	StrokeDashArrayWhenSelected string `xlsx:"17"`

	Transform string `xlsx:"18"`
	// insertion for WOP pointer fields
}

var Bezier_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"StartX",
	"StartY",
	"ControlPointStartX",
	"ControlPointStartY",
	"EndX",
	"EndY",
	"ControlPointEndX",
	"ControlPointEndY",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoBezierStruct struct {
	// stores BezierDB according to their gorm ID
	Map_BezierDBID_BezierDB map[uint]*BezierDB

	// stores BezierDB ID according to Bezier address
	Map_BezierPtr_BezierDBID map[*models.Bezier]uint

	// stores Bezier according to their gorm ID
	Map_BezierDBID_BezierPtr map[uint]*models.Bezier

	db db.DBInterface

	stage *models.Stage
}

func (backRepoBezier *BackRepoBezierStruct) GetStage() (stage *models.Stage) {
	stage = backRepoBezier.stage
	return
}

func (backRepoBezier *BackRepoBezierStruct) GetDB() db.DBInterface {
	return backRepoBezier.db
}

// GetBezierDBFromBezierPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBezier *BackRepoBezierStruct) GetBezierDBFromBezierPtr(bezier *models.Bezier) (bezierDB *BezierDB) {
	id := backRepoBezier.Map_BezierPtr_BezierDBID[bezier]
	bezierDB = backRepoBezier.Map_BezierDBID_BezierDB[id]
	return
}

// BackRepoBezier.CommitPhaseOne commits all staged instances of Bezier to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezier *BackRepoBezierStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var beziers []*models.Bezier
	for bezier := range stage.Beziers {
		beziers = append(beziers, bezier)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(beziers, func(i, j int) bool {
		return stage.BezierMap_Staged_Order[beziers[i]] < stage.BezierMap_Staged_Order[beziers[j]]
	})

	for _, bezier := range beziers {
		backRepoBezier.CommitPhaseOneInstance(bezier)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bezier := range backRepoBezier.Map_BezierDBID_BezierPtr {
		if _, ok := stage.Beziers[bezier]; !ok {
			backRepoBezier.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBezier.CommitDeleteInstance commits deletion of Bezier to the BackRepo
func (backRepoBezier *BackRepoBezierStruct) CommitDeleteInstance(id uint) (Error error) {

	bezier := backRepoBezier.Map_BezierDBID_BezierPtr[id]

	// bezier is not staged anymore, remove bezierDB
	bezierDB := backRepoBezier.Map_BezierDBID_BezierDB[id]
	db, _ := backRepoBezier.db.Unscoped()
	_, err := db.Delete(bezierDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoBezier.Map_BezierPtr_BezierDBID, bezier)
	delete(backRepoBezier.Map_BezierDBID_BezierPtr, id)
	delete(backRepoBezier.Map_BezierDBID_BezierDB, id)

	return
}

// BackRepoBezier.CommitPhaseOneInstance commits bezier staged instances of Bezier to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezier *BackRepoBezierStruct) CommitPhaseOneInstance(bezier *models.Bezier) (Error error) {

	// check if the bezier is not commited yet
	if _, ok := backRepoBezier.Map_BezierPtr_BezierDBID[bezier]; ok {
		return
	}

	// initiate bezier
	var bezierDB BezierDB
	bezierDB.CopyBasicFieldsFromBezier(bezier)

	_, err := backRepoBezier.db.Create(&bezierDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoBezier.Map_BezierPtr_BezierDBID[bezier] = bezierDB.ID
	backRepoBezier.Map_BezierDBID_BezierPtr[bezierDB.ID] = bezier
	backRepoBezier.Map_BezierDBID_BezierDB[bezierDB.ID] = &bezierDB

	return
}

// BackRepoBezier.CommitPhaseTwo commits all staged instances of Bezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezier *BackRepoBezierStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bezier := range backRepoBezier.Map_BezierDBID_BezierPtr {
		backRepoBezier.CommitPhaseTwoInstance(backRepo, idx, bezier)
	}

	return
}

// BackRepoBezier.CommitPhaseTwoInstance commits {{structname }} of models.Bezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezier *BackRepoBezierStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bezier *models.Bezier) (Error error) {

	// fetch matching bezierDB
	if bezierDB, ok := backRepoBezier.Map_BezierDBID_BezierDB[idx]; ok {

		bezierDB.CopyBasicFieldsFromBezier(bezier)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value bezier.ShapeCategory translates to updating the bezier.ShapeCategoryID
		bezierDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if bezier.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[bezier.ShapeCategory]; ok {
				bezierDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				bezierDB.ShapeCategoryID.Valid = true
			}
		} else {
			bezierDB.ShapeCategoryID.Int64 = 0
			bezierDB.ShapeCategoryID.Valid = true
		}

		_, err := backRepoBezier.db.Save(bezierDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bezier intance %s", bezier.Name))
		return err
	}

	return
}

// BackRepoBezier.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBezier *BackRepoBezierStruct) CheckoutPhaseOne() (Error error) {

	bezierDBArray := make([]BezierDB, 0)
	_, err := backRepoBezier.db.Find(&bezierDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bezierInstancesToBeRemovedFromTheStage := make(map[*models.Bezier]any)
	for key, value := range backRepoBezier.stage.Beziers {
		bezierInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bezierDB := range bezierDBArray {
		backRepoBezier.CheckoutPhaseOneInstance(&bezierDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bezier, ok := backRepoBezier.Map_BezierDBID_BezierPtr[bezierDB.ID]
		if ok {
			delete(bezierInstancesToBeRemovedFromTheStage, bezier)
		}
	}

	// remove from stage and back repo's 3 maps all beziers that are not in the checkout
	for bezier := range bezierInstancesToBeRemovedFromTheStage {
		bezier.Unstage(backRepoBezier.GetStage())

		// remove instance from the back repo 3 maps
		bezierID := backRepoBezier.Map_BezierPtr_BezierDBID[bezier]
		delete(backRepoBezier.Map_BezierPtr_BezierDBID, bezier)
		delete(backRepoBezier.Map_BezierDBID_BezierDB, bezierID)
		delete(backRepoBezier.Map_BezierDBID_BezierPtr, bezierID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bezierDB that has been found in the DB, updates the backRepo and stages the
// models version of the bezierDB
func (backRepoBezier *BackRepoBezierStruct) CheckoutPhaseOneInstance(bezierDB *BezierDB) (Error error) {

	bezier, ok := backRepoBezier.Map_BezierDBID_BezierPtr[bezierDB.ID]
	if !ok {
		bezier = new(models.Bezier)

		backRepoBezier.Map_BezierDBID_BezierPtr[bezierDB.ID] = bezier
		backRepoBezier.Map_BezierPtr_BezierDBID[bezier] = bezierDB.ID

		// append model store with the new element
		bezier.Name = bezierDB.Name_Data.String
		bezier.Stage(backRepoBezier.GetStage())
	}
	bezierDB.CopyBasicFieldsToBezier(bezier)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bezier.Stage(backRepoBezier.GetStage())

	// preserve pointer to bezierDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BezierDBID_BezierDB)[bezierDB hold variable pointers
	bezierDB_Data := *bezierDB
	preservedPtrToBezier := &bezierDB_Data
	backRepoBezier.Map_BezierDBID_BezierDB[bezierDB.ID] = preservedPtrToBezier

	return
}

// BackRepoBezier.CheckoutPhaseTwo Checkouts all staged instances of Bezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezier *BackRepoBezierStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bezierDB := range backRepoBezier.Map_BezierDBID_BezierDB {
		backRepoBezier.CheckoutPhaseTwoInstance(backRepo, bezierDB)
	}
	return
}

// BackRepoBezier.CheckoutPhaseTwoInstance Checkouts staged instances of Bezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezier *BackRepoBezierStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bezierDB *BezierDB) (Error error) {

	bezier := backRepoBezier.Map_BezierDBID_BezierPtr[bezierDB.ID]

	bezierDB.DecodePointers(backRepo, bezier)

	return
}

func (bezierDB *BezierDB) DecodePointers(backRepo *BackRepoStruct, bezier *models.Bezier) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := bezierDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: bezier.ShapeCategory, unknown pointer id", id)
				bezier.ShapeCategory = nil
			} else {
				// updates only if field has changed
				if bezier.ShapeCategory == nil || bezier.ShapeCategory != tmp {
					bezier.ShapeCategory = tmp
				}
			}
		} else {
			bezier.ShapeCategory = nil
		}
	}
	
	return
}

// CommitBezier allows commit of a single bezier (if already staged)
func (backRepo *BackRepoStruct) CommitBezier(bezier *models.Bezier) {
	backRepo.BackRepoBezier.CommitPhaseOneInstance(bezier)
	if id, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[bezier]; ok {
		backRepo.BackRepoBezier.CommitPhaseTwoInstance(backRepo, id, bezier)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBezier allows checkout of a single bezier (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBezier(bezier *models.Bezier) {
	// check if the bezier is staged
	if _, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[bezier]; ok {

		if id, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[bezier]; ok {
			var bezierDB BezierDB
			bezierDB.ID = id

			if _, err := backRepo.BackRepoBezier.db.First(&bezierDB, id); err != nil {
				log.Fatalln("CheckoutBezier : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBezier.CheckoutPhaseOneInstance(&bezierDB)
			backRepo.BackRepoBezier.CheckoutPhaseTwoInstance(backRepo, &bezierDB)
		}
	}
}

// CopyBasicFieldsFromBezier
func (bezierDB *BezierDB) CopyBasicFieldsFromBezier(bezier *models.Bezier) {
	// insertion point for fields commit

	bezierDB.Name_Data.String = bezier.Name
	bezierDB.Name_Data.Valid = true

	bezierDB.IsDisplayed_Data.Bool = bezier.IsDisplayed
	bezierDB.IsDisplayed_Data.Valid = true

	bezierDB.StartX_Data.Float64 = bezier.StartX
	bezierDB.StartX_Data.Valid = true

	bezierDB.StartY_Data.Float64 = bezier.StartY
	bezierDB.StartY_Data.Valid = true

	bezierDB.ControlPointStartX_Data.Float64 = bezier.ControlPointStartX
	bezierDB.ControlPointStartX_Data.Valid = true

	bezierDB.ControlPointStartY_Data.Float64 = bezier.ControlPointStartY
	bezierDB.ControlPointStartY_Data.Valid = true

	bezierDB.EndX_Data.Float64 = bezier.EndX
	bezierDB.EndX_Data.Valid = true

	bezierDB.EndY_Data.Float64 = bezier.EndY
	bezierDB.EndY_Data.Valid = true

	bezierDB.ControlPointEndX_Data.Float64 = bezier.ControlPointEndX
	bezierDB.ControlPointEndX_Data.Valid = true

	bezierDB.ControlPointEndY_Data.Float64 = bezier.ControlPointEndY
	bezierDB.ControlPointEndY_Data.Valid = true

	bezierDB.Color_Data.String = bezier.Color
	bezierDB.Color_Data.Valid = true

	bezierDB.FillOpacity_Data.Float64 = bezier.FillOpacity
	bezierDB.FillOpacity_Data.Valid = true

	bezierDB.Stroke_Data.String = bezier.Stroke
	bezierDB.Stroke_Data.Valid = true

	bezierDB.StrokeOpacity_Data.Float64 = bezier.StrokeOpacity
	bezierDB.StrokeOpacity_Data.Valid = true

	bezierDB.StrokeWidth_Data.Float64 = bezier.StrokeWidth
	bezierDB.StrokeWidth_Data.Valid = true

	bezierDB.StrokeDashArray_Data.String = bezier.StrokeDashArray
	bezierDB.StrokeDashArray_Data.Valid = true

	bezierDB.StrokeDashArrayWhenSelected_Data.String = bezier.StrokeDashArrayWhenSelected
	bezierDB.StrokeDashArrayWhenSelected_Data.Valid = true

	bezierDB.Transform_Data.String = bezier.Transform
	bezierDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromBezier_WOP
func (bezierDB *BezierDB) CopyBasicFieldsFromBezier_WOP(bezier *models.Bezier_WOP) {
	// insertion point for fields commit

	bezierDB.Name_Data.String = bezier.Name
	bezierDB.Name_Data.Valid = true

	bezierDB.IsDisplayed_Data.Bool = bezier.IsDisplayed
	bezierDB.IsDisplayed_Data.Valid = true

	bezierDB.StartX_Data.Float64 = bezier.StartX
	bezierDB.StartX_Data.Valid = true

	bezierDB.StartY_Data.Float64 = bezier.StartY
	bezierDB.StartY_Data.Valid = true

	bezierDB.ControlPointStartX_Data.Float64 = bezier.ControlPointStartX
	bezierDB.ControlPointStartX_Data.Valid = true

	bezierDB.ControlPointStartY_Data.Float64 = bezier.ControlPointStartY
	bezierDB.ControlPointStartY_Data.Valid = true

	bezierDB.EndX_Data.Float64 = bezier.EndX
	bezierDB.EndX_Data.Valid = true

	bezierDB.EndY_Data.Float64 = bezier.EndY
	bezierDB.EndY_Data.Valid = true

	bezierDB.ControlPointEndX_Data.Float64 = bezier.ControlPointEndX
	bezierDB.ControlPointEndX_Data.Valid = true

	bezierDB.ControlPointEndY_Data.Float64 = bezier.ControlPointEndY
	bezierDB.ControlPointEndY_Data.Valid = true

	bezierDB.Color_Data.String = bezier.Color
	bezierDB.Color_Data.Valid = true

	bezierDB.FillOpacity_Data.Float64 = bezier.FillOpacity
	bezierDB.FillOpacity_Data.Valid = true

	bezierDB.Stroke_Data.String = bezier.Stroke
	bezierDB.Stroke_Data.Valid = true

	bezierDB.StrokeOpacity_Data.Float64 = bezier.StrokeOpacity
	bezierDB.StrokeOpacity_Data.Valid = true

	bezierDB.StrokeWidth_Data.Float64 = bezier.StrokeWidth
	bezierDB.StrokeWidth_Data.Valid = true

	bezierDB.StrokeDashArray_Data.String = bezier.StrokeDashArray
	bezierDB.StrokeDashArray_Data.Valid = true

	bezierDB.StrokeDashArrayWhenSelected_Data.String = bezier.StrokeDashArrayWhenSelected
	bezierDB.StrokeDashArrayWhenSelected_Data.Valid = true

	bezierDB.Transform_Data.String = bezier.Transform
	bezierDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromBezierWOP
func (bezierDB *BezierDB) CopyBasicFieldsFromBezierWOP(bezier *BezierWOP) {
	// insertion point for fields commit

	bezierDB.Name_Data.String = bezier.Name
	bezierDB.Name_Data.Valid = true

	bezierDB.IsDisplayed_Data.Bool = bezier.IsDisplayed
	bezierDB.IsDisplayed_Data.Valid = true

	bezierDB.StartX_Data.Float64 = bezier.StartX
	bezierDB.StartX_Data.Valid = true

	bezierDB.StartY_Data.Float64 = bezier.StartY
	bezierDB.StartY_Data.Valid = true

	bezierDB.ControlPointStartX_Data.Float64 = bezier.ControlPointStartX
	bezierDB.ControlPointStartX_Data.Valid = true

	bezierDB.ControlPointStartY_Data.Float64 = bezier.ControlPointStartY
	bezierDB.ControlPointStartY_Data.Valid = true

	bezierDB.EndX_Data.Float64 = bezier.EndX
	bezierDB.EndX_Data.Valid = true

	bezierDB.EndY_Data.Float64 = bezier.EndY
	bezierDB.EndY_Data.Valid = true

	bezierDB.ControlPointEndX_Data.Float64 = bezier.ControlPointEndX
	bezierDB.ControlPointEndX_Data.Valid = true

	bezierDB.ControlPointEndY_Data.Float64 = bezier.ControlPointEndY
	bezierDB.ControlPointEndY_Data.Valid = true

	bezierDB.Color_Data.String = bezier.Color
	bezierDB.Color_Data.Valid = true

	bezierDB.FillOpacity_Data.Float64 = bezier.FillOpacity
	bezierDB.FillOpacity_Data.Valid = true

	bezierDB.Stroke_Data.String = bezier.Stroke
	bezierDB.Stroke_Data.Valid = true

	bezierDB.StrokeOpacity_Data.Float64 = bezier.StrokeOpacity
	bezierDB.StrokeOpacity_Data.Valid = true

	bezierDB.StrokeWidth_Data.Float64 = bezier.StrokeWidth
	bezierDB.StrokeWidth_Data.Valid = true

	bezierDB.StrokeDashArray_Data.String = bezier.StrokeDashArray
	bezierDB.StrokeDashArray_Data.Valid = true

	bezierDB.StrokeDashArrayWhenSelected_Data.String = bezier.StrokeDashArrayWhenSelected
	bezierDB.StrokeDashArrayWhenSelected_Data.Valid = true

	bezierDB.Transform_Data.String = bezier.Transform
	bezierDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToBezier
func (bezierDB *BezierDB) CopyBasicFieldsToBezier(bezier *models.Bezier) {
	// insertion point for checkout of basic fields (back repo to stage)
	bezier.Name = bezierDB.Name_Data.String
	bezier.IsDisplayed = bezierDB.IsDisplayed_Data.Bool
	bezier.StartX = bezierDB.StartX_Data.Float64
	bezier.StartY = bezierDB.StartY_Data.Float64
	bezier.ControlPointStartX = bezierDB.ControlPointStartX_Data.Float64
	bezier.ControlPointStartY = bezierDB.ControlPointStartY_Data.Float64
	bezier.EndX = bezierDB.EndX_Data.Float64
	bezier.EndY = bezierDB.EndY_Data.Float64
	bezier.ControlPointEndX = bezierDB.ControlPointEndX_Data.Float64
	bezier.ControlPointEndY = bezierDB.ControlPointEndY_Data.Float64
	bezier.Color = bezierDB.Color_Data.String
	bezier.FillOpacity = bezierDB.FillOpacity_Data.Float64
	bezier.Stroke = bezierDB.Stroke_Data.String
	bezier.StrokeOpacity = bezierDB.StrokeOpacity_Data.Float64
	bezier.StrokeWidth = bezierDB.StrokeWidth_Data.Float64
	bezier.StrokeDashArray = bezierDB.StrokeDashArray_Data.String
	bezier.StrokeDashArrayWhenSelected = bezierDB.StrokeDashArrayWhenSelected_Data.String
	bezier.Transform = bezierDB.Transform_Data.String
}

// CopyBasicFieldsToBezier_WOP
func (bezierDB *BezierDB) CopyBasicFieldsToBezier_WOP(bezier *models.Bezier_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bezier.Name = bezierDB.Name_Data.String
	bezier.IsDisplayed = bezierDB.IsDisplayed_Data.Bool
	bezier.StartX = bezierDB.StartX_Data.Float64
	bezier.StartY = bezierDB.StartY_Data.Float64
	bezier.ControlPointStartX = bezierDB.ControlPointStartX_Data.Float64
	bezier.ControlPointStartY = bezierDB.ControlPointStartY_Data.Float64
	bezier.EndX = bezierDB.EndX_Data.Float64
	bezier.EndY = bezierDB.EndY_Data.Float64
	bezier.ControlPointEndX = bezierDB.ControlPointEndX_Data.Float64
	bezier.ControlPointEndY = bezierDB.ControlPointEndY_Data.Float64
	bezier.Color = bezierDB.Color_Data.String
	bezier.FillOpacity = bezierDB.FillOpacity_Data.Float64
	bezier.Stroke = bezierDB.Stroke_Data.String
	bezier.StrokeOpacity = bezierDB.StrokeOpacity_Data.Float64
	bezier.StrokeWidth = bezierDB.StrokeWidth_Data.Float64
	bezier.StrokeDashArray = bezierDB.StrokeDashArray_Data.String
	bezier.StrokeDashArrayWhenSelected = bezierDB.StrokeDashArrayWhenSelected_Data.String
	bezier.Transform = bezierDB.Transform_Data.String
}

// CopyBasicFieldsToBezierWOP
func (bezierDB *BezierDB) CopyBasicFieldsToBezierWOP(bezier *BezierWOP) {
	bezier.ID = int(bezierDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bezier.Name = bezierDB.Name_Data.String
	bezier.IsDisplayed = bezierDB.IsDisplayed_Data.Bool
	bezier.StartX = bezierDB.StartX_Data.Float64
	bezier.StartY = bezierDB.StartY_Data.Float64
	bezier.ControlPointStartX = bezierDB.ControlPointStartX_Data.Float64
	bezier.ControlPointStartY = bezierDB.ControlPointStartY_Data.Float64
	bezier.EndX = bezierDB.EndX_Data.Float64
	bezier.EndY = bezierDB.EndY_Data.Float64
	bezier.ControlPointEndX = bezierDB.ControlPointEndX_Data.Float64
	bezier.ControlPointEndY = bezierDB.ControlPointEndY_Data.Float64
	bezier.Color = bezierDB.Color_Data.String
	bezier.FillOpacity = bezierDB.FillOpacity_Data.Float64
	bezier.Stroke = bezierDB.Stroke_Data.String
	bezier.StrokeOpacity = bezierDB.StrokeOpacity_Data.Float64
	bezier.StrokeWidth = bezierDB.StrokeWidth_Data.Float64
	bezier.StrokeDashArray = bezierDB.StrokeDashArray_Data.String
	bezier.StrokeDashArrayWhenSelected = bezierDB.StrokeDashArrayWhenSelected_Data.String
	bezier.Transform = bezierDB.Transform_Data.String
}

// Backup generates a json file from a slice of all BezierDB instances in the backrepo
func (backRepoBezier *BackRepoBezierStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BezierDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierDB, 0)
	for _, bezierDB := range backRepoBezier.Map_BezierDBID_BezierDB {
		forBackup = append(forBackup, bezierDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Bezier ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Bezier file", err.Error())
	}
}

// Backup generates a json file from a slice of all BezierDB instances in the backrepo
func (backRepoBezier *BackRepoBezierStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierDB, 0)
	for _, bezierDB := range backRepoBezier.Map_BezierDBID_BezierDB {
		forBackup = append(forBackup, bezierDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bezier")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bezier_Fields, -1)
	for _, bezierDB := range forBackup {

		var bezierWOP BezierWOP
		bezierDB.CopyBasicFieldsToBezierWOP(&bezierWOP)

		row := sh.AddRow()
		row.WriteStruct(&bezierWOP, -1)
	}
}

// RestoreXL from the "Bezier" sheet all BezierDB instances
func (backRepoBezier *BackRepoBezierStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBezierid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bezier"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBezier.rowVisitorBezier)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBezier *BackRepoBezierStruct) rowVisitorBezier(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bezierWOP BezierWOP
		row.ReadStruct(&bezierWOP)

		// add the unmarshalled struct to the stage
		bezierDB := new(BezierDB)
		bezierDB.CopyBasicFieldsFromBezierWOP(&bezierWOP)

		bezierDB_ID_atBackupTime := bezierDB.ID
		bezierDB.ID = 0
		_, err := backRepoBezier.db.Create(bezierDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezier.Map_BezierDBID_BezierDB[bezierDB.ID] = bezierDB
		BackRepoBezierid_atBckpTime_newID[bezierDB_ID_atBackupTime] = bezierDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BezierDB.json" in dirPath that stores an array
// of BezierDB and stores it in the database
// the map BackRepoBezierid_atBckpTime_newID is updated accordingly
func (backRepoBezier *BackRepoBezierStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBezierid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BezierDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Bezier file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BezierDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BezierDBID_BezierDB
	for _, bezierDB := range forRestore {

		bezierDB_ID_atBackupTime := bezierDB.ID
		bezierDB.ID = 0
		_, err := backRepoBezier.db.Create(bezierDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezier.Map_BezierDBID_BezierDB[bezierDB.ID] = bezierDB
		BackRepoBezierid_atBckpTime_newID[bezierDB_ID_atBackupTime] = bezierDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Bezier file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bezier>id_atBckpTime_newID
// to compute new index
func (backRepoBezier *BackRepoBezierStruct) RestorePhaseTwo() {

	for _, bezierDB := range backRepoBezier.Map_BezierDBID_BezierDB {

		// next line of code is to avert unused variable compilation error
		_ = bezierDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if bezierDB.ShapeCategoryID.Int64 != 0 {
			bezierDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(bezierDB.ShapeCategoryID.Int64)])
			bezierDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoBezier.db.Model(bezierDB)
		_, err := db.Updates(*bezierDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoBezier.ResetReversePointers commits all staged instances of Bezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezier *BackRepoBezierStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bezier := range backRepoBezier.Map_BezierDBID_BezierPtr {
		backRepoBezier.ResetReversePointersInstance(backRepo, idx, bezier)
	}

	return
}

func (backRepoBezier *BackRepoBezierStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bezier *models.Bezier) (Error error) {

	// fetch matching bezierDB
	if bezierDB, ok := backRepoBezier.Map_BezierDBID_BezierDB[idx]; ok {
		_ = bezierDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBezierid_atBckpTime_newID map[uint]uint
