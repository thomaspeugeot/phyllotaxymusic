// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MovingLine_sql sql.NullBool
var dummy_MovingLine_time time.Duration
var dummy_MovingLine_sort sort.Float64Slice

// MovingLineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model movinglineAPI
type MovingLineAPI struct {
	gorm.Model

	models.MovingLine_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MovingLinePointersEncoding MovingLinePointersEncoding
}

// MovingLinePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MovingLinePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// MovingLineDB describes a movingline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model movinglineDB
type MovingLineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field movinglineDB.Name
	Name_Data sql.NullString

	// Declation for basic field movinglineDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field movinglineDB.AngleDegree
	AngleDegree_Data sql.NullFloat64

	// Declation for basic field movinglineDB.Length
	Length_Data sql.NullFloat64

	// Declation for basic field movinglineDB.CenterX
	CenterX_Data sql.NullFloat64

	// Declation for basic field movinglineDB.CenterY
	CenterY_Data sql.NullFloat64

	// Declation for basic field movinglineDB.SpeedX
	SpeedX_Data sql.NullFloat64

	// Declation for basic field movinglineDB.Color
	Color_Data sql.NullString

	// Declation for basic field movinglineDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field movinglineDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field movinglineDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field movinglineDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field movinglineDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field movinglineDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field movinglineDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MovingLinePointersEncoding
}

// MovingLineDBs arrays movinglineDBs
// swagger:response movinglineDBsResponse
type MovingLineDBs []MovingLineDB

// MovingLineDBResponse provides response
// swagger:response movinglineDBResponse
type MovingLineDBResponse struct {
	MovingLineDB
}

// MovingLineWOP is a MovingLine without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MovingLineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	AngleDegree float64 `xlsx:"3"`

	Length float64 `xlsx:"4"`

	CenterX float64 `xlsx:"5"`

	CenterY float64 `xlsx:"6"`

	SpeedX float64 `xlsx:"7"`

	Color string `xlsx:"8"`

	FillOpacity float64 `xlsx:"9"`

	Stroke string `xlsx:"10"`

	StrokeOpacity float64 `xlsx:"11"`

	StrokeWidth float64 `xlsx:"12"`

	StrokeDashArray string `xlsx:"13"`

	StrokeDashArrayWhenSelected string `xlsx:"14"`

	Transform string `xlsx:"15"`
	// insertion for WOP pointer fields
}

var MovingLine_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"AngleDegree",
	"Length",
	"CenterX",
	"CenterY",
	"SpeedX",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoMovingLineStruct struct {
	// stores MovingLineDB according to their gorm ID
	Map_MovingLineDBID_MovingLineDB map[uint]*MovingLineDB

	// stores MovingLineDB ID according to MovingLine address
	Map_MovingLinePtr_MovingLineDBID map[*models.MovingLine]uint

	// stores MovingLine according to their gorm ID
	Map_MovingLineDBID_MovingLinePtr map[uint]*models.MovingLine

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoMovingLine *BackRepoMovingLineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMovingLine.stage
	return
}

func (backRepoMovingLine *BackRepoMovingLineStruct) GetDB() db.DBInterface {
	return backRepoMovingLine.db
}

// GetMovingLineDBFromMovingLinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMovingLine *BackRepoMovingLineStruct) GetMovingLineDBFromMovingLinePtr(movingline *models.MovingLine) (movinglineDB *MovingLineDB) {
	id := backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline]
	movinglineDB = backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[id]
	return
}

// BackRepoMovingLine.CommitPhaseOne commits all staged instances of MovingLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMovingLine *BackRepoMovingLineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for movingline := range stage.MovingLines {
		backRepoMovingLine.CommitPhaseOneInstance(movingline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, movingline := range backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr {
		if _, ok := stage.MovingLines[movingline]; !ok {
			backRepoMovingLine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMovingLine.CommitDeleteInstance commits deletion of MovingLine to the BackRepo
func (backRepoMovingLine *BackRepoMovingLineStruct) CommitDeleteInstance(id uint) (Error error) {

	movingline := backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr[id]

	// movingline is not staged anymore, remove movinglineDB
	movinglineDB := backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[id]
	db, _ := backRepoMovingLine.db.Unscoped()
	_, err := db.Delete(movinglineDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID, movingline)
	delete(backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr, id)
	delete(backRepoMovingLine.Map_MovingLineDBID_MovingLineDB, id)

	return
}

// BackRepoMovingLine.CommitPhaseOneInstance commits movingline staged instances of MovingLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMovingLine *BackRepoMovingLineStruct) CommitPhaseOneInstance(movingline *models.MovingLine) (Error error) {

	// check if the movingline is not commited yet
	if _, ok := backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline]; ok {
		return
	}

	// initiate movingline
	var movinglineDB MovingLineDB
	movinglineDB.CopyBasicFieldsFromMovingLine(movingline)

	_, err := backRepoMovingLine.db.Create(&movinglineDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline] = movinglineDB.ID
	backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr[movinglineDB.ID] = movingline
	backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[movinglineDB.ID] = &movinglineDB

	return
}

// BackRepoMovingLine.CommitPhaseTwo commits all staged instances of MovingLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMovingLine *BackRepoMovingLineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, movingline := range backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr {
		backRepoMovingLine.CommitPhaseTwoInstance(backRepo, idx, movingline)
	}

	return
}

// BackRepoMovingLine.CommitPhaseTwoInstance commits {{structname }} of models.MovingLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMovingLine *BackRepoMovingLineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, movingline *models.MovingLine) (Error error) {

	// fetch matching movinglineDB
	if movinglineDB, ok := backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[idx]; ok {

		movinglineDB.CopyBasicFieldsFromMovingLine(movingline)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value movingline.ShapeCategory translates to updating the movingline.ShapeCategoryID
		movinglineDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if movingline.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[movingline.ShapeCategory]; ok {
				movinglineDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				movinglineDB.ShapeCategoryID.Valid = true
			}
		} else {
			movinglineDB.ShapeCategoryID.Int64 = 0
			movinglineDB.ShapeCategoryID.Valid = true
		}

		_, err := backRepoMovingLine.db.Save(movinglineDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MovingLine intance %s", movingline.Name))
		return err
	}

	return
}

// BackRepoMovingLine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMovingLine *BackRepoMovingLineStruct) CheckoutPhaseOne() (Error error) {

	movinglineDBArray := make([]MovingLineDB, 0)
	_, err := backRepoMovingLine.db.Find(&movinglineDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	movinglineInstancesToBeRemovedFromTheStage := make(map[*models.MovingLine]any)
	for key, value := range backRepoMovingLine.stage.MovingLines {
		movinglineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, movinglineDB := range movinglineDBArray {
		backRepoMovingLine.CheckoutPhaseOneInstance(&movinglineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		movingline, ok := backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr[movinglineDB.ID]
		if ok {
			delete(movinglineInstancesToBeRemovedFromTheStage, movingline)
		}
	}

	// remove from stage and back repo's 3 maps all movinglines that are not in the checkout
	for movingline := range movinglineInstancesToBeRemovedFromTheStage {
		movingline.Unstage(backRepoMovingLine.GetStage())

		// remove instance from the back repo 3 maps
		movinglineID := backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline]
		delete(backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID, movingline)
		delete(backRepoMovingLine.Map_MovingLineDBID_MovingLineDB, movinglineID)
		delete(backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr, movinglineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a movinglineDB that has been found in the DB, updates the backRepo and stages the
// models version of the movinglineDB
func (backRepoMovingLine *BackRepoMovingLineStruct) CheckoutPhaseOneInstance(movinglineDB *MovingLineDB) (Error error) {

	movingline, ok := backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr[movinglineDB.ID]
	if !ok {
		movingline = new(models.MovingLine)

		backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr[movinglineDB.ID] = movingline
		backRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline] = movinglineDB.ID

		// append model store with the new element
		movingline.Name = movinglineDB.Name_Data.String
		movingline.Stage(backRepoMovingLine.GetStage())
	}
	movinglineDB.CopyBasicFieldsToMovingLine(movingline)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	movingline.Stage(backRepoMovingLine.GetStage())

	// preserve pointer to movinglineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MovingLineDBID_MovingLineDB)[movinglineDB hold variable pointers
	movinglineDB_Data := *movinglineDB
	preservedPtrToMovingLine := &movinglineDB_Data
	backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[movinglineDB.ID] = preservedPtrToMovingLine

	return
}

// BackRepoMovingLine.CheckoutPhaseTwo Checkouts all staged instances of MovingLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMovingLine *BackRepoMovingLineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, movinglineDB := range backRepoMovingLine.Map_MovingLineDBID_MovingLineDB {
		backRepoMovingLine.CheckoutPhaseTwoInstance(backRepo, movinglineDB)
	}
	return
}

// BackRepoMovingLine.CheckoutPhaseTwoInstance Checkouts staged instances of MovingLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMovingLine *BackRepoMovingLineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, movinglineDB *MovingLineDB) (Error error) {

	movingline := backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr[movinglineDB.ID]

	movinglineDB.DecodePointers(backRepo, movingline)

	return
}

func (movinglineDB *MovingLineDB) DecodePointers(backRepo *BackRepoStruct, movingline *models.MovingLine) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := movinglineDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: movingline.ShapeCategory, unknown pointer id", id)
			}

			// updates only if field has changed
			if movingline.ShapeCategory == nil || movingline.ShapeCategory != tmp {
				movingline.ShapeCategory = tmp
			}
		} else {
			movingline.ShapeCategory = nil
		}
	}
	
	return
}

// CommitMovingLine allows commit of a single movingline (if already staged)
func (backRepo *BackRepoStruct) CommitMovingLine(movingline *models.MovingLine) {
	backRepo.BackRepoMovingLine.CommitPhaseOneInstance(movingline)
	if id, ok := backRepo.BackRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline]; ok {
		backRepo.BackRepoMovingLine.CommitPhaseTwoInstance(backRepo, id, movingline)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMovingLine allows checkout of a single movingline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMovingLine(movingline *models.MovingLine) {
	// check if the movingline is staged
	if _, ok := backRepo.BackRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline]; ok {

		if id, ok := backRepo.BackRepoMovingLine.Map_MovingLinePtr_MovingLineDBID[movingline]; ok {
			var movinglineDB MovingLineDB
			movinglineDB.ID = id

			if _, err := backRepo.BackRepoMovingLine.db.First(&movinglineDB, id); err != nil {
				log.Fatalln("CheckoutMovingLine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMovingLine.CheckoutPhaseOneInstance(&movinglineDB)
			backRepo.BackRepoMovingLine.CheckoutPhaseTwoInstance(backRepo, &movinglineDB)
		}
	}
}

// CopyBasicFieldsFromMovingLine
func (movinglineDB *MovingLineDB) CopyBasicFieldsFromMovingLine(movingline *models.MovingLine) {
	// insertion point for fields commit

	movinglineDB.Name_Data.String = movingline.Name
	movinglineDB.Name_Data.Valid = true

	movinglineDB.IsDisplayed_Data.Bool = movingline.IsDisplayed
	movinglineDB.IsDisplayed_Data.Valid = true

	movinglineDB.AngleDegree_Data.Float64 = movingline.AngleDegree
	movinglineDB.AngleDegree_Data.Valid = true

	movinglineDB.Length_Data.Float64 = movingline.Length
	movinglineDB.Length_Data.Valid = true

	movinglineDB.CenterX_Data.Float64 = movingline.CenterX
	movinglineDB.CenterX_Data.Valid = true

	movinglineDB.CenterY_Data.Float64 = movingline.CenterY
	movinglineDB.CenterY_Data.Valid = true

	movinglineDB.SpeedX_Data.Float64 = movingline.SpeedX
	movinglineDB.SpeedX_Data.Valid = true

	movinglineDB.Color_Data.String = movingline.Color
	movinglineDB.Color_Data.Valid = true

	movinglineDB.FillOpacity_Data.Float64 = movingline.FillOpacity
	movinglineDB.FillOpacity_Data.Valid = true

	movinglineDB.Stroke_Data.String = movingline.Stroke
	movinglineDB.Stroke_Data.Valid = true

	movinglineDB.StrokeOpacity_Data.Float64 = movingline.StrokeOpacity
	movinglineDB.StrokeOpacity_Data.Valid = true

	movinglineDB.StrokeWidth_Data.Float64 = movingline.StrokeWidth
	movinglineDB.StrokeWidth_Data.Valid = true

	movinglineDB.StrokeDashArray_Data.String = movingline.StrokeDashArray
	movinglineDB.StrokeDashArray_Data.Valid = true

	movinglineDB.StrokeDashArrayWhenSelected_Data.String = movingline.StrokeDashArrayWhenSelected
	movinglineDB.StrokeDashArrayWhenSelected_Data.Valid = true

	movinglineDB.Transform_Data.String = movingline.Transform
	movinglineDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromMovingLine_WOP
func (movinglineDB *MovingLineDB) CopyBasicFieldsFromMovingLine_WOP(movingline *models.MovingLine_WOP) {
	// insertion point for fields commit

	movinglineDB.Name_Data.String = movingline.Name
	movinglineDB.Name_Data.Valid = true

	movinglineDB.IsDisplayed_Data.Bool = movingline.IsDisplayed
	movinglineDB.IsDisplayed_Data.Valid = true

	movinglineDB.AngleDegree_Data.Float64 = movingline.AngleDegree
	movinglineDB.AngleDegree_Data.Valid = true

	movinglineDB.Length_Data.Float64 = movingline.Length
	movinglineDB.Length_Data.Valid = true

	movinglineDB.CenterX_Data.Float64 = movingline.CenterX
	movinglineDB.CenterX_Data.Valid = true

	movinglineDB.CenterY_Data.Float64 = movingline.CenterY
	movinglineDB.CenterY_Data.Valid = true

	movinglineDB.SpeedX_Data.Float64 = movingline.SpeedX
	movinglineDB.SpeedX_Data.Valid = true

	movinglineDB.Color_Data.String = movingline.Color
	movinglineDB.Color_Data.Valid = true

	movinglineDB.FillOpacity_Data.Float64 = movingline.FillOpacity
	movinglineDB.FillOpacity_Data.Valid = true

	movinglineDB.Stroke_Data.String = movingline.Stroke
	movinglineDB.Stroke_Data.Valid = true

	movinglineDB.StrokeOpacity_Data.Float64 = movingline.StrokeOpacity
	movinglineDB.StrokeOpacity_Data.Valid = true

	movinglineDB.StrokeWidth_Data.Float64 = movingline.StrokeWidth
	movinglineDB.StrokeWidth_Data.Valid = true

	movinglineDB.StrokeDashArray_Data.String = movingline.StrokeDashArray
	movinglineDB.StrokeDashArray_Data.Valid = true

	movinglineDB.StrokeDashArrayWhenSelected_Data.String = movingline.StrokeDashArrayWhenSelected
	movinglineDB.StrokeDashArrayWhenSelected_Data.Valid = true

	movinglineDB.Transform_Data.String = movingline.Transform
	movinglineDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromMovingLineWOP
func (movinglineDB *MovingLineDB) CopyBasicFieldsFromMovingLineWOP(movingline *MovingLineWOP) {
	// insertion point for fields commit

	movinglineDB.Name_Data.String = movingline.Name
	movinglineDB.Name_Data.Valid = true

	movinglineDB.IsDisplayed_Data.Bool = movingline.IsDisplayed
	movinglineDB.IsDisplayed_Data.Valid = true

	movinglineDB.AngleDegree_Data.Float64 = movingline.AngleDegree
	movinglineDB.AngleDegree_Data.Valid = true

	movinglineDB.Length_Data.Float64 = movingline.Length
	movinglineDB.Length_Data.Valid = true

	movinglineDB.CenterX_Data.Float64 = movingline.CenterX
	movinglineDB.CenterX_Data.Valid = true

	movinglineDB.CenterY_Data.Float64 = movingline.CenterY
	movinglineDB.CenterY_Data.Valid = true

	movinglineDB.SpeedX_Data.Float64 = movingline.SpeedX
	movinglineDB.SpeedX_Data.Valid = true

	movinglineDB.Color_Data.String = movingline.Color
	movinglineDB.Color_Data.Valid = true

	movinglineDB.FillOpacity_Data.Float64 = movingline.FillOpacity
	movinglineDB.FillOpacity_Data.Valid = true

	movinglineDB.Stroke_Data.String = movingline.Stroke
	movinglineDB.Stroke_Data.Valid = true

	movinglineDB.StrokeOpacity_Data.Float64 = movingline.StrokeOpacity
	movinglineDB.StrokeOpacity_Data.Valid = true

	movinglineDB.StrokeWidth_Data.Float64 = movingline.StrokeWidth
	movinglineDB.StrokeWidth_Data.Valid = true

	movinglineDB.StrokeDashArray_Data.String = movingline.StrokeDashArray
	movinglineDB.StrokeDashArray_Data.Valid = true

	movinglineDB.StrokeDashArrayWhenSelected_Data.String = movingline.StrokeDashArrayWhenSelected
	movinglineDB.StrokeDashArrayWhenSelected_Data.Valid = true

	movinglineDB.Transform_Data.String = movingline.Transform
	movinglineDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToMovingLine
func (movinglineDB *MovingLineDB) CopyBasicFieldsToMovingLine(movingline *models.MovingLine) {
	// insertion point for checkout of basic fields (back repo to stage)
	movingline.Name = movinglineDB.Name_Data.String
	movingline.IsDisplayed = movinglineDB.IsDisplayed_Data.Bool
	movingline.AngleDegree = movinglineDB.AngleDegree_Data.Float64
	movingline.Length = movinglineDB.Length_Data.Float64
	movingline.CenterX = movinglineDB.CenterX_Data.Float64
	movingline.CenterY = movinglineDB.CenterY_Data.Float64
	movingline.SpeedX = movinglineDB.SpeedX_Data.Float64
	movingline.Color = movinglineDB.Color_Data.String
	movingline.FillOpacity = movinglineDB.FillOpacity_Data.Float64
	movingline.Stroke = movinglineDB.Stroke_Data.String
	movingline.StrokeOpacity = movinglineDB.StrokeOpacity_Data.Float64
	movingline.StrokeWidth = movinglineDB.StrokeWidth_Data.Float64
	movingline.StrokeDashArray = movinglineDB.StrokeDashArray_Data.String
	movingline.StrokeDashArrayWhenSelected = movinglineDB.StrokeDashArrayWhenSelected_Data.String
	movingline.Transform = movinglineDB.Transform_Data.String
}

// CopyBasicFieldsToMovingLine_WOP
func (movinglineDB *MovingLineDB) CopyBasicFieldsToMovingLine_WOP(movingline *models.MovingLine_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	movingline.Name = movinglineDB.Name_Data.String
	movingline.IsDisplayed = movinglineDB.IsDisplayed_Data.Bool
	movingline.AngleDegree = movinglineDB.AngleDegree_Data.Float64
	movingline.Length = movinglineDB.Length_Data.Float64
	movingline.CenterX = movinglineDB.CenterX_Data.Float64
	movingline.CenterY = movinglineDB.CenterY_Data.Float64
	movingline.SpeedX = movinglineDB.SpeedX_Data.Float64
	movingline.Color = movinglineDB.Color_Data.String
	movingline.FillOpacity = movinglineDB.FillOpacity_Data.Float64
	movingline.Stroke = movinglineDB.Stroke_Data.String
	movingline.StrokeOpacity = movinglineDB.StrokeOpacity_Data.Float64
	movingline.StrokeWidth = movinglineDB.StrokeWidth_Data.Float64
	movingline.StrokeDashArray = movinglineDB.StrokeDashArray_Data.String
	movingline.StrokeDashArrayWhenSelected = movinglineDB.StrokeDashArrayWhenSelected_Data.String
	movingline.Transform = movinglineDB.Transform_Data.String
}

// CopyBasicFieldsToMovingLineWOP
func (movinglineDB *MovingLineDB) CopyBasicFieldsToMovingLineWOP(movingline *MovingLineWOP) {
	movingline.ID = int(movinglineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	movingline.Name = movinglineDB.Name_Data.String
	movingline.IsDisplayed = movinglineDB.IsDisplayed_Data.Bool
	movingline.AngleDegree = movinglineDB.AngleDegree_Data.Float64
	movingline.Length = movinglineDB.Length_Data.Float64
	movingline.CenterX = movinglineDB.CenterX_Data.Float64
	movingline.CenterY = movinglineDB.CenterY_Data.Float64
	movingline.SpeedX = movinglineDB.SpeedX_Data.Float64
	movingline.Color = movinglineDB.Color_Data.String
	movingline.FillOpacity = movinglineDB.FillOpacity_Data.Float64
	movingline.Stroke = movinglineDB.Stroke_Data.String
	movingline.StrokeOpacity = movinglineDB.StrokeOpacity_Data.Float64
	movingline.StrokeWidth = movinglineDB.StrokeWidth_Data.Float64
	movingline.StrokeDashArray = movinglineDB.StrokeDashArray_Data.String
	movingline.StrokeDashArrayWhenSelected = movinglineDB.StrokeDashArrayWhenSelected_Data.String
	movingline.Transform = movinglineDB.Transform_Data.String
}

// Backup generates a json file from a slice of all MovingLineDB instances in the backrepo
func (backRepoMovingLine *BackRepoMovingLineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MovingLineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MovingLineDB, 0)
	for _, movinglineDB := range backRepoMovingLine.Map_MovingLineDBID_MovingLineDB {
		forBackup = append(forBackup, movinglineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MovingLine ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MovingLine file", err.Error())
	}
}

// Backup generates a json file from a slice of all MovingLineDB instances in the backrepo
func (backRepoMovingLine *BackRepoMovingLineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MovingLineDB, 0)
	for _, movinglineDB := range backRepoMovingLine.Map_MovingLineDBID_MovingLineDB {
		forBackup = append(forBackup, movinglineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MovingLine")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MovingLine_Fields, -1)
	for _, movinglineDB := range forBackup {

		var movinglineWOP MovingLineWOP
		movinglineDB.CopyBasicFieldsToMovingLineWOP(&movinglineWOP)

		row := sh.AddRow()
		row.WriteStruct(&movinglineWOP, -1)
	}
}

// RestoreXL from the "MovingLine" sheet all MovingLineDB instances
func (backRepoMovingLine *BackRepoMovingLineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMovingLineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MovingLine"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMovingLine.rowVisitorMovingLine)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMovingLine *BackRepoMovingLineStruct) rowVisitorMovingLine(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var movinglineWOP MovingLineWOP
		row.ReadStruct(&movinglineWOP)

		// add the unmarshalled struct to the stage
		movinglineDB := new(MovingLineDB)
		movinglineDB.CopyBasicFieldsFromMovingLineWOP(&movinglineWOP)

		movinglineDB_ID_atBackupTime := movinglineDB.ID
		movinglineDB.ID = 0
		_, err := backRepoMovingLine.db.Create(movinglineDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[movinglineDB.ID] = movinglineDB
		BackRepoMovingLineid_atBckpTime_newID[movinglineDB_ID_atBackupTime] = movinglineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MovingLineDB.json" in dirPath that stores an array
// of MovingLineDB and stores it in the database
// the map BackRepoMovingLineid_atBckpTime_newID is updated accordingly
func (backRepoMovingLine *BackRepoMovingLineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMovingLineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MovingLineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MovingLine file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MovingLineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MovingLineDBID_MovingLineDB
	for _, movinglineDB := range forRestore {

		movinglineDB_ID_atBackupTime := movinglineDB.ID
		movinglineDB.ID = 0
		_, err := backRepoMovingLine.db.Create(movinglineDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[movinglineDB.ID] = movinglineDB
		BackRepoMovingLineid_atBckpTime_newID[movinglineDB_ID_atBackupTime] = movinglineDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MovingLine file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MovingLine>id_atBckpTime_newID
// to compute new index
func (backRepoMovingLine *BackRepoMovingLineStruct) RestorePhaseTwo() {

	for _, movinglineDB := range backRepoMovingLine.Map_MovingLineDBID_MovingLineDB {

		// next line of code is to avert unused variable compilation error
		_ = movinglineDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if movinglineDB.ShapeCategoryID.Int64 != 0 {
			movinglineDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(movinglineDB.ShapeCategoryID.Int64)])
			movinglineDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoMovingLine.db.Model(movinglineDB)
		_, err := db.Updates(*movinglineDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoMovingLine.ResetReversePointers commits all staged instances of MovingLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMovingLine *BackRepoMovingLineStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, movingline := range backRepoMovingLine.Map_MovingLineDBID_MovingLinePtr {
		backRepoMovingLine.ResetReversePointersInstance(backRepo, idx, movingline)
	}

	return
}

func (backRepoMovingLine *BackRepoMovingLineStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, movingline *models.MovingLine) (Error error) {

	// fetch matching movinglineDB
	if movinglineDB, ok := backRepoMovingLine.Map_MovingLineDBID_MovingLineDB[idx]; ok {
		_ = movinglineDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMovingLineid_atBckpTime_newID map[uint]uint
