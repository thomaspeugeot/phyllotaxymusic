// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VerticalAxis_sql sql.NullBool
var dummy_VerticalAxis_time time.Duration
var dummy_VerticalAxis_sort sort.Float64Slice

// VerticalAxisAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model verticalaxisAPI
type VerticalAxisAPI struct {
	gorm.Model

	models.VerticalAxis_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	VerticalAxisPointersEncoding VerticalAxisPointersEncoding
}

// VerticalAxisPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VerticalAxisPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// VerticalAxisDB describes a verticalaxis in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model verticalaxisDB
type VerticalAxisDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field verticalaxisDB.Name
	Name_Data sql.NullString

	// Declation for basic field verticalaxisDB.IsAxisDisplayed
	// provide the sql storage for the boolan
	IsAxisDisplayed_Data sql.NullBool

	// Declation for basic field verticalaxisDB.AxisHandleBorderLength
	AxisHandleBorderLength_Data sql.NullFloat64

	// Declation for basic field verticalaxisDB.OriginX
	OriginX_Data sql.NullFloat64

	// Declation for basic field verticalaxisDB.OriginY
	OriginY_Data sql.NullFloat64

	// Declation for basic field verticalaxisDB.Axis_Length
	Axis_Length_Data sql.NullFloat64

	// Declation for basic field verticalaxisDB.Axis_StrokeWidth
	Axis_StrokeWidth_Data sql.NullFloat64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	VerticalAxisPointersEncoding
}

// VerticalAxisDBs arrays verticalaxisDBs
// swagger:response verticalaxisDBsResponse
type VerticalAxisDBs []VerticalAxisDB

// VerticalAxisDBResponse provides response
// swagger:response verticalaxisDBResponse
type VerticalAxisDBResponse struct {
	VerticalAxisDB
}

// VerticalAxisWOP is a VerticalAxis without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VerticalAxisWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsAxisDisplayed bool `xlsx:"2"`

	AxisHandleBorderLength float64 `xlsx:"3"`

	OriginX float64 `xlsx:"4"`

	OriginY float64 `xlsx:"5"`

	Axis_Length float64 `xlsx:"6"`

	Axis_StrokeWidth float64 `xlsx:"7"`
	// insertion for WOP pointer fields
}

var VerticalAxis_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsAxisDisplayed",
	"AxisHandleBorderLength",
	"OriginX",
	"OriginY",
	"Axis_Length",
	"Axis_StrokeWidth",
}

type BackRepoVerticalAxisStruct struct {
	// stores VerticalAxisDB according to their gorm ID
	Map_VerticalAxisDBID_VerticalAxisDB map[uint]*VerticalAxisDB

	// stores VerticalAxisDB ID according to VerticalAxis address
	Map_VerticalAxisPtr_VerticalAxisDBID map[*models.VerticalAxis]uint

	// stores VerticalAxis according to their gorm ID
	Map_VerticalAxisDBID_VerticalAxisPtr map[uint]*models.VerticalAxis

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoVerticalAxis.stage
	return
}

func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) GetDB() *gorm.DB {
	return backRepoVerticalAxis.db
}

// GetVerticalAxisDBFromVerticalAxisPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) GetVerticalAxisDBFromVerticalAxisPtr(verticalaxis *models.VerticalAxis) (verticalaxisDB *VerticalAxisDB) {
	id := backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis]
	verticalaxisDB = backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[id]
	return
}

// BackRepoVerticalAxis.CommitPhaseOne commits all staged instances of VerticalAxis to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for verticalaxis := range stage.VerticalAxiss {
		backRepoVerticalAxis.CommitPhaseOneInstance(verticalaxis)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, verticalaxis := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr {
		if _, ok := stage.VerticalAxiss[verticalaxis]; !ok {
			backRepoVerticalAxis.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVerticalAxis.CommitDeleteInstance commits deletion of VerticalAxis to the BackRepo
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CommitDeleteInstance(id uint) (Error error) {

	verticalaxis := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[id]

	// verticalaxis is not staged anymore, remove verticalaxisDB
	verticalaxisDB := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[id]
	query := backRepoVerticalAxis.db.Unscoped().Delete(&verticalaxisDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID, verticalaxis)
	delete(backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr, id)
	delete(backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB, id)

	return
}

// BackRepoVerticalAxis.CommitPhaseOneInstance commits verticalaxis staged instances of VerticalAxis to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CommitPhaseOneInstance(verticalaxis *models.VerticalAxis) (Error error) {

	// check if the verticalaxis is not commited yet
	if _, ok := backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis]; ok {
		return
	}

	// initiate verticalaxis
	var verticalaxisDB VerticalAxisDB
	verticalaxisDB.CopyBasicFieldsFromVerticalAxis(verticalaxis)

	query := backRepoVerticalAxis.db.Create(&verticalaxisDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis] = verticalaxisDB.ID
	backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[verticalaxisDB.ID] = verticalaxis
	backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[verticalaxisDB.ID] = &verticalaxisDB

	return
}

// BackRepoVerticalAxis.CommitPhaseTwo commits all staged instances of VerticalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, verticalaxis := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr {
		backRepoVerticalAxis.CommitPhaseTwoInstance(backRepo, idx, verticalaxis)
	}

	return
}

// BackRepoVerticalAxis.CommitPhaseTwoInstance commits {{structname }} of models.VerticalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, verticalaxis *models.VerticalAxis) (Error error) {

	// fetch matching verticalaxisDB
	if verticalaxisDB, ok := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[idx]; ok {

		verticalaxisDB.CopyBasicFieldsFromVerticalAxis(verticalaxis)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoVerticalAxis.db.Save(&verticalaxisDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VerticalAxis intance %s", verticalaxis.Name))
		return err
	}

	return
}

// BackRepoVerticalAxis.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CheckoutPhaseOne() (Error error) {

	verticalaxisDBArray := make([]VerticalAxisDB, 0)
	query := backRepoVerticalAxis.db.Find(&verticalaxisDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	verticalaxisInstancesToBeRemovedFromTheStage := make(map[*models.VerticalAxis]any)
	for key, value := range backRepoVerticalAxis.stage.VerticalAxiss {
		verticalaxisInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, verticalaxisDB := range verticalaxisDBArray {
		backRepoVerticalAxis.CheckoutPhaseOneInstance(&verticalaxisDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		verticalaxis, ok := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[verticalaxisDB.ID]
		if ok {
			delete(verticalaxisInstancesToBeRemovedFromTheStage, verticalaxis)
		}
	}

	// remove from stage and back repo's 3 maps all verticalaxiss that are not in the checkout
	for verticalaxis := range verticalaxisInstancesToBeRemovedFromTheStage {
		verticalaxis.Unstage(backRepoVerticalAxis.GetStage())

		// remove instance from the back repo 3 maps
		verticalaxisID := backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis]
		delete(backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID, verticalaxis)
		delete(backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB, verticalaxisID)
		delete(backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr, verticalaxisID)
	}

	return
}

// CheckoutPhaseOneInstance takes a verticalaxisDB that has been found in the DB, updates the backRepo and stages the
// models version of the verticalaxisDB
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CheckoutPhaseOneInstance(verticalaxisDB *VerticalAxisDB) (Error error) {

	verticalaxis, ok := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[verticalaxisDB.ID]
	if !ok {
		verticalaxis = new(models.VerticalAxis)

		backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[verticalaxisDB.ID] = verticalaxis
		backRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis] = verticalaxisDB.ID

		// append model store with the new element
		verticalaxis.Name = verticalaxisDB.Name_Data.String
		verticalaxis.Stage(backRepoVerticalAxis.GetStage())
	}
	verticalaxisDB.CopyBasicFieldsToVerticalAxis(verticalaxis)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	verticalaxis.Stage(backRepoVerticalAxis.GetStage())

	// preserve pointer to verticalaxisDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VerticalAxisDBID_VerticalAxisDB)[verticalaxisDB hold variable pointers
	verticalaxisDB_Data := *verticalaxisDB
	preservedPtrToVerticalAxis := &verticalaxisDB_Data
	backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[verticalaxisDB.ID] = preservedPtrToVerticalAxis

	return
}

// BackRepoVerticalAxis.CheckoutPhaseTwo Checkouts all staged instances of VerticalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, verticalaxisDB := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB {
		backRepoVerticalAxis.CheckoutPhaseTwoInstance(backRepo, verticalaxisDB)
	}
	return
}

// BackRepoVerticalAxis.CheckoutPhaseTwoInstance Checkouts staged instances of VerticalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, verticalaxisDB *VerticalAxisDB) (Error error) {

	verticalaxis := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[verticalaxisDB.ID]

	verticalaxisDB.DecodePointers(backRepo, verticalaxis)

	return
}

func (verticalaxisDB *VerticalAxisDB) DecodePointers(backRepo *BackRepoStruct, verticalaxis *models.VerticalAxis) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitVerticalAxis allows commit of a single verticalaxis (if already staged)
func (backRepo *BackRepoStruct) CommitVerticalAxis(verticalaxis *models.VerticalAxis) {
	backRepo.BackRepoVerticalAxis.CommitPhaseOneInstance(verticalaxis)
	if id, ok := backRepo.BackRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis]; ok {
		backRepo.BackRepoVerticalAxis.CommitPhaseTwoInstance(backRepo, id, verticalaxis)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitVerticalAxis allows checkout of a single verticalaxis (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVerticalAxis(verticalaxis *models.VerticalAxis) {
	// check if the verticalaxis is staged
	if _, ok := backRepo.BackRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis]; ok {

		if id, ok := backRepo.BackRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[verticalaxis]; ok {
			var verticalaxisDB VerticalAxisDB
			verticalaxisDB.ID = id

			if err := backRepo.BackRepoVerticalAxis.db.First(&verticalaxisDB, id).Error; err != nil {
				log.Fatalln("CheckoutVerticalAxis : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVerticalAxis.CheckoutPhaseOneInstance(&verticalaxisDB)
			backRepo.BackRepoVerticalAxis.CheckoutPhaseTwoInstance(backRepo, &verticalaxisDB)
		}
	}
}

// CopyBasicFieldsFromVerticalAxis
func (verticalaxisDB *VerticalAxisDB) CopyBasicFieldsFromVerticalAxis(verticalaxis *models.VerticalAxis) {
	// insertion point for fields commit

	verticalaxisDB.Name_Data.String = verticalaxis.Name
	verticalaxisDB.Name_Data.Valid = true

	verticalaxisDB.IsAxisDisplayed_Data.Bool = verticalaxis.IsAxisDisplayed
	verticalaxisDB.IsAxisDisplayed_Data.Valid = true

	verticalaxisDB.AxisHandleBorderLength_Data.Float64 = verticalaxis.AxisHandleBorderLength
	verticalaxisDB.AxisHandleBorderLength_Data.Valid = true

	verticalaxisDB.OriginX_Data.Float64 = verticalaxis.OriginX
	verticalaxisDB.OriginX_Data.Valid = true

	verticalaxisDB.OriginY_Data.Float64 = verticalaxis.OriginY
	verticalaxisDB.OriginY_Data.Valid = true

	verticalaxisDB.Axis_Length_Data.Float64 = verticalaxis.Axis_Length
	verticalaxisDB.Axis_Length_Data.Valid = true

	verticalaxisDB.Axis_StrokeWidth_Data.Float64 = verticalaxis.Axis_StrokeWidth
	verticalaxisDB.Axis_StrokeWidth_Data.Valid = true
}

// CopyBasicFieldsFromVerticalAxis_WOP
func (verticalaxisDB *VerticalAxisDB) CopyBasicFieldsFromVerticalAxis_WOP(verticalaxis *models.VerticalAxis_WOP) {
	// insertion point for fields commit

	verticalaxisDB.Name_Data.String = verticalaxis.Name
	verticalaxisDB.Name_Data.Valid = true

	verticalaxisDB.IsAxisDisplayed_Data.Bool = verticalaxis.IsAxisDisplayed
	verticalaxisDB.IsAxisDisplayed_Data.Valid = true

	verticalaxisDB.AxisHandleBorderLength_Data.Float64 = verticalaxis.AxisHandleBorderLength
	verticalaxisDB.AxisHandleBorderLength_Data.Valid = true

	verticalaxisDB.OriginX_Data.Float64 = verticalaxis.OriginX
	verticalaxisDB.OriginX_Data.Valid = true

	verticalaxisDB.OriginY_Data.Float64 = verticalaxis.OriginY
	verticalaxisDB.OriginY_Data.Valid = true

	verticalaxisDB.Axis_Length_Data.Float64 = verticalaxis.Axis_Length
	verticalaxisDB.Axis_Length_Data.Valid = true

	verticalaxisDB.Axis_StrokeWidth_Data.Float64 = verticalaxis.Axis_StrokeWidth
	verticalaxisDB.Axis_StrokeWidth_Data.Valid = true
}

// CopyBasicFieldsFromVerticalAxisWOP
func (verticalaxisDB *VerticalAxisDB) CopyBasicFieldsFromVerticalAxisWOP(verticalaxis *VerticalAxisWOP) {
	// insertion point for fields commit

	verticalaxisDB.Name_Data.String = verticalaxis.Name
	verticalaxisDB.Name_Data.Valid = true

	verticalaxisDB.IsAxisDisplayed_Data.Bool = verticalaxis.IsAxisDisplayed
	verticalaxisDB.IsAxisDisplayed_Data.Valid = true

	verticalaxisDB.AxisHandleBorderLength_Data.Float64 = verticalaxis.AxisHandleBorderLength
	verticalaxisDB.AxisHandleBorderLength_Data.Valid = true

	verticalaxisDB.OriginX_Data.Float64 = verticalaxis.OriginX
	verticalaxisDB.OriginX_Data.Valid = true

	verticalaxisDB.OriginY_Data.Float64 = verticalaxis.OriginY
	verticalaxisDB.OriginY_Data.Valid = true

	verticalaxisDB.Axis_Length_Data.Float64 = verticalaxis.Axis_Length
	verticalaxisDB.Axis_Length_Data.Valid = true

	verticalaxisDB.Axis_StrokeWidth_Data.Float64 = verticalaxis.Axis_StrokeWidth
	verticalaxisDB.Axis_StrokeWidth_Data.Valid = true
}

// CopyBasicFieldsToVerticalAxis
func (verticalaxisDB *VerticalAxisDB) CopyBasicFieldsToVerticalAxis(verticalaxis *models.VerticalAxis) {
	// insertion point for checkout of basic fields (back repo to stage)
	verticalaxis.Name = verticalaxisDB.Name_Data.String
	verticalaxis.IsAxisDisplayed = verticalaxisDB.IsAxisDisplayed_Data.Bool
	verticalaxis.AxisHandleBorderLength = verticalaxisDB.AxisHandleBorderLength_Data.Float64
	verticalaxis.OriginX = verticalaxisDB.OriginX_Data.Float64
	verticalaxis.OriginY = verticalaxisDB.OriginY_Data.Float64
	verticalaxis.Axis_Length = verticalaxisDB.Axis_Length_Data.Float64
	verticalaxis.Axis_StrokeWidth = verticalaxisDB.Axis_StrokeWidth_Data.Float64
}

// CopyBasicFieldsToVerticalAxis_WOP
func (verticalaxisDB *VerticalAxisDB) CopyBasicFieldsToVerticalAxis_WOP(verticalaxis *models.VerticalAxis_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	verticalaxis.Name = verticalaxisDB.Name_Data.String
	verticalaxis.IsAxisDisplayed = verticalaxisDB.IsAxisDisplayed_Data.Bool
	verticalaxis.AxisHandleBorderLength = verticalaxisDB.AxisHandleBorderLength_Data.Float64
	verticalaxis.OriginX = verticalaxisDB.OriginX_Data.Float64
	verticalaxis.OriginY = verticalaxisDB.OriginY_Data.Float64
	verticalaxis.Axis_Length = verticalaxisDB.Axis_Length_Data.Float64
	verticalaxis.Axis_StrokeWidth = verticalaxisDB.Axis_StrokeWidth_Data.Float64
}

// CopyBasicFieldsToVerticalAxisWOP
func (verticalaxisDB *VerticalAxisDB) CopyBasicFieldsToVerticalAxisWOP(verticalaxis *VerticalAxisWOP) {
	verticalaxis.ID = int(verticalaxisDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	verticalaxis.Name = verticalaxisDB.Name_Data.String
	verticalaxis.IsAxisDisplayed = verticalaxisDB.IsAxisDisplayed_Data.Bool
	verticalaxis.AxisHandleBorderLength = verticalaxisDB.AxisHandleBorderLength_Data.Float64
	verticalaxis.OriginX = verticalaxisDB.OriginX_Data.Float64
	verticalaxis.OriginY = verticalaxisDB.OriginY_Data.Float64
	verticalaxis.Axis_Length = verticalaxisDB.Axis_Length_Data.Float64
	verticalaxis.Axis_StrokeWidth = verticalaxisDB.Axis_StrokeWidth_Data.Float64
}

// Backup generates a json file from a slice of all VerticalAxisDB instances in the backrepo
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VerticalAxisDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VerticalAxisDB, 0)
	for _, verticalaxisDB := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB {
		forBackup = append(forBackup, verticalaxisDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json VerticalAxis ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json VerticalAxis file", err.Error())
	}
}

// Backup generates a json file from a slice of all VerticalAxisDB instances in the backrepo
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VerticalAxisDB, 0)
	for _, verticalaxisDB := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB {
		forBackup = append(forBackup, verticalaxisDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VerticalAxis")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VerticalAxis_Fields, -1)
	for _, verticalaxisDB := range forBackup {

		var verticalaxisWOP VerticalAxisWOP
		verticalaxisDB.CopyBasicFieldsToVerticalAxisWOP(&verticalaxisWOP)

		row := sh.AddRow()
		row.WriteStruct(&verticalaxisWOP, -1)
	}
}

// RestoreXL from the "VerticalAxis" sheet all VerticalAxisDB instances
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVerticalAxisid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["VerticalAxis"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVerticalAxis.rowVisitorVerticalAxis)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) rowVisitorVerticalAxis(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var verticalaxisWOP VerticalAxisWOP
		row.ReadStruct(&verticalaxisWOP)

		// add the unmarshalled struct to the stage
		verticalaxisDB := new(VerticalAxisDB)
		verticalaxisDB.CopyBasicFieldsFromVerticalAxisWOP(&verticalaxisWOP)

		verticalaxisDB_ID_atBackupTime := verticalaxisDB.ID
		verticalaxisDB.ID = 0
		query := backRepoVerticalAxis.db.Create(verticalaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[verticalaxisDB.ID] = verticalaxisDB
		BackRepoVerticalAxisid_atBckpTime_newID[verticalaxisDB_ID_atBackupTime] = verticalaxisDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "VerticalAxisDB.json" in dirPath that stores an array
// of VerticalAxisDB and stores it in the database
// the map BackRepoVerticalAxisid_atBckpTime_newID is updated accordingly
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVerticalAxisid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VerticalAxisDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json VerticalAxis file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VerticalAxisDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VerticalAxisDBID_VerticalAxisDB
	for _, verticalaxisDB := range forRestore {

		verticalaxisDB_ID_atBackupTime := verticalaxisDB.ID
		verticalaxisDB.ID = 0
		query := backRepoVerticalAxis.db.Create(verticalaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[verticalaxisDB.ID] = verticalaxisDB
		BackRepoVerticalAxisid_atBckpTime_newID[verticalaxisDB_ID_atBackupTime] = verticalaxisDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json VerticalAxis file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VerticalAxis>id_atBckpTime_newID
// to compute new index
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) RestorePhaseTwo() {

	for _, verticalaxisDB := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB {

		// next line of code is to avert unused variable compilation error
		_ = verticalaxisDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoVerticalAxis.db.Model(verticalaxisDB).Updates(*verticalaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoVerticalAxis.ResetReversePointers commits all staged instances of VerticalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, verticalaxis := range backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr {
		backRepoVerticalAxis.ResetReversePointersInstance(backRepo, idx, verticalaxis)
	}

	return
}

func (backRepoVerticalAxis *BackRepoVerticalAxisStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, verticalaxis *models.VerticalAxis) (Error error) {

	// fetch matching verticalaxisDB
	if verticalaxisDB, ok := backRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisDB[idx]; ok {
		_ = verticalaxisDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVerticalAxisid_atBckpTime_newID map[uint]uint
