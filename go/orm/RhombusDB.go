// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Rhombus_sql sql.NullBool
var dummy_Rhombus_time time.Duration
var dummy_Rhombus_sort sort.Float64Slice

// RhombusAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rhombusAPI
type RhombusAPI struct {
	gorm.Model

	models.Rhombus_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RhombusPointersEncoding RhombusPointersEncoding
}

// RhombusPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RhombusPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// RhombusDB describes a rhombus in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rhombusDB
type RhombusDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field rhombusDB.Name
	Name_Data sql.NullString

	// Declation for basic field rhombusDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field rhombusDB.CenterX
	CenterX_Data sql.NullFloat64

	// Declation for basic field rhombusDB.CenterY
	CenterY_Data sql.NullFloat64

	// Declation for basic field rhombusDB.SideLength
	SideLength_Data sql.NullFloat64

	// Declation for basic field rhombusDB.AngleDegree
	AngleDegree_Data sql.NullFloat64

	// Declation for basic field rhombusDB.InsideAngle
	InsideAngle_Data sql.NullFloat64

	// Declation for basic field rhombusDB.Color
	Color_Data sql.NullString

	// Declation for basic field rhombusDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field rhombusDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field rhombusDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field rhombusDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field rhombusDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field rhombusDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field rhombusDB.Transform
	Transform_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RhombusPointersEncoding
}

// RhombusDBs arrays rhombusDBs
// swagger:response rhombusDBsResponse
type RhombusDBs []RhombusDB

// RhombusDBResponse provides response
// swagger:response rhombusDBResponse
type RhombusDBResponse struct {
	RhombusDB
}

// RhombusWOP is a Rhombus without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RhombusWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	CenterX float64 `xlsx:"3"`

	CenterY float64 `xlsx:"4"`

	SideLength float64 `xlsx:"5"`

	AngleDegree float64 `xlsx:"6"`

	InsideAngle float64 `xlsx:"7"`

	Color string `xlsx:"8"`

	FillOpacity float64 `xlsx:"9"`

	Stroke string `xlsx:"10"`

	StrokeOpacity float64 `xlsx:"11"`

	StrokeWidth float64 `xlsx:"12"`

	StrokeDashArray string `xlsx:"13"`

	StrokeDashArrayWhenSelected string `xlsx:"14"`

	Transform string `xlsx:"15"`
	// insertion for WOP pointer fields
}

var Rhombus_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"CenterX",
	"CenterY",
	"SideLength",
	"AngleDegree",
	"InsideAngle",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoRhombusStruct struct {
	// stores RhombusDB according to their gorm ID
	Map_RhombusDBID_RhombusDB map[uint]*RhombusDB

	// stores RhombusDB ID according to Rhombus address
	Map_RhombusPtr_RhombusDBID map[*models.Rhombus]uint

	// stores Rhombus according to their gorm ID
	Map_RhombusDBID_RhombusPtr map[uint]*models.Rhombus

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRhombus *BackRepoRhombusStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRhombus.stage
	return
}

func (backRepoRhombus *BackRepoRhombusStruct) GetDB() *gorm.DB {
	return backRepoRhombus.db
}

// GetRhombusDBFromRhombusPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRhombus *BackRepoRhombusStruct) GetRhombusDBFromRhombusPtr(rhombus *models.Rhombus) (rhombusDB *RhombusDB) {
	id := backRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus]
	rhombusDB = backRepoRhombus.Map_RhombusDBID_RhombusDB[id]
	return
}

// BackRepoRhombus.CommitPhaseOne commits all staged instances of Rhombus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRhombus *BackRepoRhombusStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rhombus := range stage.Rhombuss {
		backRepoRhombus.CommitPhaseOneInstance(rhombus)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rhombus := range backRepoRhombus.Map_RhombusDBID_RhombusPtr {
		if _, ok := stage.Rhombuss[rhombus]; !ok {
			backRepoRhombus.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRhombus.CommitDeleteInstance commits deletion of Rhombus to the BackRepo
func (backRepoRhombus *BackRepoRhombusStruct) CommitDeleteInstance(id uint) (Error error) {

	rhombus := backRepoRhombus.Map_RhombusDBID_RhombusPtr[id]

	// rhombus is not staged anymore, remove rhombusDB
	rhombusDB := backRepoRhombus.Map_RhombusDBID_RhombusDB[id]
	query := backRepoRhombus.db.Unscoped().Delete(&rhombusDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRhombus.Map_RhombusPtr_RhombusDBID, rhombus)
	delete(backRepoRhombus.Map_RhombusDBID_RhombusPtr, id)
	delete(backRepoRhombus.Map_RhombusDBID_RhombusDB, id)

	return
}

// BackRepoRhombus.CommitPhaseOneInstance commits rhombus staged instances of Rhombus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRhombus *BackRepoRhombusStruct) CommitPhaseOneInstance(rhombus *models.Rhombus) (Error error) {

	// check if the rhombus is not commited yet
	if _, ok := backRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus]; ok {
		return
	}

	// initiate rhombus
	var rhombusDB RhombusDB
	rhombusDB.CopyBasicFieldsFromRhombus(rhombus)

	query := backRepoRhombus.db.Create(&rhombusDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus] = rhombusDB.ID
	backRepoRhombus.Map_RhombusDBID_RhombusPtr[rhombusDB.ID] = rhombus
	backRepoRhombus.Map_RhombusDBID_RhombusDB[rhombusDB.ID] = &rhombusDB

	return
}

// BackRepoRhombus.CommitPhaseTwo commits all staged instances of Rhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRhombus *BackRepoRhombusStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rhombus := range backRepoRhombus.Map_RhombusDBID_RhombusPtr {
		backRepoRhombus.CommitPhaseTwoInstance(backRepo, idx, rhombus)
	}

	return
}

// BackRepoRhombus.CommitPhaseTwoInstance commits {{structname }} of models.Rhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRhombus *BackRepoRhombusStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rhombus *models.Rhombus) (Error error) {

	// fetch matching rhombusDB
	if rhombusDB, ok := backRepoRhombus.Map_RhombusDBID_RhombusDB[idx]; ok {

		rhombusDB.CopyBasicFieldsFromRhombus(rhombus)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value rhombus.ShapeCategory translates to updating the rhombus.ShapeCategoryID
		rhombusDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if rhombus.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[rhombus.ShapeCategory]; ok {
				rhombusDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				rhombusDB.ShapeCategoryID.Valid = true
			}
		} else {
			rhombusDB.ShapeCategoryID.Int64 = 0
			rhombusDB.ShapeCategoryID.Valid = true
		}

		query := backRepoRhombus.db.Save(&rhombusDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Rhombus intance %s", rhombus.Name))
		return err
	}

	return
}

// BackRepoRhombus.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRhombus *BackRepoRhombusStruct) CheckoutPhaseOne() (Error error) {

	rhombusDBArray := make([]RhombusDB, 0)
	query := backRepoRhombus.db.Find(&rhombusDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	rhombusInstancesToBeRemovedFromTheStage := make(map[*models.Rhombus]any)
	for key, value := range backRepoRhombus.stage.Rhombuss {
		rhombusInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, rhombusDB := range rhombusDBArray {
		backRepoRhombus.CheckoutPhaseOneInstance(&rhombusDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		rhombus, ok := backRepoRhombus.Map_RhombusDBID_RhombusPtr[rhombusDB.ID]
		if ok {
			delete(rhombusInstancesToBeRemovedFromTheStage, rhombus)
		}
	}

	// remove from stage and back repo's 3 maps all rhombuss that are not in the checkout
	for rhombus := range rhombusInstancesToBeRemovedFromTheStage {
		rhombus.Unstage(backRepoRhombus.GetStage())

		// remove instance from the back repo 3 maps
		rhombusID := backRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus]
		delete(backRepoRhombus.Map_RhombusPtr_RhombusDBID, rhombus)
		delete(backRepoRhombus.Map_RhombusDBID_RhombusDB, rhombusID)
		delete(backRepoRhombus.Map_RhombusDBID_RhombusPtr, rhombusID)
	}

	return
}

// CheckoutPhaseOneInstance takes a rhombusDB that has been found in the DB, updates the backRepo and stages the
// models version of the rhombusDB
func (backRepoRhombus *BackRepoRhombusStruct) CheckoutPhaseOneInstance(rhombusDB *RhombusDB) (Error error) {

	rhombus, ok := backRepoRhombus.Map_RhombusDBID_RhombusPtr[rhombusDB.ID]
	if !ok {
		rhombus = new(models.Rhombus)

		backRepoRhombus.Map_RhombusDBID_RhombusPtr[rhombusDB.ID] = rhombus
		backRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus] = rhombusDB.ID

		// append model store with the new element
		rhombus.Name = rhombusDB.Name_Data.String
		rhombus.Stage(backRepoRhombus.GetStage())
	}
	rhombusDB.CopyBasicFieldsToRhombus(rhombus)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	rhombus.Stage(backRepoRhombus.GetStage())

	// preserve pointer to rhombusDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RhombusDBID_RhombusDB)[rhombusDB hold variable pointers
	rhombusDB_Data := *rhombusDB
	preservedPtrToRhombus := &rhombusDB_Data
	backRepoRhombus.Map_RhombusDBID_RhombusDB[rhombusDB.ID] = preservedPtrToRhombus

	return
}

// BackRepoRhombus.CheckoutPhaseTwo Checkouts all staged instances of Rhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRhombus *BackRepoRhombusStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rhombusDB := range backRepoRhombus.Map_RhombusDBID_RhombusDB {
		backRepoRhombus.CheckoutPhaseTwoInstance(backRepo, rhombusDB)
	}
	return
}

// BackRepoRhombus.CheckoutPhaseTwoInstance Checkouts staged instances of Rhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRhombus *BackRepoRhombusStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rhombusDB *RhombusDB) (Error error) {

	rhombus := backRepoRhombus.Map_RhombusDBID_RhombusPtr[rhombusDB.ID]

	rhombusDB.DecodePointers(backRepo, rhombus)

	return
}

func (rhombusDB *RhombusDB) DecodePointers(backRepo *BackRepoStruct, rhombus *models.Rhombus) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field
	rhombus.ShapeCategory = nil
	if rhombusDB.ShapeCategoryID.Int64 != 0 {
		rhombus.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(rhombusDB.ShapeCategoryID.Int64)]
	}
	return
}

// CommitRhombus allows commit of a single rhombus (if already staged)
func (backRepo *BackRepoStruct) CommitRhombus(rhombus *models.Rhombus) {
	backRepo.BackRepoRhombus.CommitPhaseOneInstance(rhombus)
	if id, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus]; ok {
		backRepo.BackRepoRhombus.CommitPhaseTwoInstance(backRepo, id, rhombus)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRhombus allows checkout of a single rhombus (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRhombus(rhombus *models.Rhombus) {
	// check if the rhombus is staged
	if _, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus]; ok {

		if id, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[rhombus]; ok {
			var rhombusDB RhombusDB
			rhombusDB.ID = id

			if err := backRepo.BackRepoRhombus.db.First(&rhombusDB, id).Error; err != nil {
				log.Fatalln("CheckoutRhombus : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRhombus.CheckoutPhaseOneInstance(&rhombusDB)
			backRepo.BackRepoRhombus.CheckoutPhaseTwoInstance(backRepo, &rhombusDB)
		}
	}
}

// CopyBasicFieldsFromRhombus
func (rhombusDB *RhombusDB) CopyBasicFieldsFromRhombus(rhombus *models.Rhombus) {
	// insertion point for fields commit

	rhombusDB.Name_Data.String = rhombus.Name
	rhombusDB.Name_Data.Valid = true

	rhombusDB.IsDisplayed_Data.Bool = rhombus.IsDisplayed
	rhombusDB.IsDisplayed_Data.Valid = true

	rhombusDB.CenterX_Data.Float64 = rhombus.CenterX
	rhombusDB.CenterX_Data.Valid = true

	rhombusDB.CenterY_Data.Float64 = rhombus.CenterY
	rhombusDB.CenterY_Data.Valid = true

	rhombusDB.SideLength_Data.Float64 = rhombus.SideLength
	rhombusDB.SideLength_Data.Valid = true

	rhombusDB.AngleDegree_Data.Float64 = rhombus.AngleDegree
	rhombusDB.AngleDegree_Data.Valid = true

	rhombusDB.InsideAngle_Data.Float64 = rhombus.InsideAngle
	rhombusDB.InsideAngle_Data.Valid = true

	rhombusDB.Color_Data.String = rhombus.Color
	rhombusDB.Color_Data.Valid = true

	rhombusDB.FillOpacity_Data.Float64 = rhombus.FillOpacity
	rhombusDB.FillOpacity_Data.Valid = true

	rhombusDB.Stroke_Data.String = rhombus.Stroke
	rhombusDB.Stroke_Data.Valid = true

	rhombusDB.StrokeOpacity_Data.Float64 = rhombus.StrokeOpacity
	rhombusDB.StrokeOpacity_Data.Valid = true

	rhombusDB.StrokeWidth_Data.Float64 = rhombus.StrokeWidth
	rhombusDB.StrokeWidth_Data.Valid = true

	rhombusDB.StrokeDashArray_Data.String = rhombus.StrokeDashArray
	rhombusDB.StrokeDashArray_Data.Valid = true

	rhombusDB.StrokeDashArrayWhenSelected_Data.String = rhombus.StrokeDashArrayWhenSelected
	rhombusDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rhombusDB.Transform_Data.String = rhombus.Transform
	rhombusDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromRhombus_WOP
func (rhombusDB *RhombusDB) CopyBasicFieldsFromRhombus_WOP(rhombus *models.Rhombus_WOP) {
	// insertion point for fields commit

	rhombusDB.Name_Data.String = rhombus.Name
	rhombusDB.Name_Data.Valid = true

	rhombusDB.IsDisplayed_Data.Bool = rhombus.IsDisplayed
	rhombusDB.IsDisplayed_Data.Valid = true

	rhombusDB.CenterX_Data.Float64 = rhombus.CenterX
	rhombusDB.CenterX_Data.Valid = true

	rhombusDB.CenterY_Data.Float64 = rhombus.CenterY
	rhombusDB.CenterY_Data.Valid = true

	rhombusDB.SideLength_Data.Float64 = rhombus.SideLength
	rhombusDB.SideLength_Data.Valid = true

	rhombusDB.AngleDegree_Data.Float64 = rhombus.AngleDegree
	rhombusDB.AngleDegree_Data.Valid = true

	rhombusDB.InsideAngle_Data.Float64 = rhombus.InsideAngle
	rhombusDB.InsideAngle_Data.Valid = true

	rhombusDB.Color_Data.String = rhombus.Color
	rhombusDB.Color_Data.Valid = true

	rhombusDB.FillOpacity_Data.Float64 = rhombus.FillOpacity
	rhombusDB.FillOpacity_Data.Valid = true

	rhombusDB.Stroke_Data.String = rhombus.Stroke
	rhombusDB.Stroke_Data.Valid = true

	rhombusDB.StrokeOpacity_Data.Float64 = rhombus.StrokeOpacity
	rhombusDB.StrokeOpacity_Data.Valid = true

	rhombusDB.StrokeWidth_Data.Float64 = rhombus.StrokeWidth
	rhombusDB.StrokeWidth_Data.Valid = true

	rhombusDB.StrokeDashArray_Data.String = rhombus.StrokeDashArray
	rhombusDB.StrokeDashArray_Data.Valid = true

	rhombusDB.StrokeDashArrayWhenSelected_Data.String = rhombus.StrokeDashArrayWhenSelected
	rhombusDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rhombusDB.Transform_Data.String = rhombus.Transform
	rhombusDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromRhombusWOP
func (rhombusDB *RhombusDB) CopyBasicFieldsFromRhombusWOP(rhombus *RhombusWOP) {
	// insertion point for fields commit

	rhombusDB.Name_Data.String = rhombus.Name
	rhombusDB.Name_Data.Valid = true

	rhombusDB.IsDisplayed_Data.Bool = rhombus.IsDisplayed
	rhombusDB.IsDisplayed_Data.Valid = true

	rhombusDB.CenterX_Data.Float64 = rhombus.CenterX
	rhombusDB.CenterX_Data.Valid = true

	rhombusDB.CenterY_Data.Float64 = rhombus.CenterY
	rhombusDB.CenterY_Data.Valid = true

	rhombusDB.SideLength_Data.Float64 = rhombus.SideLength
	rhombusDB.SideLength_Data.Valid = true

	rhombusDB.AngleDegree_Data.Float64 = rhombus.AngleDegree
	rhombusDB.AngleDegree_Data.Valid = true

	rhombusDB.InsideAngle_Data.Float64 = rhombus.InsideAngle
	rhombusDB.InsideAngle_Data.Valid = true

	rhombusDB.Color_Data.String = rhombus.Color
	rhombusDB.Color_Data.Valid = true

	rhombusDB.FillOpacity_Data.Float64 = rhombus.FillOpacity
	rhombusDB.FillOpacity_Data.Valid = true

	rhombusDB.Stroke_Data.String = rhombus.Stroke
	rhombusDB.Stroke_Data.Valid = true

	rhombusDB.StrokeOpacity_Data.Float64 = rhombus.StrokeOpacity
	rhombusDB.StrokeOpacity_Data.Valid = true

	rhombusDB.StrokeWidth_Data.Float64 = rhombus.StrokeWidth
	rhombusDB.StrokeWidth_Data.Valid = true

	rhombusDB.StrokeDashArray_Data.String = rhombus.StrokeDashArray
	rhombusDB.StrokeDashArray_Data.Valid = true

	rhombusDB.StrokeDashArrayWhenSelected_Data.String = rhombus.StrokeDashArrayWhenSelected
	rhombusDB.StrokeDashArrayWhenSelected_Data.Valid = true

	rhombusDB.Transform_Data.String = rhombus.Transform
	rhombusDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToRhombus
func (rhombusDB *RhombusDB) CopyBasicFieldsToRhombus(rhombus *models.Rhombus) {
	// insertion point for checkout of basic fields (back repo to stage)
	rhombus.Name = rhombusDB.Name_Data.String
	rhombus.IsDisplayed = rhombusDB.IsDisplayed_Data.Bool
	rhombus.CenterX = rhombusDB.CenterX_Data.Float64
	rhombus.CenterY = rhombusDB.CenterY_Data.Float64
	rhombus.SideLength = rhombusDB.SideLength_Data.Float64
	rhombus.AngleDegree = rhombusDB.AngleDegree_Data.Float64
	rhombus.InsideAngle = rhombusDB.InsideAngle_Data.Float64
	rhombus.Color = rhombusDB.Color_Data.String
	rhombus.FillOpacity = rhombusDB.FillOpacity_Data.Float64
	rhombus.Stroke = rhombusDB.Stroke_Data.String
	rhombus.StrokeOpacity = rhombusDB.StrokeOpacity_Data.Float64
	rhombus.StrokeWidth = rhombusDB.StrokeWidth_Data.Float64
	rhombus.StrokeDashArray = rhombusDB.StrokeDashArray_Data.String
	rhombus.StrokeDashArrayWhenSelected = rhombusDB.StrokeDashArrayWhenSelected_Data.String
	rhombus.Transform = rhombusDB.Transform_Data.String
}

// CopyBasicFieldsToRhombus_WOP
func (rhombusDB *RhombusDB) CopyBasicFieldsToRhombus_WOP(rhombus *models.Rhombus_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	rhombus.Name = rhombusDB.Name_Data.String
	rhombus.IsDisplayed = rhombusDB.IsDisplayed_Data.Bool
	rhombus.CenterX = rhombusDB.CenterX_Data.Float64
	rhombus.CenterY = rhombusDB.CenterY_Data.Float64
	rhombus.SideLength = rhombusDB.SideLength_Data.Float64
	rhombus.AngleDegree = rhombusDB.AngleDegree_Data.Float64
	rhombus.InsideAngle = rhombusDB.InsideAngle_Data.Float64
	rhombus.Color = rhombusDB.Color_Data.String
	rhombus.FillOpacity = rhombusDB.FillOpacity_Data.Float64
	rhombus.Stroke = rhombusDB.Stroke_Data.String
	rhombus.StrokeOpacity = rhombusDB.StrokeOpacity_Data.Float64
	rhombus.StrokeWidth = rhombusDB.StrokeWidth_Data.Float64
	rhombus.StrokeDashArray = rhombusDB.StrokeDashArray_Data.String
	rhombus.StrokeDashArrayWhenSelected = rhombusDB.StrokeDashArrayWhenSelected_Data.String
	rhombus.Transform = rhombusDB.Transform_Data.String
}

// CopyBasicFieldsToRhombusWOP
func (rhombusDB *RhombusDB) CopyBasicFieldsToRhombusWOP(rhombus *RhombusWOP) {
	rhombus.ID = int(rhombusDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	rhombus.Name = rhombusDB.Name_Data.String
	rhombus.IsDisplayed = rhombusDB.IsDisplayed_Data.Bool
	rhombus.CenterX = rhombusDB.CenterX_Data.Float64
	rhombus.CenterY = rhombusDB.CenterY_Data.Float64
	rhombus.SideLength = rhombusDB.SideLength_Data.Float64
	rhombus.AngleDegree = rhombusDB.AngleDegree_Data.Float64
	rhombus.InsideAngle = rhombusDB.InsideAngle_Data.Float64
	rhombus.Color = rhombusDB.Color_Data.String
	rhombus.FillOpacity = rhombusDB.FillOpacity_Data.Float64
	rhombus.Stroke = rhombusDB.Stroke_Data.String
	rhombus.StrokeOpacity = rhombusDB.StrokeOpacity_Data.Float64
	rhombus.StrokeWidth = rhombusDB.StrokeWidth_Data.Float64
	rhombus.StrokeDashArray = rhombusDB.StrokeDashArray_Data.String
	rhombus.StrokeDashArrayWhenSelected = rhombusDB.StrokeDashArrayWhenSelected_Data.String
	rhombus.Transform = rhombusDB.Transform_Data.String
}

// Backup generates a json file from a slice of all RhombusDB instances in the backrepo
func (backRepoRhombus *BackRepoRhombusStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RhombusDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RhombusDB, 0)
	for _, rhombusDB := range backRepoRhombus.Map_RhombusDBID_RhombusDB {
		forBackup = append(forBackup, rhombusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Rhombus ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Rhombus file", err.Error())
	}
}

// Backup generates a json file from a slice of all RhombusDB instances in the backrepo
func (backRepoRhombus *BackRepoRhombusStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RhombusDB, 0)
	for _, rhombusDB := range backRepoRhombus.Map_RhombusDBID_RhombusDB {
		forBackup = append(forBackup, rhombusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Rhombus")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Rhombus_Fields, -1)
	for _, rhombusDB := range forBackup {

		var rhombusWOP RhombusWOP
		rhombusDB.CopyBasicFieldsToRhombusWOP(&rhombusWOP)

		row := sh.AddRow()
		row.WriteStruct(&rhombusWOP, -1)
	}
}

// RestoreXL from the "Rhombus" sheet all RhombusDB instances
func (backRepoRhombus *BackRepoRhombusStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRhombusid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Rhombus"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRhombus.rowVisitorRhombus)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRhombus *BackRepoRhombusStruct) rowVisitorRhombus(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var rhombusWOP RhombusWOP
		row.ReadStruct(&rhombusWOP)

		// add the unmarshalled struct to the stage
		rhombusDB := new(RhombusDB)
		rhombusDB.CopyBasicFieldsFromRhombusWOP(&rhombusWOP)

		rhombusDB_ID_atBackupTime := rhombusDB.ID
		rhombusDB.ID = 0
		query := backRepoRhombus.db.Create(rhombusDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRhombus.Map_RhombusDBID_RhombusDB[rhombusDB.ID] = rhombusDB
		BackRepoRhombusid_atBckpTime_newID[rhombusDB_ID_atBackupTime] = rhombusDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RhombusDB.json" in dirPath that stores an array
// of RhombusDB and stores it in the database
// the map BackRepoRhombusid_atBckpTime_newID is updated accordingly
func (backRepoRhombus *BackRepoRhombusStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRhombusid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RhombusDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Rhombus file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RhombusDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RhombusDBID_RhombusDB
	for _, rhombusDB := range forRestore {

		rhombusDB_ID_atBackupTime := rhombusDB.ID
		rhombusDB.ID = 0
		query := backRepoRhombus.db.Create(rhombusDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRhombus.Map_RhombusDBID_RhombusDB[rhombusDB.ID] = rhombusDB
		BackRepoRhombusid_atBckpTime_newID[rhombusDB_ID_atBackupTime] = rhombusDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Rhombus file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Rhombus>id_atBckpTime_newID
// to compute new index
func (backRepoRhombus *BackRepoRhombusStruct) RestorePhaseTwo() {

	for _, rhombusDB := range backRepoRhombus.Map_RhombusDBID_RhombusDB {

		// next line of code is to avert unused variable compilation error
		_ = rhombusDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if rhombusDB.ShapeCategoryID.Int64 != 0 {
			rhombusDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(rhombusDB.ShapeCategoryID.Int64)])
			rhombusDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoRhombus.db.Model(rhombusDB).Updates(*rhombusDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRhombus.ResetReversePointers commits all staged instances of Rhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRhombus *BackRepoRhombusStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, rhombus := range backRepoRhombus.Map_RhombusDBID_RhombusPtr {
		backRepoRhombus.ResetReversePointersInstance(backRepo, idx, rhombus)
	}

	return
}

func (backRepoRhombus *BackRepoRhombusStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, rhombus *models.Rhombus) (Error error) {

	// fetch matching rhombusDB
	if rhombusDB, ok := backRepoRhombus.Map_RhombusDBID_RhombusDB[idx]; ok {
		_ = rhombusDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRhombusid_atBckpTime_newID map[uint]uint
