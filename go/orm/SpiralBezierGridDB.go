// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SpiralBezierGrid_sql sql.NullBool
var dummy_SpiralBezierGrid_time time.Duration
var dummy_SpiralBezierGrid_sort sort.Float64Slice

// SpiralBezierGridAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spiralbeziergridAPI
type SpiralBezierGridAPI struct {
	gorm.Model

	models.SpiralBezierGrid_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SpiralBezierGridPointersEncoding SpiralBezierGridPointersEncoding
}

// SpiralBezierGridPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SpiralBezierGridPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field SpiralBeziers is a slice of pointers to another Struct (optional or 0..1)
	SpiralBeziers IntSlice `gorm:"type:TEXT"`
}

// SpiralBezierGridDB describes a spiralbeziergrid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spiralbeziergridDB
type SpiralBezierGridDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spiralbeziergridDB.Name
	Name_Data sql.NullString

	// Declation for basic field spiralbeziergridDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SpiralBezierGridPointersEncoding
}

// SpiralBezierGridDBs arrays spiralbeziergridDBs
// swagger:response spiralbeziergridDBsResponse
type SpiralBezierGridDBs []SpiralBezierGridDB

// SpiralBezierGridDBResponse provides response
// swagger:response spiralbeziergridDBResponse
type SpiralBezierGridDBResponse struct {
	SpiralBezierGridDB
}

// SpiralBezierGridWOP is a SpiralBezierGrid without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SpiralBezierGridWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SpiralBezierGrid_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoSpiralBezierGridStruct struct {
	// stores SpiralBezierGridDB according to their gorm ID
	Map_SpiralBezierGridDBID_SpiralBezierGridDB map[uint]*SpiralBezierGridDB

	// stores SpiralBezierGridDB ID according to SpiralBezierGrid address
	Map_SpiralBezierGridPtr_SpiralBezierGridDBID map[*models.SpiralBezierGrid]uint

	// stores SpiralBezierGrid according to their gorm ID
	Map_SpiralBezierGridDBID_SpiralBezierGridPtr map[uint]*models.SpiralBezierGrid

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSpiralBezierGrid.stage
	return
}

func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) GetDB() db.DBInterface {
	return backRepoSpiralBezierGrid.db
}

// GetSpiralBezierGridDBFromSpiralBezierGridPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) GetSpiralBezierGridDBFromSpiralBezierGridPtr(spiralbeziergrid *models.SpiralBezierGrid) (spiralbeziergridDB *SpiralBezierGridDB) {
	id := backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid]
	spiralbeziergridDB = backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[id]
	return
}

// BackRepoSpiralBezierGrid.CommitPhaseOne commits all staged instances of SpiralBezierGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spiralbeziergrid := range stage.SpiralBezierGrids {
		backRepoSpiralBezierGrid.CommitPhaseOneInstance(spiralbeziergrid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spiralbeziergrid := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr {
		if _, ok := stage.SpiralBezierGrids[spiralbeziergrid]; !ok {
			backRepoSpiralBezierGrid.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSpiralBezierGrid.CommitDeleteInstance commits deletion of SpiralBezierGrid to the BackRepo
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CommitDeleteInstance(id uint) (Error error) {

	spiralbeziergrid := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[id]

	// spiralbeziergrid is not staged anymore, remove spiralbeziergridDB
	spiralbeziergridDB := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[id]
	db, _ := backRepoSpiralBezierGrid.db.Unscoped()
	_, err := db.Delete(spiralbeziergridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID, spiralbeziergrid)
	delete(backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr, id)
	delete(backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB, id)

	return
}

// BackRepoSpiralBezierGrid.CommitPhaseOneInstance commits spiralbeziergrid staged instances of SpiralBezierGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CommitPhaseOneInstance(spiralbeziergrid *models.SpiralBezierGrid) (Error error) {

	// check if the spiralbeziergrid is not commited yet
	if _, ok := backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid]; ok {
		return
	}

	// initiate spiralbeziergrid
	var spiralbeziergridDB SpiralBezierGridDB
	spiralbeziergridDB.CopyBasicFieldsFromSpiralBezierGrid(spiralbeziergrid)

	_, err := backRepoSpiralBezierGrid.db.Create(&spiralbeziergridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid] = spiralbeziergridDB.ID
	backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[spiralbeziergridDB.ID] = spiralbeziergrid
	backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[spiralbeziergridDB.ID] = &spiralbeziergridDB

	return
}

// BackRepoSpiralBezierGrid.CommitPhaseTwo commits all staged instances of SpiralBezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralbeziergrid := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr {
		backRepoSpiralBezierGrid.CommitPhaseTwoInstance(backRepo, idx, spiralbeziergrid)
	}

	return
}

// BackRepoSpiralBezierGrid.CommitPhaseTwoInstance commits {{structname }} of models.SpiralBezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spiralbeziergrid *models.SpiralBezierGrid) (Error error) {

	// fetch matching spiralbeziergridDB
	if spiralbeziergridDB, ok := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[idx]; ok {

		spiralbeziergridDB.CopyBasicFieldsFromSpiralBezierGrid(spiralbeziergrid)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value spiralbeziergrid.ShapeCategory translates to updating the spiralbeziergrid.ShapeCategoryID
		spiralbeziergridDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if spiralbeziergrid.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[spiralbeziergrid.ShapeCategory]; ok {
				spiralbeziergridDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				spiralbeziergridDB.ShapeCategoryID.Valid = true
			}
		} else {
			spiralbeziergridDB.ShapeCategoryID.Int64 = 0
			spiralbeziergridDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		spiralbeziergridDB.SpiralBezierGridPointersEncoding.SpiralBeziers = make([]int, 0)
		// 2. encode
		for _, spiralbezierAssocEnd := range spiralbeziergrid.SpiralBeziers {
			spiralbezierAssocEnd_DB :=
				backRepo.BackRepoSpiralBezier.GetSpiralBezierDBFromSpiralBezierPtr(spiralbezierAssocEnd)
			
			// the stage might be inconsistant, meaning that the spiralbezierAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if spiralbezierAssocEnd_DB == nil {
				continue
			}
			
			spiralbeziergridDB.SpiralBezierGridPointersEncoding.SpiralBeziers =
				append(spiralbeziergridDB.SpiralBezierGridPointersEncoding.SpiralBeziers, int(spiralbezierAssocEnd_DB.ID))
		}

		_, err := backRepoSpiralBezierGrid.db.Save(spiralbeziergridDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SpiralBezierGrid intance %s", spiralbeziergrid.Name))
		return err
	}

	return
}

// BackRepoSpiralBezierGrid.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CheckoutPhaseOne() (Error error) {

	spiralbeziergridDBArray := make([]SpiralBezierGridDB, 0)
	_, err := backRepoSpiralBezierGrid.db.Find(&spiralbeziergridDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spiralbeziergridInstancesToBeRemovedFromTheStage := make(map[*models.SpiralBezierGrid]any)
	for key, value := range backRepoSpiralBezierGrid.stage.SpiralBezierGrids {
		spiralbeziergridInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spiralbeziergridDB := range spiralbeziergridDBArray {
		backRepoSpiralBezierGrid.CheckoutPhaseOneInstance(&spiralbeziergridDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spiralbeziergrid, ok := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[spiralbeziergridDB.ID]
		if ok {
			delete(spiralbeziergridInstancesToBeRemovedFromTheStage, spiralbeziergrid)
		}
	}

	// remove from stage and back repo's 3 maps all spiralbeziergrids that are not in the checkout
	for spiralbeziergrid := range spiralbeziergridInstancesToBeRemovedFromTheStage {
		spiralbeziergrid.Unstage(backRepoSpiralBezierGrid.GetStage())

		// remove instance from the back repo 3 maps
		spiralbeziergridID := backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid]
		delete(backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID, spiralbeziergrid)
		delete(backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB, spiralbeziergridID)
		delete(backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr, spiralbeziergridID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spiralbeziergridDB that has been found in the DB, updates the backRepo and stages the
// models version of the spiralbeziergridDB
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CheckoutPhaseOneInstance(spiralbeziergridDB *SpiralBezierGridDB) (Error error) {

	spiralbeziergrid, ok := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[spiralbeziergridDB.ID]
	if !ok {
		spiralbeziergrid = new(models.SpiralBezierGrid)

		backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[spiralbeziergridDB.ID] = spiralbeziergrid
		backRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid] = spiralbeziergridDB.ID

		// append model store with the new element
		spiralbeziergrid.Name = spiralbeziergridDB.Name_Data.String
		spiralbeziergrid.Stage(backRepoSpiralBezierGrid.GetStage())
	}
	spiralbeziergridDB.CopyBasicFieldsToSpiralBezierGrid(spiralbeziergrid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spiralbeziergrid.Stage(backRepoSpiralBezierGrid.GetStage())

	// preserve pointer to spiralbeziergridDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SpiralBezierGridDBID_SpiralBezierGridDB)[spiralbeziergridDB hold variable pointers
	spiralbeziergridDB_Data := *spiralbeziergridDB
	preservedPtrToSpiralBezierGrid := &spiralbeziergridDB_Data
	backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[spiralbeziergridDB.ID] = preservedPtrToSpiralBezierGrid

	return
}

// BackRepoSpiralBezierGrid.CheckoutPhaseTwo Checkouts all staged instances of SpiralBezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spiralbeziergridDB := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB {
		backRepoSpiralBezierGrid.CheckoutPhaseTwoInstance(backRepo, spiralbeziergridDB)
	}
	return
}

// BackRepoSpiralBezierGrid.CheckoutPhaseTwoInstance Checkouts staged instances of SpiralBezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spiralbeziergridDB *SpiralBezierGridDB) (Error error) {

	spiralbeziergrid := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[spiralbeziergridDB.ID]

	spiralbeziergridDB.DecodePointers(backRepo, spiralbeziergrid)

	return
}

func (spiralbeziergridDB *SpiralBezierGridDB) DecodePointers(backRepo *BackRepoStruct, spiralbeziergrid *models.SpiralBezierGrid) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field
	spiralbeziergrid.ShapeCategory = nil
	if spiralbeziergridDB.ShapeCategoryID.Int64 != 0 {
		spiralbeziergrid.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(spiralbeziergridDB.ShapeCategoryID.Int64)]
	}
	// This loop redeem spiralbeziergrid.SpiralBeziers in the stage from the encode in the back repo
	// It parses all SpiralBezierDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spiralbeziergrid.SpiralBeziers = spiralbeziergrid.SpiralBeziers[:0]
	for _, _SpiralBezierid := range spiralbeziergridDB.SpiralBezierGridPointersEncoding.SpiralBeziers {
		spiralbeziergrid.SpiralBeziers = append(spiralbeziergrid.SpiralBeziers, backRepo.BackRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[uint(_SpiralBezierid)])
	}

	return
}

// CommitSpiralBezierGrid allows commit of a single spiralbeziergrid (if already staged)
func (backRepo *BackRepoStruct) CommitSpiralBezierGrid(spiralbeziergrid *models.SpiralBezierGrid) {
	backRepo.BackRepoSpiralBezierGrid.CommitPhaseOneInstance(spiralbeziergrid)
	if id, ok := backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid]; ok {
		backRepo.BackRepoSpiralBezierGrid.CommitPhaseTwoInstance(backRepo, id, spiralbeziergrid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSpiralBezierGrid allows checkout of a single spiralbeziergrid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSpiralBezierGrid(spiralbeziergrid *models.SpiralBezierGrid) {
	// check if the spiralbeziergrid is staged
	if _, ok := backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid]; ok {

		if id, ok := backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[spiralbeziergrid]; ok {
			var spiralbeziergridDB SpiralBezierGridDB
			spiralbeziergridDB.ID = id

			if _, err := backRepo.BackRepoSpiralBezierGrid.db.First(&spiralbeziergridDB, id); err != nil {
				log.Fatalln("CheckoutSpiralBezierGrid : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSpiralBezierGrid.CheckoutPhaseOneInstance(&spiralbeziergridDB)
			backRepo.BackRepoSpiralBezierGrid.CheckoutPhaseTwoInstance(backRepo, &spiralbeziergridDB)
		}
	}
}

// CopyBasicFieldsFromSpiralBezierGrid
func (spiralbeziergridDB *SpiralBezierGridDB) CopyBasicFieldsFromSpiralBezierGrid(spiralbeziergrid *models.SpiralBezierGrid) {
	// insertion point for fields commit

	spiralbeziergridDB.Name_Data.String = spiralbeziergrid.Name
	spiralbeziergridDB.Name_Data.Valid = true

	spiralbeziergridDB.IsDisplayed_Data.Bool = spiralbeziergrid.IsDisplayed
	spiralbeziergridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromSpiralBezierGrid_WOP
func (spiralbeziergridDB *SpiralBezierGridDB) CopyBasicFieldsFromSpiralBezierGrid_WOP(spiralbeziergrid *models.SpiralBezierGrid_WOP) {
	// insertion point for fields commit

	spiralbeziergridDB.Name_Data.String = spiralbeziergrid.Name
	spiralbeziergridDB.Name_Data.Valid = true

	spiralbeziergridDB.IsDisplayed_Data.Bool = spiralbeziergrid.IsDisplayed
	spiralbeziergridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromSpiralBezierGridWOP
func (spiralbeziergridDB *SpiralBezierGridDB) CopyBasicFieldsFromSpiralBezierGridWOP(spiralbeziergrid *SpiralBezierGridWOP) {
	// insertion point for fields commit

	spiralbeziergridDB.Name_Data.String = spiralbeziergrid.Name
	spiralbeziergridDB.Name_Data.Valid = true

	spiralbeziergridDB.IsDisplayed_Data.Bool = spiralbeziergrid.IsDisplayed
	spiralbeziergridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToSpiralBezierGrid
func (spiralbeziergridDB *SpiralBezierGridDB) CopyBasicFieldsToSpiralBezierGrid(spiralbeziergrid *models.SpiralBezierGrid) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralbeziergrid.Name = spiralbeziergridDB.Name_Data.String
	spiralbeziergrid.IsDisplayed = spiralbeziergridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToSpiralBezierGrid_WOP
func (spiralbeziergridDB *SpiralBezierGridDB) CopyBasicFieldsToSpiralBezierGrid_WOP(spiralbeziergrid *models.SpiralBezierGrid_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralbeziergrid.Name = spiralbeziergridDB.Name_Data.String
	spiralbeziergrid.IsDisplayed = spiralbeziergridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToSpiralBezierGridWOP
func (spiralbeziergridDB *SpiralBezierGridDB) CopyBasicFieldsToSpiralBezierGridWOP(spiralbeziergrid *SpiralBezierGridWOP) {
	spiralbeziergrid.ID = int(spiralbeziergridDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spiralbeziergrid.Name = spiralbeziergridDB.Name_Data.String
	spiralbeziergrid.IsDisplayed = spiralbeziergridDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all SpiralBezierGridDB instances in the backrepo
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SpiralBezierGridDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralBezierGridDB, 0)
	for _, spiralbeziergridDB := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB {
		forBackup = append(forBackup, spiralbeziergridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SpiralBezierGrid ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SpiralBezierGrid file", err.Error())
	}
}

// Backup generates a json file from a slice of all SpiralBezierGridDB instances in the backrepo
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralBezierGridDB, 0)
	for _, spiralbeziergridDB := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB {
		forBackup = append(forBackup, spiralbeziergridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SpiralBezierGrid")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SpiralBezierGrid_Fields, -1)
	for _, spiralbeziergridDB := range forBackup {

		var spiralbeziergridWOP SpiralBezierGridWOP
		spiralbeziergridDB.CopyBasicFieldsToSpiralBezierGridWOP(&spiralbeziergridWOP)

		row := sh.AddRow()
		row.WriteStruct(&spiralbeziergridWOP, -1)
	}
}

// RestoreXL from the "SpiralBezierGrid" sheet all SpiralBezierGridDB instances
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSpiralBezierGridid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SpiralBezierGrid"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSpiralBezierGrid.rowVisitorSpiralBezierGrid)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) rowVisitorSpiralBezierGrid(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spiralbeziergridWOP SpiralBezierGridWOP
		row.ReadStruct(&spiralbeziergridWOP)

		// add the unmarshalled struct to the stage
		spiralbeziergridDB := new(SpiralBezierGridDB)
		spiralbeziergridDB.CopyBasicFieldsFromSpiralBezierGridWOP(&spiralbeziergridWOP)

		spiralbeziergridDB_ID_atBackupTime := spiralbeziergridDB.ID
		spiralbeziergridDB.ID = 0
		_, err := backRepoSpiralBezierGrid.db.Create(spiralbeziergridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[spiralbeziergridDB.ID] = spiralbeziergridDB
		BackRepoSpiralBezierGridid_atBckpTime_newID[spiralbeziergridDB_ID_atBackupTime] = spiralbeziergridDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SpiralBezierGridDB.json" in dirPath that stores an array
// of SpiralBezierGridDB and stores it in the database
// the map BackRepoSpiralBezierGridid_atBckpTime_newID is updated accordingly
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSpiralBezierGridid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SpiralBezierGridDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SpiralBezierGrid file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SpiralBezierGridDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SpiralBezierGridDBID_SpiralBezierGridDB
	for _, spiralbeziergridDB := range forRestore {

		spiralbeziergridDB_ID_atBackupTime := spiralbeziergridDB.ID
		spiralbeziergridDB.ID = 0
		_, err := backRepoSpiralBezierGrid.db.Create(spiralbeziergridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[spiralbeziergridDB.ID] = spiralbeziergridDB
		BackRepoSpiralBezierGridid_atBckpTime_newID[spiralbeziergridDB_ID_atBackupTime] = spiralbeziergridDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SpiralBezierGrid file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SpiralBezierGrid>id_atBckpTime_newID
// to compute new index
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) RestorePhaseTwo() {

	for _, spiralbeziergridDB := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB {

		// next line of code is to avert unused variable compilation error
		_ = spiralbeziergridDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if spiralbeziergridDB.ShapeCategoryID.Int64 != 0 {
			spiralbeziergridDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(spiralbeziergridDB.ShapeCategoryID.Int64)])
			spiralbeziergridDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSpiralBezierGrid.db.Model(spiralbeziergridDB)
		_, err := db.Updates(*spiralbeziergridDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSpiralBezierGrid.ResetReversePointers commits all staged instances of SpiralBezierGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralbeziergrid := range backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr {
		backRepoSpiralBezierGrid.ResetReversePointersInstance(backRepo, idx, spiralbeziergrid)
	}

	return
}

func (backRepoSpiralBezierGrid *BackRepoSpiralBezierGridStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spiralbeziergrid *models.SpiralBezierGrid) (Error error) {

	// fetch matching spiralbeziergridDB
	if spiralbeziergridDB, ok := backRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridDB[idx]; ok {
		_ = spiralbeziergridDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSpiralBezierGridid_atBckpTime_newID map[uint]uint
