// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ExportToMusicxml_sql sql.NullBool
var dummy_ExportToMusicxml_time time.Duration
var dummy_ExportToMusicxml_sort sort.Float64Slice

// ExportToMusicxmlAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model exporttomusicxmlAPI
type ExportToMusicxmlAPI struct {
	gorm.Model

	models.ExportToMusicxml_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ExportToMusicxmlPointersEncoding ExportToMusicxmlPointersEncoding
}

// ExportToMusicxmlPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ExportToMusicxmlPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Parameter is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ParameterID sql.NullInt64
}

// ExportToMusicxmlDB describes a exporttomusicxml in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model exporttomusicxmlDB
type ExportToMusicxmlDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field exporttomusicxmlDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ExportToMusicxmlPointersEncoding
}

// ExportToMusicxmlDBs arrays exporttomusicxmlDBs
// swagger:response exporttomusicxmlDBsResponse
type ExportToMusicxmlDBs []ExportToMusicxmlDB

// ExportToMusicxmlDBResponse provides response
// swagger:response exporttomusicxmlDBResponse
type ExportToMusicxmlDBResponse struct {
	ExportToMusicxmlDB
}

// ExportToMusicxmlWOP is a ExportToMusicxml without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ExportToMusicxmlWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var ExportToMusicxml_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoExportToMusicxmlStruct struct {
	// stores ExportToMusicxmlDB according to their gorm ID
	Map_ExportToMusicxmlDBID_ExportToMusicxmlDB map[uint]*ExportToMusicxmlDB

	// stores ExportToMusicxmlDB ID according to ExportToMusicxml address
	Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID map[*models.ExportToMusicxml]uint

	// stores ExportToMusicxml according to their gorm ID
	Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr map[uint]*models.ExportToMusicxml

	db db.DBInterface

	stage *models.Stage
}

func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) GetStage() (stage *models.Stage) {
	stage = backRepoExportToMusicxml.stage
	return
}

func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) GetDB() db.DBInterface {
	return backRepoExportToMusicxml.db
}

// GetExportToMusicxmlDBFromExportToMusicxmlPtr is a handy function to access the back repo instance from the stage instance
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) GetExportToMusicxmlDBFromExportToMusicxmlPtr(exporttomusicxml *models.ExportToMusicxml) (exporttomusicxmlDB *ExportToMusicxmlDB) {
	id := backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml]
	exporttomusicxmlDB = backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[id]
	return
}

// BackRepoExportToMusicxml.CommitPhaseOne commits all staged instances of ExportToMusicxml to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var exporttomusicxmls []*models.ExportToMusicxml
	for exporttomusicxml := range stage.ExportToMusicxmls {
		exporttomusicxmls = append(exporttomusicxmls, exporttomusicxml)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(exporttomusicxmls, func(i, j int) bool {
		return stage.ExportToMusicxmlMap_Staged_Order[exporttomusicxmls[i]] < stage.ExportToMusicxmlMap_Staged_Order[exporttomusicxmls[j]]
	})

	for _, exporttomusicxml := range exporttomusicxmls {
		backRepoExportToMusicxml.CommitPhaseOneInstance(exporttomusicxml)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, exporttomusicxml := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr {
		if _, ok := stage.ExportToMusicxmls[exporttomusicxml]; !ok {
			backRepoExportToMusicxml.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoExportToMusicxml.CommitDeleteInstance commits deletion of ExportToMusicxml to the BackRepo
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CommitDeleteInstance(id uint) (Error error) {

	exporttomusicxml := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr[id]

	// exporttomusicxml is not staged anymore, remove exporttomusicxmlDB
	exporttomusicxmlDB := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[id]
	db, _ := backRepoExportToMusicxml.db.Unscoped()
	_, err := db.Delete(exporttomusicxmlDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID, exporttomusicxml)
	delete(backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr, id)
	delete(backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB, id)

	return
}

// BackRepoExportToMusicxml.CommitPhaseOneInstance commits exporttomusicxml staged instances of ExportToMusicxml to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CommitPhaseOneInstance(exporttomusicxml *models.ExportToMusicxml) (Error error) {

	// check if the exporttomusicxml is not commited yet
	if _, ok := backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml]; ok {
		return
	}

	// initiate exporttomusicxml
	var exporttomusicxmlDB ExportToMusicxmlDB
	exporttomusicxmlDB.CopyBasicFieldsFromExportToMusicxml(exporttomusicxml)

	_, err := backRepoExportToMusicxml.db.Create(&exporttomusicxmlDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml] = exporttomusicxmlDB.ID
	backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr[exporttomusicxmlDB.ID] = exporttomusicxml
	backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[exporttomusicxmlDB.ID] = &exporttomusicxmlDB

	return
}

// BackRepoExportToMusicxml.CommitPhaseTwo commits all staged instances of ExportToMusicxml to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, exporttomusicxml := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr {
		backRepoExportToMusicxml.CommitPhaseTwoInstance(backRepo, idx, exporttomusicxml)
	}

	return
}

// BackRepoExportToMusicxml.CommitPhaseTwoInstance commits {{structname }} of models.ExportToMusicxml to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, exporttomusicxml *models.ExportToMusicxml) (Error error) {

	// fetch matching exporttomusicxmlDB
	if exporttomusicxmlDB, ok := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[idx]; ok {

		exporttomusicxmlDB.CopyBasicFieldsFromExportToMusicxml(exporttomusicxml)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value exporttomusicxml.Parameter translates to updating the exporttomusicxml.ParameterID
		exporttomusicxmlDB.ParameterID.Valid = true // allow for a 0 value (nil association)
		if exporttomusicxml.Parameter != nil {
			if ParameterId, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[exporttomusicxml.Parameter]; ok {
				exporttomusicxmlDB.ParameterID.Int64 = int64(ParameterId)
				exporttomusicxmlDB.ParameterID.Valid = true
			}
		} else {
			exporttomusicxmlDB.ParameterID.Int64 = 0
			exporttomusicxmlDB.ParameterID.Valid = true
		}

		_, err := backRepoExportToMusicxml.db.Save(exporttomusicxmlDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ExportToMusicxml intance %s", exporttomusicxml.Name))
		return err
	}

	return
}

// BackRepoExportToMusicxml.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CheckoutPhaseOne() (Error error) {

	exporttomusicxmlDBArray := make([]ExportToMusicxmlDB, 0)
	_, err := backRepoExportToMusicxml.db.Find(&exporttomusicxmlDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	exporttomusicxmlInstancesToBeRemovedFromTheStage := make(map[*models.ExportToMusicxml]any)
	for key, value := range backRepoExportToMusicxml.stage.ExportToMusicxmls {
		exporttomusicxmlInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, exporttomusicxmlDB := range exporttomusicxmlDBArray {
		backRepoExportToMusicxml.CheckoutPhaseOneInstance(&exporttomusicxmlDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		exporttomusicxml, ok := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr[exporttomusicxmlDB.ID]
		if ok {
			delete(exporttomusicxmlInstancesToBeRemovedFromTheStage, exporttomusicxml)
		}
	}

	// remove from stage and back repo's 3 maps all exporttomusicxmls that are not in the checkout
	for exporttomusicxml := range exporttomusicxmlInstancesToBeRemovedFromTheStage {
		exporttomusicxml.Unstage(backRepoExportToMusicxml.GetStage())

		// remove instance from the back repo 3 maps
		exporttomusicxmlID := backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml]
		delete(backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID, exporttomusicxml)
		delete(backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB, exporttomusicxmlID)
		delete(backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr, exporttomusicxmlID)
	}

	return
}

// CheckoutPhaseOneInstance takes a exporttomusicxmlDB that has been found in the DB, updates the backRepo and stages the
// models version of the exporttomusicxmlDB
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CheckoutPhaseOneInstance(exporttomusicxmlDB *ExportToMusicxmlDB) (Error error) {

	exporttomusicxml, ok := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr[exporttomusicxmlDB.ID]
	if !ok {
		exporttomusicxml = new(models.ExportToMusicxml)

		backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr[exporttomusicxmlDB.ID] = exporttomusicxml
		backRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml] = exporttomusicxmlDB.ID

		// append model store with the new element
		exporttomusicxml.Name = exporttomusicxmlDB.Name_Data.String
		exporttomusicxml.Stage(backRepoExportToMusicxml.GetStage())
	}
	exporttomusicxmlDB.CopyBasicFieldsToExportToMusicxml(exporttomusicxml)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	exporttomusicxml.Stage(backRepoExportToMusicxml.GetStage())

	// preserve pointer to exporttomusicxmlDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ExportToMusicxmlDBID_ExportToMusicxmlDB)[exporttomusicxmlDB hold variable pointers
	exporttomusicxmlDB_Data := *exporttomusicxmlDB
	preservedPtrToExportToMusicxml := &exporttomusicxmlDB_Data
	backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[exporttomusicxmlDB.ID] = preservedPtrToExportToMusicxml

	return
}

// BackRepoExportToMusicxml.CheckoutPhaseTwo Checkouts all staged instances of ExportToMusicxml to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, exporttomusicxmlDB := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB {
		backRepoExportToMusicxml.CheckoutPhaseTwoInstance(backRepo, exporttomusicxmlDB)
	}
	return
}

// BackRepoExportToMusicxml.CheckoutPhaseTwoInstance Checkouts staged instances of ExportToMusicxml to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, exporttomusicxmlDB *ExportToMusicxmlDB) (Error error) {

	exporttomusicxml := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr[exporttomusicxmlDB.ID]

	exporttomusicxmlDB.DecodePointers(backRepo, exporttomusicxml)

	return
}

func (exporttomusicxmlDB *ExportToMusicxmlDB) DecodePointers(backRepo *BackRepoStruct, exporttomusicxml *models.ExportToMusicxml) {

	// insertion point for checkout of pointer encoding
	// Parameter field	
	{
		id := exporttomusicxmlDB.ParameterID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoParameter.Map_ParameterDBID_ParameterPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: exporttomusicxml.Parameter, unknown pointer id", id)
				exporttomusicxml.Parameter = nil
			} else {
				// updates only if field has changed
				if exporttomusicxml.Parameter == nil || exporttomusicxml.Parameter != tmp {
					exporttomusicxml.Parameter = tmp
				}
			}
		} else {
			exporttomusicxml.Parameter = nil
		}
	}
	
	return
}

// CommitExportToMusicxml allows commit of a single exporttomusicxml (if already staged)
func (backRepo *BackRepoStruct) CommitExportToMusicxml(exporttomusicxml *models.ExportToMusicxml) {
	backRepo.BackRepoExportToMusicxml.CommitPhaseOneInstance(exporttomusicxml)
	if id, ok := backRepo.BackRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml]; ok {
		backRepo.BackRepoExportToMusicxml.CommitPhaseTwoInstance(backRepo, id, exporttomusicxml)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitExportToMusicxml allows checkout of a single exporttomusicxml (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutExportToMusicxml(exporttomusicxml *models.ExportToMusicxml) {
	// check if the exporttomusicxml is staged
	if _, ok := backRepo.BackRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml]; ok {

		if id, ok := backRepo.BackRepoExportToMusicxml.Map_ExportToMusicxmlPtr_ExportToMusicxmlDBID[exporttomusicxml]; ok {
			var exporttomusicxmlDB ExportToMusicxmlDB
			exporttomusicxmlDB.ID = id

			if _, err := backRepo.BackRepoExportToMusicxml.db.First(&exporttomusicxmlDB, id); err != nil {
				log.Fatalln("CheckoutExportToMusicxml : Problem with getting object with id:", id)
			}
			backRepo.BackRepoExportToMusicxml.CheckoutPhaseOneInstance(&exporttomusicxmlDB)
			backRepo.BackRepoExportToMusicxml.CheckoutPhaseTwoInstance(backRepo, &exporttomusicxmlDB)
		}
	}
}

// CopyBasicFieldsFromExportToMusicxml
func (exporttomusicxmlDB *ExportToMusicxmlDB) CopyBasicFieldsFromExportToMusicxml(exporttomusicxml *models.ExportToMusicxml) {
	// insertion point for fields commit

	exporttomusicxmlDB.Name_Data.String = exporttomusicxml.Name
	exporttomusicxmlDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromExportToMusicxml_WOP
func (exporttomusicxmlDB *ExportToMusicxmlDB) CopyBasicFieldsFromExportToMusicxml_WOP(exporttomusicxml *models.ExportToMusicxml_WOP) {
	// insertion point for fields commit

	exporttomusicxmlDB.Name_Data.String = exporttomusicxml.Name
	exporttomusicxmlDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromExportToMusicxmlWOP
func (exporttomusicxmlDB *ExportToMusicxmlDB) CopyBasicFieldsFromExportToMusicxmlWOP(exporttomusicxml *ExportToMusicxmlWOP) {
	// insertion point for fields commit

	exporttomusicxmlDB.Name_Data.String = exporttomusicxml.Name
	exporttomusicxmlDB.Name_Data.Valid = true
}

// CopyBasicFieldsToExportToMusicxml
func (exporttomusicxmlDB *ExportToMusicxmlDB) CopyBasicFieldsToExportToMusicxml(exporttomusicxml *models.ExportToMusicxml) {
	// insertion point for checkout of basic fields (back repo to stage)
	exporttomusicxml.Name = exporttomusicxmlDB.Name_Data.String
}

// CopyBasicFieldsToExportToMusicxml_WOP
func (exporttomusicxmlDB *ExportToMusicxmlDB) CopyBasicFieldsToExportToMusicxml_WOP(exporttomusicxml *models.ExportToMusicxml_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	exporttomusicxml.Name = exporttomusicxmlDB.Name_Data.String
}

// CopyBasicFieldsToExportToMusicxmlWOP
func (exporttomusicxmlDB *ExportToMusicxmlDB) CopyBasicFieldsToExportToMusicxmlWOP(exporttomusicxml *ExportToMusicxmlWOP) {
	exporttomusicxml.ID = int(exporttomusicxmlDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	exporttomusicxml.Name = exporttomusicxmlDB.Name_Data.String
}

// Backup generates a json file from a slice of all ExportToMusicxmlDB instances in the backrepo
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ExportToMusicxmlDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ExportToMusicxmlDB, 0)
	for _, exporttomusicxmlDB := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB {
		forBackup = append(forBackup, exporttomusicxmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ExportToMusicxml ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ExportToMusicxml file", err.Error())
	}
}

// Backup generates a json file from a slice of all ExportToMusicxmlDB instances in the backrepo
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ExportToMusicxmlDB, 0)
	for _, exporttomusicxmlDB := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB {
		forBackup = append(forBackup, exporttomusicxmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ExportToMusicxml")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ExportToMusicxml_Fields, -1)
	for _, exporttomusicxmlDB := range forBackup {

		var exporttomusicxmlWOP ExportToMusicxmlWOP
		exporttomusicxmlDB.CopyBasicFieldsToExportToMusicxmlWOP(&exporttomusicxmlWOP)

		row := sh.AddRow()
		row.WriteStruct(&exporttomusicxmlWOP, -1)
	}
}

// RestoreXL from the "ExportToMusicxml" sheet all ExportToMusicxmlDB instances
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoExportToMusicxmlid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ExportToMusicxml"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoExportToMusicxml.rowVisitorExportToMusicxml)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) rowVisitorExportToMusicxml(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var exporttomusicxmlWOP ExportToMusicxmlWOP
		row.ReadStruct(&exporttomusicxmlWOP)

		// add the unmarshalled struct to the stage
		exporttomusicxmlDB := new(ExportToMusicxmlDB)
		exporttomusicxmlDB.CopyBasicFieldsFromExportToMusicxmlWOP(&exporttomusicxmlWOP)

		exporttomusicxmlDB_ID_atBackupTime := exporttomusicxmlDB.ID
		exporttomusicxmlDB.ID = 0
		_, err := backRepoExportToMusicxml.db.Create(exporttomusicxmlDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[exporttomusicxmlDB.ID] = exporttomusicxmlDB
		BackRepoExportToMusicxmlid_atBckpTime_newID[exporttomusicxmlDB_ID_atBackupTime] = exporttomusicxmlDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ExportToMusicxmlDB.json" in dirPath that stores an array
// of ExportToMusicxmlDB and stores it in the database
// the map BackRepoExportToMusicxmlid_atBckpTime_newID is updated accordingly
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoExportToMusicxmlid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ExportToMusicxmlDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ExportToMusicxml file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ExportToMusicxmlDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ExportToMusicxmlDBID_ExportToMusicxmlDB
	for _, exporttomusicxmlDB := range forRestore {

		exporttomusicxmlDB_ID_atBackupTime := exporttomusicxmlDB.ID
		exporttomusicxmlDB.ID = 0
		_, err := backRepoExportToMusicxml.db.Create(exporttomusicxmlDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[exporttomusicxmlDB.ID] = exporttomusicxmlDB
		BackRepoExportToMusicxmlid_atBckpTime_newID[exporttomusicxmlDB_ID_atBackupTime] = exporttomusicxmlDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ExportToMusicxml file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ExportToMusicxml>id_atBckpTime_newID
// to compute new index
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) RestorePhaseTwo() {

	for _, exporttomusicxmlDB := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB {

		// next line of code is to avert unused variable compilation error
		_ = exporttomusicxmlDB

		// insertion point for reindexing pointers encoding
		// reindexing Parameter field
		if exporttomusicxmlDB.ParameterID.Int64 != 0 {
			exporttomusicxmlDB.ParameterID.Int64 = int64(BackRepoParameterid_atBckpTime_newID[uint(exporttomusicxmlDB.ParameterID.Int64)])
			exporttomusicxmlDB.ParameterID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoExportToMusicxml.db.Model(exporttomusicxmlDB)
		_, err := db.Updates(*exporttomusicxmlDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoExportToMusicxml.ResetReversePointers commits all staged instances of ExportToMusicxml to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, exporttomusicxml := range backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlPtr {
		backRepoExportToMusicxml.ResetReversePointersInstance(backRepo, idx, exporttomusicxml)
	}

	return
}

func (backRepoExportToMusicxml *BackRepoExportToMusicxmlStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, exporttomusicxml *models.ExportToMusicxml) (Error error) {

	// fetch matching exporttomusicxmlDB
	if exporttomusicxmlDB, ok := backRepoExportToMusicxml.Map_ExportToMusicxmlDBID_ExportToMusicxmlDB[idx]; ok {
		_ = exporttomusicxmlDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoExportToMusicxmlid_atBckpTime_newID map[uint]uint
