// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_HorizontalAxis_sql sql.NullBool
var dummy_HorizontalAxis_time time.Duration
var dummy_HorizontalAxis_sort sort.Float64Slice

// HorizontalAxisAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model horizontalaxisAPI
type HorizontalAxisAPI struct {
	gorm.Model

	models.HorizontalAxis_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	HorizontalAxisPointersEncoding HorizontalAxisPointersEncoding
}

// HorizontalAxisPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HorizontalAxisPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// HorizontalAxisDB describes a horizontalaxis in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model horizontalaxisDB
type HorizontalAxisDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field horizontalaxisDB.Name
	Name_Data sql.NullString

	// Declation for basic field horizontalaxisDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field horizontalaxisDB.AxisHandleBorderLength
	AxisHandleBorderLength_Data sql.NullFloat64

	// Declation for basic field horizontalaxisDB.Axis_Length
	Axis_Length_Data sql.NullFloat64

	// Declation for basic field horizontalaxisDB.Color
	Color_Data sql.NullString

	// Declation for basic field horizontalaxisDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field horizontalaxisDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field horizontalaxisDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field horizontalaxisDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field horizontalaxisDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field horizontalaxisDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field horizontalaxisDB.Transform
	Transform_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	HorizontalAxisPointersEncoding
}

// HorizontalAxisDBs arrays horizontalaxisDBs
// swagger:response horizontalaxisDBsResponse
type HorizontalAxisDBs []HorizontalAxisDB

// HorizontalAxisDBResponse provides response
// swagger:response horizontalaxisDBResponse
type HorizontalAxisDBResponse struct {
	HorizontalAxisDB
}

// HorizontalAxisWOP is a HorizontalAxis without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HorizontalAxisWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	AxisHandleBorderLength float64 `xlsx:"3"`

	Axis_Length float64 `xlsx:"4"`

	Color string `xlsx:"5"`

	FillOpacity float64 `xlsx:"6"`

	Stroke string `xlsx:"7"`

	StrokeOpacity float64 `xlsx:"8"`

	StrokeWidth float64 `xlsx:"9"`

	StrokeDashArray string `xlsx:"10"`

	StrokeDashArrayWhenSelected string `xlsx:"11"`

	Transform string `xlsx:"12"`
	// insertion for WOP pointer fields
}

var HorizontalAxis_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"AxisHandleBorderLength",
	"Axis_Length",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoHorizontalAxisStruct struct {
	// stores HorizontalAxisDB according to their gorm ID
	Map_HorizontalAxisDBID_HorizontalAxisDB map[uint]*HorizontalAxisDB

	// stores HorizontalAxisDB ID according to HorizontalAxis address
	Map_HorizontalAxisPtr_HorizontalAxisDBID map[*models.HorizontalAxis]uint

	// stores HorizontalAxis according to their gorm ID
	Map_HorizontalAxisDBID_HorizontalAxisPtr map[uint]*models.HorizontalAxis

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHorizontalAxis.stage
	return
}

func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) GetDB() *gorm.DB {
	return backRepoHorizontalAxis.db
}

// GetHorizontalAxisDBFromHorizontalAxisPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) GetHorizontalAxisDBFromHorizontalAxisPtr(horizontalaxis *models.HorizontalAxis) (horizontalaxisDB *HorizontalAxisDB) {
	id := backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis]
	horizontalaxisDB = backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[id]
	return
}

// BackRepoHorizontalAxis.CommitPhaseOne commits all staged instances of HorizontalAxis to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for horizontalaxis := range stage.HorizontalAxiss {
		backRepoHorizontalAxis.CommitPhaseOneInstance(horizontalaxis)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, horizontalaxis := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr {
		if _, ok := stage.HorizontalAxiss[horizontalaxis]; !ok {
			backRepoHorizontalAxis.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHorizontalAxis.CommitDeleteInstance commits deletion of HorizontalAxis to the BackRepo
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CommitDeleteInstance(id uint) (Error error) {

	horizontalaxis := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[id]

	// horizontalaxis is not staged anymore, remove horizontalaxisDB
	horizontalaxisDB := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[id]
	query := backRepoHorizontalAxis.db.Unscoped().Delete(&horizontalaxisDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID, horizontalaxis)
	delete(backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr, id)
	delete(backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB, id)

	return
}

// BackRepoHorizontalAxis.CommitPhaseOneInstance commits horizontalaxis staged instances of HorizontalAxis to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CommitPhaseOneInstance(horizontalaxis *models.HorizontalAxis) (Error error) {

	// check if the horizontalaxis is not commited yet
	if _, ok := backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis]; ok {
		return
	}

	// initiate horizontalaxis
	var horizontalaxisDB HorizontalAxisDB
	horizontalaxisDB.CopyBasicFieldsFromHorizontalAxis(horizontalaxis)

	query := backRepoHorizontalAxis.db.Create(&horizontalaxisDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis] = horizontalaxisDB.ID
	backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[horizontalaxisDB.ID] = horizontalaxis
	backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[horizontalaxisDB.ID] = &horizontalaxisDB

	return
}

// BackRepoHorizontalAxis.CommitPhaseTwo commits all staged instances of HorizontalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, horizontalaxis := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr {
		backRepoHorizontalAxis.CommitPhaseTwoInstance(backRepo, idx, horizontalaxis)
	}

	return
}

// BackRepoHorizontalAxis.CommitPhaseTwoInstance commits {{structname }} of models.HorizontalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, horizontalaxis *models.HorizontalAxis) (Error error) {

	// fetch matching horizontalaxisDB
	if horizontalaxisDB, ok := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[idx]; ok {

		horizontalaxisDB.CopyBasicFieldsFromHorizontalAxis(horizontalaxis)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value horizontalaxis.ShapeCategory translates to updating the horizontalaxis.ShapeCategoryID
		horizontalaxisDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if horizontalaxis.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[horizontalaxis.ShapeCategory]; ok {
				horizontalaxisDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				horizontalaxisDB.ShapeCategoryID.Valid = true
			}
		} else {
			horizontalaxisDB.ShapeCategoryID.Int64 = 0
			horizontalaxisDB.ShapeCategoryID.Valid = true
		}

		query := backRepoHorizontalAxis.db.Save(&horizontalaxisDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown HorizontalAxis intance %s", horizontalaxis.Name))
		return err
	}

	return
}

// BackRepoHorizontalAxis.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CheckoutPhaseOne() (Error error) {

	horizontalaxisDBArray := make([]HorizontalAxisDB, 0)
	query := backRepoHorizontalAxis.db.Find(&horizontalaxisDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	horizontalaxisInstancesToBeRemovedFromTheStage := make(map[*models.HorizontalAxis]any)
	for key, value := range backRepoHorizontalAxis.stage.HorizontalAxiss {
		horizontalaxisInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, horizontalaxisDB := range horizontalaxisDBArray {
		backRepoHorizontalAxis.CheckoutPhaseOneInstance(&horizontalaxisDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		horizontalaxis, ok := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[horizontalaxisDB.ID]
		if ok {
			delete(horizontalaxisInstancesToBeRemovedFromTheStage, horizontalaxis)
		}
	}

	// remove from stage and back repo's 3 maps all horizontalaxiss that are not in the checkout
	for horizontalaxis := range horizontalaxisInstancesToBeRemovedFromTheStage {
		horizontalaxis.Unstage(backRepoHorizontalAxis.GetStage())

		// remove instance from the back repo 3 maps
		horizontalaxisID := backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis]
		delete(backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID, horizontalaxis)
		delete(backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB, horizontalaxisID)
		delete(backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr, horizontalaxisID)
	}

	return
}

// CheckoutPhaseOneInstance takes a horizontalaxisDB that has been found in the DB, updates the backRepo and stages the
// models version of the horizontalaxisDB
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CheckoutPhaseOneInstance(horizontalaxisDB *HorizontalAxisDB) (Error error) {

	horizontalaxis, ok := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[horizontalaxisDB.ID]
	if !ok {
		horizontalaxis = new(models.HorizontalAxis)

		backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[horizontalaxisDB.ID] = horizontalaxis
		backRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis] = horizontalaxisDB.ID

		// append model store with the new element
		horizontalaxis.Name = horizontalaxisDB.Name_Data.String
		horizontalaxis.Stage(backRepoHorizontalAxis.GetStage())
	}
	horizontalaxisDB.CopyBasicFieldsToHorizontalAxis(horizontalaxis)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	horizontalaxis.Stage(backRepoHorizontalAxis.GetStage())

	// preserve pointer to horizontalaxisDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HorizontalAxisDBID_HorizontalAxisDB)[horizontalaxisDB hold variable pointers
	horizontalaxisDB_Data := *horizontalaxisDB
	preservedPtrToHorizontalAxis := &horizontalaxisDB_Data
	backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[horizontalaxisDB.ID] = preservedPtrToHorizontalAxis

	return
}

// BackRepoHorizontalAxis.CheckoutPhaseTwo Checkouts all staged instances of HorizontalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, horizontalaxisDB := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB {
		backRepoHorizontalAxis.CheckoutPhaseTwoInstance(backRepo, horizontalaxisDB)
	}
	return
}

// BackRepoHorizontalAxis.CheckoutPhaseTwoInstance Checkouts staged instances of HorizontalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, horizontalaxisDB *HorizontalAxisDB) (Error error) {

	horizontalaxis := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[horizontalaxisDB.ID]

	horizontalaxisDB.DecodePointers(backRepo, horizontalaxis)

	return
}

func (horizontalaxisDB *HorizontalAxisDB) DecodePointers(backRepo *BackRepoStruct, horizontalaxis *models.HorizontalAxis) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field
	horizontalaxis.ShapeCategory = nil
	if horizontalaxisDB.ShapeCategoryID.Int64 != 0 {
		horizontalaxis.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(horizontalaxisDB.ShapeCategoryID.Int64)]
	}
	return
}

// CommitHorizontalAxis allows commit of a single horizontalaxis (if already staged)
func (backRepo *BackRepoStruct) CommitHorizontalAxis(horizontalaxis *models.HorizontalAxis) {
	backRepo.BackRepoHorizontalAxis.CommitPhaseOneInstance(horizontalaxis)
	if id, ok := backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis]; ok {
		backRepo.BackRepoHorizontalAxis.CommitPhaseTwoInstance(backRepo, id, horizontalaxis)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHorizontalAxis allows checkout of a single horizontalaxis (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHorizontalAxis(horizontalaxis *models.HorizontalAxis) {
	// check if the horizontalaxis is staged
	if _, ok := backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis]; ok {

		if id, ok := backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[horizontalaxis]; ok {
			var horizontalaxisDB HorizontalAxisDB
			horizontalaxisDB.ID = id

			if err := backRepo.BackRepoHorizontalAxis.db.First(&horizontalaxisDB, id).Error; err != nil {
				log.Fatalln("CheckoutHorizontalAxis : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHorizontalAxis.CheckoutPhaseOneInstance(&horizontalaxisDB)
			backRepo.BackRepoHorizontalAxis.CheckoutPhaseTwoInstance(backRepo, &horizontalaxisDB)
		}
	}
}

// CopyBasicFieldsFromHorizontalAxis
func (horizontalaxisDB *HorizontalAxisDB) CopyBasicFieldsFromHorizontalAxis(horizontalaxis *models.HorizontalAxis) {
	// insertion point for fields commit

	horizontalaxisDB.Name_Data.String = horizontalaxis.Name
	horizontalaxisDB.Name_Data.Valid = true

	horizontalaxisDB.IsDisplayed_Data.Bool = horizontalaxis.IsDisplayed
	horizontalaxisDB.IsDisplayed_Data.Valid = true

	horizontalaxisDB.AxisHandleBorderLength_Data.Float64 = horizontalaxis.AxisHandleBorderLength
	horizontalaxisDB.AxisHandleBorderLength_Data.Valid = true

	horizontalaxisDB.Axis_Length_Data.Float64 = horizontalaxis.Axis_Length
	horizontalaxisDB.Axis_Length_Data.Valid = true

	horizontalaxisDB.Color_Data.String = horizontalaxis.Color
	horizontalaxisDB.Color_Data.Valid = true

	horizontalaxisDB.FillOpacity_Data.Float64 = horizontalaxis.FillOpacity
	horizontalaxisDB.FillOpacity_Data.Valid = true

	horizontalaxisDB.Stroke_Data.String = horizontalaxis.Stroke
	horizontalaxisDB.Stroke_Data.Valid = true

	horizontalaxisDB.StrokeOpacity_Data.Float64 = horizontalaxis.StrokeOpacity
	horizontalaxisDB.StrokeOpacity_Data.Valid = true

	horizontalaxisDB.StrokeWidth_Data.Float64 = horizontalaxis.StrokeWidth
	horizontalaxisDB.StrokeWidth_Data.Valid = true

	horizontalaxisDB.StrokeDashArray_Data.String = horizontalaxis.StrokeDashArray
	horizontalaxisDB.StrokeDashArray_Data.Valid = true

	horizontalaxisDB.StrokeDashArrayWhenSelected_Data.String = horizontalaxis.StrokeDashArrayWhenSelected
	horizontalaxisDB.StrokeDashArrayWhenSelected_Data.Valid = true

	horizontalaxisDB.Transform_Data.String = horizontalaxis.Transform
	horizontalaxisDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromHorizontalAxis_WOP
func (horizontalaxisDB *HorizontalAxisDB) CopyBasicFieldsFromHorizontalAxis_WOP(horizontalaxis *models.HorizontalAxis_WOP) {
	// insertion point for fields commit

	horizontalaxisDB.Name_Data.String = horizontalaxis.Name
	horizontalaxisDB.Name_Data.Valid = true

	horizontalaxisDB.IsDisplayed_Data.Bool = horizontalaxis.IsDisplayed
	horizontalaxisDB.IsDisplayed_Data.Valid = true

	horizontalaxisDB.AxisHandleBorderLength_Data.Float64 = horizontalaxis.AxisHandleBorderLength
	horizontalaxisDB.AxisHandleBorderLength_Data.Valid = true

	horizontalaxisDB.Axis_Length_Data.Float64 = horizontalaxis.Axis_Length
	horizontalaxisDB.Axis_Length_Data.Valid = true

	horizontalaxisDB.Color_Data.String = horizontalaxis.Color
	horizontalaxisDB.Color_Data.Valid = true

	horizontalaxisDB.FillOpacity_Data.Float64 = horizontalaxis.FillOpacity
	horizontalaxisDB.FillOpacity_Data.Valid = true

	horizontalaxisDB.Stroke_Data.String = horizontalaxis.Stroke
	horizontalaxisDB.Stroke_Data.Valid = true

	horizontalaxisDB.StrokeOpacity_Data.Float64 = horizontalaxis.StrokeOpacity
	horizontalaxisDB.StrokeOpacity_Data.Valid = true

	horizontalaxisDB.StrokeWidth_Data.Float64 = horizontalaxis.StrokeWidth
	horizontalaxisDB.StrokeWidth_Data.Valid = true

	horizontalaxisDB.StrokeDashArray_Data.String = horizontalaxis.StrokeDashArray
	horizontalaxisDB.StrokeDashArray_Data.Valid = true

	horizontalaxisDB.StrokeDashArrayWhenSelected_Data.String = horizontalaxis.StrokeDashArrayWhenSelected
	horizontalaxisDB.StrokeDashArrayWhenSelected_Data.Valid = true

	horizontalaxisDB.Transform_Data.String = horizontalaxis.Transform
	horizontalaxisDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromHorizontalAxisWOP
func (horizontalaxisDB *HorizontalAxisDB) CopyBasicFieldsFromHorizontalAxisWOP(horizontalaxis *HorizontalAxisWOP) {
	// insertion point for fields commit

	horizontalaxisDB.Name_Data.String = horizontalaxis.Name
	horizontalaxisDB.Name_Data.Valid = true

	horizontalaxisDB.IsDisplayed_Data.Bool = horizontalaxis.IsDisplayed
	horizontalaxisDB.IsDisplayed_Data.Valid = true

	horizontalaxisDB.AxisHandleBorderLength_Data.Float64 = horizontalaxis.AxisHandleBorderLength
	horizontalaxisDB.AxisHandleBorderLength_Data.Valid = true

	horizontalaxisDB.Axis_Length_Data.Float64 = horizontalaxis.Axis_Length
	horizontalaxisDB.Axis_Length_Data.Valid = true

	horizontalaxisDB.Color_Data.String = horizontalaxis.Color
	horizontalaxisDB.Color_Data.Valid = true

	horizontalaxisDB.FillOpacity_Data.Float64 = horizontalaxis.FillOpacity
	horizontalaxisDB.FillOpacity_Data.Valid = true

	horizontalaxisDB.Stroke_Data.String = horizontalaxis.Stroke
	horizontalaxisDB.Stroke_Data.Valid = true

	horizontalaxisDB.StrokeOpacity_Data.Float64 = horizontalaxis.StrokeOpacity
	horizontalaxisDB.StrokeOpacity_Data.Valid = true

	horizontalaxisDB.StrokeWidth_Data.Float64 = horizontalaxis.StrokeWidth
	horizontalaxisDB.StrokeWidth_Data.Valid = true

	horizontalaxisDB.StrokeDashArray_Data.String = horizontalaxis.StrokeDashArray
	horizontalaxisDB.StrokeDashArray_Data.Valid = true

	horizontalaxisDB.StrokeDashArrayWhenSelected_Data.String = horizontalaxis.StrokeDashArrayWhenSelected
	horizontalaxisDB.StrokeDashArrayWhenSelected_Data.Valid = true

	horizontalaxisDB.Transform_Data.String = horizontalaxis.Transform
	horizontalaxisDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToHorizontalAxis
func (horizontalaxisDB *HorizontalAxisDB) CopyBasicFieldsToHorizontalAxis(horizontalaxis *models.HorizontalAxis) {
	// insertion point for checkout of basic fields (back repo to stage)
	horizontalaxis.Name = horizontalaxisDB.Name_Data.String
	horizontalaxis.IsDisplayed = horizontalaxisDB.IsDisplayed_Data.Bool
	horizontalaxis.AxisHandleBorderLength = horizontalaxisDB.AxisHandleBorderLength_Data.Float64
	horizontalaxis.Axis_Length = horizontalaxisDB.Axis_Length_Data.Float64
	horizontalaxis.Color = horizontalaxisDB.Color_Data.String
	horizontalaxis.FillOpacity = horizontalaxisDB.FillOpacity_Data.Float64
	horizontalaxis.Stroke = horizontalaxisDB.Stroke_Data.String
	horizontalaxis.StrokeOpacity = horizontalaxisDB.StrokeOpacity_Data.Float64
	horizontalaxis.StrokeWidth = horizontalaxisDB.StrokeWidth_Data.Float64
	horizontalaxis.StrokeDashArray = horizontalaxisDB.StrokeDashArray_Data.String
	horizontalaxis.StrokeDashArrayWhenSelected = horizontalaxisDB.StrokeDashArrayWhenSelected_Data.String
	horizontalaxis.Transform = horizontalaxisDB.Transform_Data.String
}

// CopyBasicFieldsToHorizontalAxis_WOP
func (horizontalaxisDB *HorizontalAxisDB) CopyBasicFieldsToHorizontalAxis_WOP(horizontalaxis *models.HorizontalAxis_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	horizontalaxis.Name = horizontalaxisDB.Name_Data.String
	horizontalaxis.IsDisplayed = horizontalaxisDB.IsDisplayed_Data.Bool
	horizontalaxis.AxisHandleBorderLength = horizontalaxisDB.AxisHandleBorderLength_Data.Float64
	horizontalaxis.Axis_Length = horizontalaxisDB.Axis_Length_Data.Float64
	horizontalaxis.Color = horizontalaxisDB.Color_Data.String
	horizontalaxis.FillOpacity = horizontalaxisDB.FillOpacity_Data.Float64
	horizontalaxis.Stroke = horizontalaxisDB.Stroke_Data.String
	horizontalaxis.StrokeOpacity = horizontalaxisDB.StrokeOpacity_Data.Float64
	horizontalaxis.StrokeWidth = horizontalaxisDB.StrokeWidth_Data.Float64
	horizontalaxis.StrokeDashArray = horizontalaxisDB.StrokeDashArray_Data.String
	horizontalaxis.StrokeDashArrayWhenSelected = horizontalaxisDB.StrokeDashArrayWhenSelected_Data.String
	horizontalaxis.Transform = horizontalaxisDB.Transform_Data.String
}

// CopyBasicFieldsToHorizontalAxisWOP
func (horizontalaxisDB *HorizontalAxisDB) CopyBasicFieldsToHorizontalAxisWOP(horizontalaxis *HorizontalAxisWOP) {
	horizontalaxis.ID = int(horizontalaxisDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	horizontalaxis.Name = horizontalaxisDB.Name_Data.String
	horizontalaxis.IsDisplayed = horizontalaxisDB.IsDisplayed_Data.Bool
	horizontalaxis.AxisHandleBorderLength = horizontalaxisDB.AxisHandleBorderLength_Data.Float64
	horizontalaxis.Axis_Length = horizontalaxisDB.Axis_Length_Data.Float64
	horizontalaxis.Color = horizontalaxisDB.Color_Data.String
	horizontalaxis.FillOpacity = horizontalaxisDB.FillOpacity_Data.Float64
	horizontalaxis.Stroke = horizontalaxisDB.Stroke_Data.String
	horizontalaxis.StrokeOpacity = horizontalaxisDB.StrokeOpacity_Data.Float64
	horizontalaxis.StrokeWidth = horizontalaxisDB.StrokeWidth_Data.Float64
	horizontalaxis.StrokeDashArray = horizontalaxisDB.StrokeDashArray_Data.String
	horizontalaxis.StrokeDashArrayWhenSelected = horizontalaxisDB.StrokeDashArrayWhenSelected_Data.String
	horizontalaxis.Transform = horizontalaxisDB.Transform_Data.String
}

// Backup generates a json file from a slice of all HorizontalAxisDB instances in the backrepo
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HorizontalAxisDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HorizontalAxisDB, 0)
	for _, horizontalaxisDB := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB {
		forBackup = append(forBackup, horizontalaxisDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json HorizontalAxis ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json HorizontalAxis file", err.Error())
	}
}

// Backup generates a json file from a slice of all HorizontalAxisDB instances in the backrepo
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HorizontalAxisDB, 0)
	for _, horizontalaxisDB := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB {
		forBackup = append(forBackup, horizontalaxisDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("HorizontalAxis")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&HorizontalAxis_Fields, -1)
	for _, horizontalaxisDB := range forBackup {

		var horizontalaxisWOP HorizontalAxisWOP
		horizontalaxisDB.CopyBasicFieldsToHorizontalAxisWOP(&horizontalaxisWOP)

		row := sh.AddRow()
		row.WriteStruct(&horizontalaxisWOP, -1)
	}
}

// RestoreXL from the "HorizontalAxis" sheet all HorizontalAxisDB instances
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHorizontalAxisid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["HorizontalAxis"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHorizontalAxis.rowVisitorHorizontalAxis)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) rowVisitorHorizontalAxis(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var horizontalaxisWOP HorizontalAxisWOP
		row.ReadStruct(&horizontalaxisWOP)

		// add the unmarshalled struct to the stage
		horizontalaxisDB := new(HorizontalAxisDB)
		horizontalaxisDB.CopyBasicFieldsFromHorizontalAxisWOP(&horizontalaxisWOP)

		horizontalaxisDB_ID_atBackupTime := horizontalaxisDB.ID
		horizontalaxisDB.ID = 0
		query := backRepoHorizontalAxis.db.Create(horizontalaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[horizontalaxisDB.ID] = horizontalaxisDB
		BackRepoHorizontalAxisid_atBckpTime_newID[horizontalaxisDB_ID_atBackupTime] = horizontalaxisDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HorizontalAxisDB.json" in dirPath that stores an array
// of HorizontalAxisDB and stores it in the database
// the map BackRepoHorizontalAxisid_atBckpTime_newID is updated accordingly
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHorizontalAxisid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HorizontalAxisDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json HorizontalAxis file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HorizontalAxisDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HorizontalAxisDBID_HorizontalAxisDB
	for _, horizontalaxisDB := range forRestore {

		horizontalaxisDB_ID_atBackupTime := horizontalaxisDB.ID
		horizontalaxisDB.ID = 0
		query := backRepoHorizontalAxis.db.Create(horizontalaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[horizontalaxisDB.ID] = horizontalaxisDB
		BackRepoHorizontalAxisid_atBckpTime_newID[horizontalaxisDB_ID_atBackupTime] = horizontalaxisDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json HorizontalAxis file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<HorizontalAxis>id_atBckpTime_newID
// to compute new index
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) RestorePhaseTwo() {

	for _, horizontalaxisDB := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB {

		// next line of code is to avert unused variable compilation error
		_ = horizontalaxisDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if horizontalaxisDB.ShapeCategoryID.Int64 != 0 {
			horizontalaxisDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(horizontalaxisDB.ShapeCategoryID.Int64)])
			horizontalaxisDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoHorizontalAxis.db.Model(horizontalaxisDB).Updates(*horizontalaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHorizontalAxis.ResetReversePointers commits all staged instances of HorizontalAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, horizontalaxis := range backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr {
		backRepoHorizontalAxis.ResetReversePointersInstance(backRepo, idx, horizontalaxis)
	}

	return
}

func (backRepoHorizontalAxis *BackRepoHorizontalAxisStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, horizontalaxis *models.HorizontalAxis) (Error error) {

	// fetch matching horizontalaxisDB
	if horizontalaxisDB, ok := backRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisDB[idx]; ok {
		_ = horizontalaxisDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHorizontalAxisid_atBckpTime_newID map[uint]uint
