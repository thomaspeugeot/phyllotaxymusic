// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CircleGrid_sql sql.NullBool
var dummy_CircleGrid_time time.Duration
var dummy_CircleGrid_sort sort.Float64Slice

// CircleGridAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model circlegridAPI
type CircleGridAPI struct {
	gorm.Model

	models.CircleGrid_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CircleGridPointersEncoding CircleGridPointersEncoding
}

// CircleGridPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CircleGridPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Reference is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ReferenceID sql.NullInt64

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field Circles is a slice of pointers to another Struct (optional or 0..1)
	Circles IntSlice `gorm:"type:TEXT"`
}

// CircleGridDB describes a circlegrid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model circlegridDB
type CircleGridDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field circlegridDB.Name
	Name_Data sql.NullString

	// Declation for basic field circlegridDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CircleGridPointersEncoding
}

// CircleGridDBs arrays circlegridDBs
// swagger:response circlegridDBsResponse
type CircleGridDBs []CircleGridDB

// CircleGridDBResponse provides response
// swagger:response circlegridDBResponse
type CircleGridDBResponse struct {
	CircleGridDB
}

// CircleGridWOP is a CircleGrid without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CircleGridWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var CircleGrid_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoCircleGridStruct struct {
	// stores CircleGridDB according to their gorm ID
	Map_CircleGridDBID_CircleGridDB map[uint]*CircleGridDB

	// stores CircleGridDB ID according to CircleGrid address
	Map_CircleGridPtr_CircleGridDBID map[*models.CircleGrid]uint

	// stores CircleGrid according to their gorm ID
	Map_CircleGridDBID_CircleGridPtr map[uint]*models.CircleGrid

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoCircleGrid *BackRepoCircleGridStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCircleGrid.stage
	return
}

func (backRepoCircleGrid *BackRepoCircleGridStruct) GetDB() db.DBInterface {
	return backRepoCircleGrid.db
}

// GetCircleGridDBFromCircleGridPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCircleGrid *BackRepoCircleGridStruct) GetCircleGridDBFromCircleGridPtr(circlegrid *models.CircleGrid) (circlegridDB *CircleGridDB) {
	id := backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid]
	circlegridDB = backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[id]
	return
}

// BackRepoCircleGrid.CommitPhaseOne commits all staged instances of CircleGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCircleGrid *BackRepoCircleGridStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var circlegrids []*models.CircleGrid
	for circlegrid := range stage.CircleGrids {
		circlegrids = append(circlegrids, circlegrid)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(circlegrids, func(i, j int) bool {
		return stage.Map_Staged_Order[circlegrids[i]] < stage.Map_Staged_Order[circlegrids[j]]
	})

	for _, circlegrid := range circlegrids {
		backRepoCircleGrid.CommitPhaseOneInstance(circlegrid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, circlegrid := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr {
		if _, ok := stage.CircleGrids[circlegrid]; !ok {
			backRepoCircleGrid.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCircleGrid.CommitDeleteInstance commits deletion of CircleGrid to the BackRepo
func (backRepoCircleGrid *BackRepoCircleGridStruct) CommitDeleteInstance(id uint) (Error error) {

	circlegrid := backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[id]

	// circlegrid is not staged anymore, remove circlegridDB
	circlegridDB := backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[id]
	db, _ := backRepoCircleGrid.db.Unscoped()
	_, err := db.Delete(circlegridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID, circlegrid)
	delete(backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr, id)
	delete(backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB, id)

	return
}

// BackRepoCircleGrid.CommitPhaseOneInstance commits circlegrid staged instances of CircleGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCircleGrid *BackRepoCircleGridStruct) CommitPhaseOneInstance(circlegrid *models.CircleGrid) (Error error) {

	// check if the circlegrid is not commited yet
	if _, ok := backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid]; ok {
		return
	}

	// initiate circlegrid
	var circlegridDB CircleGridDB
	circlegridDB.CopyBasicFieldsFromCircleGrid(circlegrid)

	_, err := backRepoCircleGrid.db.Create(&circlegridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid] = circlegridDB.ID
	backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[circlegridDB.ID] = circlegrid
	backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[circlegridDB.ID] = &circlegridDB

	return
}

// BackRepoCircleGrid.CommitPhaseTwo commits all staged instances of CircleGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircleGrid *BackRepoCircleGridStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, circlegrid := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr {
		backRepoCircleGrid.CommitPhaseTwoInstance(backRepo, idx, circlegrid)
	}

	return
}

// BackRepoCircleGrid.CommitPhaseTwoInstance commits {{structname }} of models.CircleGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircleGrid *BackRepoCircleGridStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, circlegrid *models.CircleGrid) (Error error) {

	// fetch matching circlegridDB
	if circlegridDB, ok := backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[idx]; ok {

		circlegridDB.CopyBasicFieldsFromCircleGrid(circlegrid)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value circlegrid.Reference translates to updating the circlegrid.ReferenceID
		circlegridDB.ReferenceID.Valid = true // allow for a 0 value (nil association)
		if circlegrid.Reference != nil {
			if ReferenceId, ok := backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID[circlegrid.Reference]; ok {
				circlegridDB.ReferenceID.Int64 = int64(ReferenceId)
				circlegridDB.ReferenceID.Valid = true
			}
		} else {
			circlegridDB.ReferenceID.Int64 = 0
			circlegridDB.ReferenceID.Valid = true
		}

		// commit pointer value circlegrid.ShapeCategory translates to updating the circlegrid.ShapeCategoryID
		circlegridDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if circlegrid.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[circlegrid.ShapeCategory]; ok {
				circlegridDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				circlegridDB.ShapeCategoryID.Valid = true
			}
		} else {
			circlegridDB.ShapeCategoryID.Int64 = 0
			circlegridDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		circlegridDB.CircleGridPointersEncoding.Circles = make([]int, 0)
		// 2. encode
		for _, circleAssocEnd := range circlegrid.Circles {
			circleAssocEnd_DB :=
				backRepo.BackRepoCircle.GetCircleDBFromCirclePtr(circleAssocEnd)
			
			// the stage might be inconsistant, meaning that the circleAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if circleAssocEnd_DB == nil {
				continue
			}
			
			circlegridDB.CircleGridPointersEncoding.Circles =
				append(circlegridDB.CircleGridPointersEncoding.Circles, int(circleAssocEnd_DB.ID))
		}

		_, err := backRepoCircleGrid.db.Save(circlegridDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CircleGrid intance %s", circlegrid.Name))
		return err
	}

	return
}

// BackRepoCircleGrid.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCircleGrid *BackRepoCircleGridStruct) CheckoutPhaseOne() (Error error) {

	circlegridDBArray := make([]CircleGridDB, 0)
	_, err := backRepoCircleGrid.db.Find(&circlegridDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	circlegridInstancesToBeRemovedFromTheStage := make(map[*models.CircleGrid]any)
	for key, value := range backRepoCircleGrid.stage.CircleGrids {
		circlegridInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, circlegridDB := range circlegridDBArray {
		backRepoCircleGrid.CheckoutPhaseOneInstance(&circlegridDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		circlegrid, ok := backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[circlegridDB.ID]
		if ok {
			delete(circlegridInstancesToBeRemovedFromTheStage, circlegrid)
		}
	}

	// remove from stage and back repo's 3 maps all circlegrids that are not in the checkout
	for circlegrid := range circlegridInstancesToBeRemovedFromTheStage {
		circlegrid.Unstage(backRepoCircleGrid.GetStage())

		// remove instance from the back repo 3 maps
		circlegridID := backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid]
		delete(backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID, circlegrid)
		delete(backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB, circlegridID)
		delete(backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr, circlegridID)
	}

	return
}

// CheckoutPhaseOneInstance takes a circlegridDB that has been found in the DB, updates the backRepo and stages the
// models version of the circlegridDB
func (backRepoCircleGrid *BackRepoCircleGridStruct) CheckoutPhaseOneInstance(circlegridDB *CircleGridDB) (Error error) {

	circlegrid, ok := backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[circlegridDB.ID]
	if !ok {
		circlegrid = new(models.CircleGrid)

		backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[circlegridDB.ID] = circlegrid
		backRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid] = circlegridDB.ID

		// append model store with the new element
		circlegrid.Name = circlegridDB.Name_Data.String
		circlegrid.Stage(backRepoCircleGrid.GetStage())
	}
	circlegridDB.CopyBasicFieldsToCircleGrid(circlegrid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	circlegrid.Stage(backRepoCircleGrid.GetStage())

	// preserve pointer to circlegridDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CircleGridDBID_CircleGridDB)[circlegridDB hold variable pointers
	circlegridDB_Data := *circlegridDB
	preservedPtrToCircleGrid := &circlegridDB_Data
	backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[circlegridDB.ID] = preservedPtrToCircleGrid

	return
}

// BackRepoCircleGrid.CheckoutPhaseTwo Checkouts all staged instances of CircleGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircleGrid *BackRepoCircleGridStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, circlegridDB := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB {
		backRepoCircleGrid.CheckoutPhaseTwoInstance(backRepo, circlegridDB)
	}
	return
}

// BackRepoCircleGrid.CheckoutPhaseTwoInstance Checkouts staged instances of CircleGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircleGrid *BackRepoCircleGridStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, circlegridDB *CircleGridDB) (Error error) {

	circlegrid := backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[circlegridDB.ID]

	circlegridDB.DecodePointers(backRepo, circlegrid)

	return
}

func (circlegridDB *CircleGridDB) DecodePointers(backRepo *BackRepoStruct, circlegrid *models.CircleGrid) {

	// insertion point for checkout of pointer encoding
	// Reference field	
	{
		id := circlegridDB.ReferenceID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: circlegrid.Reference, unknown pointer id", id)
				circlegrid.Reference = nil
			} else {
				// updates only if field has changed
				if circlegrid.Reference == nil || circlegrid.Reference != tmp {
					circlegrid.Reference = tmp
				}
			}
		} else {
			circlegrid.Reference = nil
		}
	}
	
	// ShapeCategory field	
	{
		id := circlegridDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: circlegrid.ShapeCategory, unknown pointer id", id)
				circlegrid.ShapeCategory = nil
			} else {
				// updates only if field has changed
				if circlegrid.ShapeCategory == nil || circlegrid.ShapeCategory != tmp {
					circlegrid.ShapeCategory = tmp
				}
			}
		} else {
			circlegrid.ShapeCategory = nil
		}
	}
	
	// This loop redeem circlegrid.Circles in the stage from the encode in the back repo
	// It parses all CircleDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	circlegrid.Circles = circlegrid.Circles[:0]
	for _, _Circleid := range circlegridDB.CircleGridPointersEncoding.Circles {
		circlegrid.Circles = append(circlegrid.Circles, backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(_Circleid)])
	}

	return
}

// CommitCircleGrid allows commit of a single circlegrid (if already staged)
func (backRepo *BackRepoStruct) CommitCircleGrid(circlegrid *models.CircleGrid) {
	backRepo.BackRepoCircleGrid.CommitPhaseOneInstance(circlegrid)
	if id, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid]; ok {
		backRepo.BackRepoCircleGrid.CommitPhaseTwoInstance(backRepo, id, circlegrid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCircleGrid allows checkout of a single circlegrid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCircleGrid(circlegrid *models.CircleGrid) {
	// check if the circlegrid is staged
	if _, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid]; ok {

		if id, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[circlegrid]; ok {
			var circlegridDB CircleGridDB
			circlegridDB.ID = id

			if _, err := backRepo.BackRepoCircleGrid.db.First(&circlegridDB, id); err != nil {
				log.Fatalln("CheckoutCircleGrid : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCircleGrid.CheckoutPhaseOneInstance(&circlegridDB)
			backRepo.BackRepoCircleGrid.CheckoutPhaseTwoInstance(backRepo, &circlegridDB)
		}
	}
}

// CopyBasicFieldsFromCircleGrid
func (circlegridDB *CircleGridDB) CopyBasicFieldsFromCircleGrid(circlegrid *models.CircleGrid) {
	// insertion point for fields commit

	circlegridDB.Name_Data.String = circlegrid.Name
	circlegridDB.Name_Data.Valid = true

	circlegridDB.IsDisplayed_Data.Bool = circlegrid.IsDisplayed
	circlegridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromCircleGrid_WOP
func (circlegridDB *CircleGridDB) CopyBasicFieldsFromCircleGrid_WOP(circlegrid *models.CircleGrid_WOP) {
	// insertion point for fields commit

	circlegridDB.Name_Data.String = circlegrid.Name
	circlegridDB.Name_Data.Valid = true

	circlegridDB.IsDisplayed_Data.Bool = circlegrid.IsDisplayed
	circlegridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromCircleGridWOP
func (circlegridDB *CircleGridDB) CopyBasicFieldsFromCircleGridWOP(circlegrid *CircleGridWOP) {
	// insertion point for fields commit

	circlegridDB.Name_Data.String = circlegrid.Name
	circlegridDB.Name_Data.Valid = true

	circlegridDB.IsDisplayed_Data.Bool = circlegrid.IsDisplayed
	circlegridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToCircleGrid
func (circlegridDB *CircleGridDB) CopyBasicFieldsToCircleGrid(circlegrid *models.CircleGrid) {
	// insertion point for checkout of basic fields (back repo to stage)
	circlegrid.Name = circlegridDB.Name_Data.String
	circlegrid.IsDisplayed = circlegridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToCircleGrid_WOP
func (circlegridDB *CircleGridDB) CopyBasicFieldsToCircleGrid_WOP(circlegrid *models.CircleGrid_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	circlegrid.Name = circlegridDB.Name_Data.String
	circlegrid.IsDisplayed = circlegridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToCircleGridWOP
func (circlegridDB *CircleGridDB) CopyBasicFieldsToCircleGridWOP(circlegrid *CircleGridWOP) {
	circlegrid.ID = int(circlegridDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	circlegrid.Name = circlegridDB.Name_Data.String
	circlegrid.IsDisplayed = circlegridDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all CircleGridDB instances in the backrepo
func (backRepoCircleGrid *BackRepoCircleGridStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CircleGridDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CircleGridDB, 0)
	for _, circlegridDB := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB {
		forBackup = append(forBackup, circlegridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CircleGrid ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CircleGrid file", err.Error())
	}
}

// Backup generates a json file from a slice of all CircleGridDB instances in the backrepo
func (backRepoCircleGrid *BackRepoCircleGridStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CircleGridDB, 0)
	for _, circlegridDB := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB {
		forBackup = append(forBackup, circlegridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CircleGrid")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CircleGrid_Fields, -1)
	for _, circlegridDB := range forBackup {

		var circlegridWOP CircleGridWOP
		circlegridDB.CopyBasicFieldsToCircleGridWOP(&circlegridWOP)

		row := sh.AddRow()
		row.WriteStruct(&circlegridWOP, -1)
	}
}

// RestoreXL from the "CircleGrid" sheet all CircleGridDB instances
func (backRepoCircleGrid *BackRepoCircleGridStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCircleGridid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CircleGrid"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCircleGrid.rowVisitorCircleGrid)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCircleGrid *BackRepoCircleGridStruct) rowVisitorCircleGrid(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var circlegridWOP CircleGridWOP
		row.ReadStruct(&circlegridWOP)

		// add the unmarshalled struct to the stage
		circlegridDB := new(CircleGridDB)
		circlegridDB.CopyBasicFieldsFromCircleGridWOP(&circlegridWOP)

		circlegridDB_ID_atBackupTime := circlegridDB.ID
		circlegridDB.ID = 0
		_, err := backRepoCircleGrid.db.Create(circlegridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[circlegridDB.ID] = circlegridDB
		BackRepoCircleGridid_atBckpTime_newID[circlegridDB_ID_atBackupTime] = circlegridDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CircleGridDB.json" in dirPath that stores an array
// of CircleGridDB and stores it in the database
// the map BackRepoCircleGridid_atBckpTime_newID is updated accordingly
func (backRepoCircleGrid *BackRepoCircleGridStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCircleGridid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CircleGridDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CircleGrid file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CircleGridDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CircleGridDBID_CircleGridDB
	for _, circlegridDB := range forRestore {

		circlegridDB_ID_atBackupTime := circlegridDB.ID
		circlegridDB.ID = 0
		_, err := backRepoCircleGrid.db.Create(circlegridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[circlegridDB.ID] = circlegridDB
		BackRepoCircleGridid_atBckpTime_newID[circlegridDB_ID_atBackupTime] = circlegridDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CircleGrid file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CircleGrid>id_atBckpTime_newID
// to compute new index
func (backRepoCircleGrid *BackRepoCircleGridStruct) RestorePhaseTwo() {

	for _, circlegridDB := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB {

		// next line of code is to avert unused variable compilation error
		_ = circlegridDB

		// insertion point for reindexing pointers encoding
		// reindexing Reference field
		if circlegridDB.ReferenceID.Int64 != 0 {
			circlegridDB.ReferenceID.Int64 = int64(BackRepoCircleid_atBckpTime_newID[uint(circlegridDB.ReferenceID.Int64)])
			circlegridDB.ReferenceID.Valid = true
		}

		// reindexing ShapeCategory field
		if circlegridDB.ShapeCategoryID.Int64 != 0 {
			circlegridDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(circlegridDB.ShapeCategoryID.Int64)])
			circlegridDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoCircleGrid.db.Model(circlegridDB)
		_, err := db.Updates(*circlegridDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoCircleGrid.ResetReversePointers commits all staged instances of CircleGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircleGrid *BackRepoCircleGridStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, circlegrid := range backRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr {
		backRepoCircleGrid.ResetReversePointersInstance(backRepo, idx, circlegrid)
	}

	return
}

func (backRepoCircleGrid *BackRepoCircleGridStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, circlegrid *models.CircleGrid) (Error error) {

	// fetch matching circlegridDB
	if circlegridDB, ok := backRepoCircleGrid.Map_CircleGridDBID_CircleGridDB[idx]; ok {
		_ = circlegridDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCircleGridid_atBckpTime_newID map[uint]uint
