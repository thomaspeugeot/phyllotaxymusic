// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SpiralOrigin_sql sql.NullBool
var dummy_SpiralOrigin_time time.Duration
var dummy_SpiralOrigin_sort sort.Float64Slice

// SpiralOriginAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spiraloriginAPI
type SpiralOriginAPI struct {
	gorm.Model

	models.SpiralOrigin_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SpiralOriginPointersEncoding SpiralOriginPointersEncoding
}

// SpiralOriginPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SpiralOriginPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// SpiralOriginDB describes a spiralorigin in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spiraloriginDB
type SpiralOriginDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spiraloriginDB.Name
	Name_Data sql.NullString

	// Declation for basic field spiraloriginDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field spiraloriginDB.Color
	Color_Data sql.NullString

	// Declation for basic field spiraloriginDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field spiraloriginDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field spiraloriginDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field spiraloriginDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field spiraloriginDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field spiraloriginDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field spiraloriginDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SpiralOriginPointersEncoding
}

// SpiralOriginDBs arrays spiraloriginDBs
// swagger:response spiraloriginDBsResponse
type SpiralOriginDBs []SpiralOriginDB

// SpiralOriginDBResponse provides response
// swagger:response spiraloriginDBResponse
type SpiralOriginDBResponse struct {
	SpiralOriginDB
}

// SpiralOriginWOP is a SpiralOrigin without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SpiralOriginWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	Color string `xlsx:"3"`

	FillOpacity float64 `xlsx:"4"`

	Stroke string `xlsx:"5"`

	StrokeOpacity float64 `xlsx:"6"`

	StrokeWidth float64 `xlsx:"7"`

	StrokeDashArray string `xlsx:"8"`

	StrokeDashArrayWhenSelected string `xlsx:"9"`

	Transform string `xlsx:"10"`
	// insertion for WOP pointer fields
}

var SpiralOrigin_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoSpiralOriginStruct struct {
	// stores SpiralOriginDB according to their gorm ID
	Map_SpiralOriginDBID_SpiralOriginDB map[uint]*SpiralOriginDB

	// stores SpiralOriginDB ID according to SpiralOrigin address
	Map_SpiralOriginPtr_SpiralOriginDBID map[*models.SpiralOrigin]uint

	// stores SpiralOrigin according to their gorm ID
	Map_SpiralOriginDBID_SpiralOriginPtr map[uint]*models.SpiralOrigin

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSpiralOrigin.stage
	return
}

func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) GetDB() db.DBInterface {
	return backRepoSpiralOrigin.db
}

// GetSpiralOriginDBFromSpiralOriginPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) GetSpiralOriginDBFromSpiralOriginPtr(spiralorigin *models.SpiralOrigin) (spiraloriginDB *SpiralOriginDB) {
	id := backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin]
	spiraloriginDB = backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[id]
	return
}

// BackRepoSpiralOrigin.CommitPhaseOne commits all staged instances of SpiralOrigin to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spiralorigin := range stage.SpiralOrigins {
		backRepoSpiralOrigin.CommitPhaseOneInstance(spiralorigin)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spiralorigin := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr {
		if _, ok := stage.SpiralOrigins[spiralorigin]; !ok {
			backRepoSpiralOrigin.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSpiralOrigin.CommitDeleteInstance commits deletion of SpiralOrigin to the BackRepo
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CommitDeleteInstance(id uint) (Error error) {

	spiralorigin := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[id]

	// spiralorigin is not staged anymore, remove spiraloriginDB
	spiraloriginDB := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[id]
	db, _ := backRepoSpiralOrigin.db.Unscoped()
	_, err := db.Delete(spiraloriginDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID, spiralorigin)
	delete(backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr, id)
	delete(backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB, id)

	return
}

// BackRepoSpiralOrigin.CommitPhaseOneInstance commits spiralorigin staged instances of SpiralOrigin to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CommitPhaseOneInstance(spiralorigin *models.SpiralOrigin) (Error error) {

	// check if the spiralorigin is not commited yet
	if _, ok := backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin]; ok {
		return
	}

	// initiate spiralorigin
	var spiraloriginDB SpiralOriginDB
	spiraloriginDB.CopyBasicFieldsFromSpiralOrigin(spiralorigin)

	_, err := backRepoSpiralOrigin.db.Create(&spiraloriginDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin] = spiraloriginDB.ID
	backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[spiraloriginDB.ID] = spiralorigin
	backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[spiraloriginDB.ID] = &spiraloriginDB

	return
}

// BackRepoSpiralOrigin.CommitPhaseTwo commits all staged instances of SpiralOrigin to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralorigin := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr {
		backRepoSpiralOrigin.CommitPhaseTwoInstance(backRepo, idx, spiralorigin)
	}

	return
}

// BackRepoSpiralOrigin.CommitPhaseTwoInstance commits {{structname }} of models.SpiralOrigin to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spiralorigin *models.SpiralOrigin) (Error error) {

	// fetch matching spiraloriginDB
	if spiraloriginDB, ok := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[idx]; ok {

		spiraloriginDB.CopyBasicFieldsFromSpiralOrigin(spiralorigin)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value spiralorigin.ShapeCategory translates to updating the spiralorigin.ShapeCategoryID
		spiraloriginDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if spiralorigin.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[spiralorigin.ShapeCategory]; ok {
				spiraloriginDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				spiraloriginDB.ShapeCategoryID.Valid = true
			}
		} else {
			spiraloriginDB.ShapeCategoryID.Int64 = 0
			spiraloriginDB.ShapeCategoryID.Valid = true
		}

		_, err := backRepoSpiralOrigin.db.Save(spiraloriginDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SpiralOrigin intance %s", spiralorigin.Name))
		return err
	}

	return
}

// BackRepoSpiralOrigin.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CheckoutPhaseOne() (Error error) {

	spiraloriginDBArray := make([]SpiralOriginDB, 0)
	_, err := backRepoSpiralOrigin.db.Find(&spiraloriginDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spiraloriginInstancesToBeRemovedFromTheStage := make(map[*models.SpiralOrigin]any)
	for key, value := range backRepoSpiralOrigin.stage.SpiralOrigins {
		spiraloriginInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spiraloriginDB := range spiraloriginDBArray {
		backRepoSpiralOrigin.CheckoutPhaseOneInstance(&spiraloriginDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spiralorigin, ok := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[spiraloriginDB.ID]
		if ok {
			delete(spiraloriginInstancesToBeRemovedFromTheStage, spiralorigin)
		}
	}

	// remove from stage and back repo's 3 maps all spiralorigins that are not in the checkout
	for spiralorigin := range spiraloriginInstancesToBeRemovedFromTheStage {
		spiralorigin.Unstage(backRepoSpiralOrigin.GetStage())

		// remove instance from the back repo 3 maps
		spiraloriginID := backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin]
		delete(backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID, spiralorigin)
		delete(backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB, spiraloriginID)
		delete(backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr, spiraloriginID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spiraloriginDB that has been found in the DB, updates the backRepo and stages the
// models version of the spiraloriginDB
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CheckoutPhaseOneInstance(spiraloriginDB *SpiralOriginDB) (Error error) {

	spiralorigin, ok := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[spiraloriginDB.ID]
	if !ok {
		spiralorigin = new(models.SpiralOrigin)

		backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[spiraloriginDB.ID] = spiralorigin
		backRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin] = spiraloriginDB.ID

		// append model store with the new element
		spiralorigin.Name = spiraloriginDB.Name_Data.String
		spiralorigin.Stage(backRepoSpiralOrigin.GetStage())
	}
	spiraloriginDB.CopyBasicFieldsToSpiralOrigin(spiralorigin)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spiralorigin.Stage(backRepoSpiralOrigin.GetStage())

	// preserve pointer to spiraloriginDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SpiralOriginDBID_SpiralOriginDB)[spiraloriginDB hold variable pointers
	spiraloriginDB_Data := *spiraloriginDB
	preservedPtrToSpiralOrigin := &spiraloriginDB_Data
	backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[spiraloriginDB.ID] = preservedPtrToSpiralOrigin

	return
}

// BackRepoSpiralOrigin.CheckoutPhaseTwo Checkouts all staged instances of SpiralOrigin to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spiraloriginDB := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB {
		backRepoSpiralOrigin.CheckoutPhaseTwoInstance(backRepo, spiraloriginDB)
	}
	return
}

// BackRepoSpiralOrigin.CheckoutPhaseTwoInstance Checkouts staged instances of SpiralOrigin to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spiraloriginDB *SpiralOriginDB) (Error error) {

	spiralorigin := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[spiraloriginDB.ID]

	spiraloriginDB.DecodePointers(backRepo, spiralorigin)

	return
}

func (spiraloriginDB *SpiralOriginDB) DecodePointers(backRepo *BackRepoStruct, spiralorigin *models.SpiralOrigin) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field
	spiralorigin.ShapeCategory = nil
	if spiraloriginDB.ShapeCategoryID.Int64 != 0 {
		spiralorigin.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(spiraloriginDB.ShapeCategoryID.Int64)]
	}
	return
}

// CommitSpiralOrigin allows commit of a single spiralorigin (if already staged)
func (backRepo *BackRepoStruct) CommitSpiralOrigin(spiralorigin *models.SpiralOrigin) {
	backRepo.BackRepoSpiralOrigin.CommitPhaseOneInstance(spiralorigin)
	if id, ok := backRepo.BackRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin]; ok {
		backRepo.BackRepoSpiralOrigin.CommitPhaseTwoInstance(backRepo, id, spiralorigin)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSpiralOrigin allows checkout of a single spiralorigin (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSpiralOrigin(spiralorigin *models.SpiralOrigin) {
	// check if the spiralorigin is staged
	if _, ok := backRepo.BackRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin]; ok {

		if id, ok := backRepo.BackRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[spiralorigin]; ok {
			var spiraloriginDB SpiralOriginDB
			spiraloriginDB.ID = id

			if _, err := backRepo.BackRepoSpiralOrigin.db.First(&spiraloriginDB, id); err != nil {
				log.Fatalln("CheckoutSpiralOrigin : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSpiralOrigin.CheckoutPhaseOneInstance(&spiraloriginDB)
			backRepo.BackRepoSpiralOrigin.CheckoutPhaseTwoInstance(backRepo, &spiraloriginDB)
		}
	}
}

// CopyBasicFieldsFromSpiralOrigin
func (spiraloriginDB *SpiralOriginDB) CopyBasicFieldsFromSpiralOrigin(spiralorigin *models.SpiralOrigin) {
	// insertion point for fields commit

	spiraloriginDB.Name_Data.String = spiralorigin.Name
	spiraloriginDB.Name_Data.Valid = true

	spiraloriginDB.IsDisplayed_Data.Bool = spiralorigin.IsDisplayed
	spiraloriginDB.IsDisplayed_Data.Valid = true

	spiraloriginDB.Color_Data.String = spiralorigin.Color
	spiraloriginDB.Color_Data.Valid = true

	spiraloriginDB.FillOpacity_Data.Float64 = spiralorigin.FillOpacity
	spiraloriginDB.FillOpacity_Data.Valid = true

	spiraloriginDB.Stroke_Data.String = spiralorigin.Stroke
	spiraloriginDB.Stroke_Data.Valid = true

	spiraloriginDB.StrokeOpacity_Data.Float64 = spiralorigin.StrokeOpacity
	spiraloriginDB.StrokeOpacity_Data.Valid = true

	spiraloriginDB.StrokeWidth_Data.Float64 = spiralorigin.StrokeWidth
	spiraloriginDB.StrokeWidth_Data.Valid = true

	spiraloriginDB.StrokeDashArray_Data.String = spiralorigin.StrokeDashArray
	spiraloriginDB.StrokeDashArray_Data.Valid = true

	spiraloriginDB.StrokeDashArrayWhenSelected_Data.String = spiralorigin.StrokeDashArrayWhenSelected
	spiraloriginDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiraloriginDB.Transform_Data.String = spiralorigin.Transform
	spiraloriginDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromSpiralOrigin_WOP
func (spiraloriginDB *SpiralOriginDB) CopyBasicFieldsFromSpiralOrigin_WOP(spiralorigin *models.SpiralOrigin_WOP) {
	// insertion point for fields commit

	spiraloriginDB.Name_Data.String = spiralorigin.Name
	spiraloriginDB.Name_Data.Valid = true

	spiraloriginDB.IsDisplayed_Data.Bool = spiralorigin.IsDisplayed
	spiraloriginDB.IsDisplayed_Data.Valid = true

	spiraloriginDB.Color_Data.String = spiralorigin.Color
	spiraloriginDB.Color_Data.Valid = true

	spiraloriginDB.FillOpacity_Data.Float64 = spiralorigin.FillOpacity
	spiraloriginDB.FillOpacity_Data.Valid = true

	spiraloriginDB.Stroke_Data.String = spiralorigin.Stroke
	spiraloriginDB.Stroke_Data.Valid = true

	spiraloriginDB.StrokeOpacity_Data.Float64 = spiralorigin.StrokeOpacity
	spiraloriginDB.StrokeOpacity_Data.Valid = true

	spiraloriginDB.StrokeWidth_Data.Float64 = spiralorigin.StrokeWidth
	spiraloriginDB.StrokeWidth_Data.Valid = true

	spiraloriginDB.StrokeDashArray_Data.String = spiralorigin.StrokeDashArray
	spiraloriginDB.StrokeDashArray_Data.Valid = true

	spiraloriginDB.StrokeDashArrayWhenSelected_Data.String = spiralorigin.StrokeDashArrayWhenSelected
	spiraloriginDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiraloriginDB.Transform_Data.String = spiralorigin.Transform
	spiraloriginDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromSpiralOriginWOP
func (spiraloriginDB *SpiralOriginDB) CopyBasicFieldsFromSpiralOriginWOP(spiralorigin *SpiralOriginWOP) {
	// insertion point for fields commit

	spiraloriginDB.Name_Data.String = spiralorigin.Name
	spiraloriginDB.Name_Data.Valid = true

	spiraloriginDB.IsDisplayed_Data.Bool = spiralorigin.IsDisplayed
	spiraloriginDB.IsDisplayed_Data.Valid = true

	spiraloriginDB.Color_Data.String = spiralorigin.Color
	spiraloriginDB.Color_Data.Valid = true

	spiraloriginDB.FillOpacity_Data.Float64 = spiralorigin.FillOpacity
	spiraloriginDB.FillOpacity_Data.Valid = true

	spiraloriginDB.Stroke_Data.String = spiralorigin.Stroke
	spiraloriginDB.Stroke_Data.Valid = true

	spiraloriginDB.StrokeOpacity_Data.Float64 = spiralorigin.StrokeOpacity
	spiraloriginDB.StrokeOpacity_Data.Valid = true

	spiraloriginDB.StrokeWidth_Data.Float64 = spiralorigin.StrokeWidth
	spiraloriginDB.StrokeWidth_Data.Valid = true

	spiraloriginDB.StrokeDashArray_Data.String = spiralorigin.StrokeDashArray
	spiraloriginDB.StrokeDashArray_Data.Valid = true

	spiraloriginDB.StrokeDashArrayWhenSelected_Data.String = spiralorigin.StrokeDashArrayWhenSelected
	spiraloriginDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiraloriginDB.Transform_Data.String = spiralorigin.Transform
	spiraloriginDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToSpiralOrigin
func (spiraloriginDB *SpiralOriginDB) CopyBasicFieldsToSpiralOrigin(spiralorigin *models.SpiralOrigin) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralorigin.Name = spiraloriginDB.Name_Data.String
	spiralorigin.IsDisplayed = spiraloriginDB.IsDisplayed_Data.Bool
	spiralorigin.Color = spiraloriginDB.Color_Data.String
	spiralorigin.FillOpacity = spiraloriginDB.FillOpacity_Data.Float64
	spiralorigin.Stroke = spiraloriginDB.Stroke_Data.String
	spiralorigin.StrokeOpacity = spiraloriginDB.StrokeOpacity_Data.Float64
	spiralorigin.StrokeWidth = spiraloriginDB.StrokeWidth_Data.Float64
	spiralorigin.StrokeDashArray = spiraloriginDB.StrokeDashArray_Data.String
	spiralorigin.StrokeDashArrayWhenSelected = spiraloriginDB.StrokeDashArrayWhenSelected_Data.String
	spiralorigin.Transform = spiraloriginDB.Transform_Data.String
}

// CopyBasicFieldsToSpiralOrigin_WOP
func (spiraloriginDB *SpiralOriginDB) CopyBasicFieldsToSpiralOrigin_WOP(spiralorigin *models.SpiralOrigin_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralorigin.Name = spiraloriginDB.Name_Data.String
	spiralorigin.IsDisplayed = spiraloriginDB.IsDisplayed_Data.Bool
	spiralorigin.Color = spiraloriginDB.Color_Data.String
	spiralorigin.FillOpacity = spiraloriginDB.FillOpacity_Data.Float64
	spiralorigin.Stroke = spiraloriginDB.Stroke_Data.String
	spiralorigin.StrokeOpacity = spiraloriginDB.StrokeOpacity_Data.Float64
	spiralorigin.StrokeWidth = spiraloriginDB.StrokeWidth_Data.Float64
	spiralorigin.StrokeDashArray = spiraloriginDB.StrokeDashArray_Data.String
	spiralorigin.StrokeDashArrayWhenSelected = spiraloriginDB.StrokeDashArrayWhenSelected_Data.String
	spiralorigin.Transform = spiraloriginDB.Transform_Data.String
}

// CopyBasicFieldsToSpiralOriginWOP
func (spiraloriginDB *SpiralOriginDB) CopyBasicFieldsToSpiralOriginWOP(spiralorigin *SpiralOriginWOP) {
	spiralorigin.ID = int(spiraloriginDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spiralorigin.Name = spiraloriginDB.Name_Data.String
	spiralorigin.IsDisplayed = spiraloriginDB.IsDisplayed_Data.Bool
	spiralorigin.Color = spiraloriginDB.Color_Data.String
	spiralorigin.FillOpacity = spiraloriginDB.FillOpacity_Data.Float64
	spiralorigin.Stroke = spiraloriginDB.Stroke_Data.String
	spiralorigin.StrokeOpacity = spiraloriginDB.StrokeOpacity_Data.Float64
	spiralorigin.StrokeWidth = spiraloriginDB.StrokeWidth_Data.Float64
	spiralorigin.StrokeDashArray = spiraloriginDB.StrokeDashArray_Data.String
	spiralorigin.StrokeDashArrayWhenSelected = spiraloriginDB.StrokeDashArrayWhenSelected_Data.String
	spiralorigin.Transform = spiraloriginDB.Transform_Data.String
}

// Backup generates a json file from a slice of all SpiralOriginDB instances in the backrepo
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SpiralOriginDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralOriginDB, 0)
	for _, spiraloriginDB := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB {
		forBackup = append(forBackup, spiraloriginDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SpiralOrigin ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SpiralOrigin file", err.Error())
	}
}

// Backup generates a json file from a slice of all SpiralOriginDB instances in the backrepo
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralOriginDB, 0)
	for _, spiraloriginDB := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB {
		forBackup = append(forBackup, spiraloriginDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SpiralOrigin")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SpiralOrigin_Fields, -1)
	for _, spiraloriginDB := range forBackup {

		var spiraloriginWOP SpiralOriginWOP
		spiraloriginDB.CopyBasicFieldsToSpiralOriginWOP(&spiraloriginWOP)

		row := sh.AddRow()
		row.WriteStruct(&spiraloriginWOP, -1)
	}
}

// RestoreXL from the "SpiralOrigin" sheet all SpiralOriginDB instances
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSpiralOriginid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SpiralOrigin"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSpiralOrigin.rowVisitorSpiralOrigin)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) rowVisitorSpiralOrigin(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spiraloriginWOP SpiralOriginWOP
		row.ReadStruct(&spiraloriginWOP)

		// add the unmarshalled struct to the stage
		spiraloriginDB := new(SpiralOriginDB)
		spiraloriginDB.CopyBasicFieldsFromSpiralOriginWOP(&spiraloriginWOP)

		spiraloriginDB_ID_atBackupTime := spiraloriginDB.ID
		spiraloriginDB.ID = 0
		_, err := backRepoSpiralOrigin.db.Create(spiraloriginDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[spiraloriginDB.ID] = spiraloriginDB
		BackRepoSpiralOriginid_atBckpTime_newID[spiraloriginDB_ID_atBackupTime] = spiraloriginDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SpiralOriginDB.json" in dirPath that stores an array
// of SpiralOriginDB and stores it in the database
// the map BackRepoSpiralOriginid_atBckpTime_newID is updated accordingly
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSpiralOriginid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SpiralOriginDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SpiralOrigin file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SpiralOriginDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SpiralOriginDBID_SpiralOriginDB
	for _, spiraloriginDB := range forRestore {

		spiraloriginDB_ID_atBackupTime := spiraloriginDB.ID
		spiraloriginDB.ID = 0
		_, err := backRepoSpiralOrigin.db.Create(spiraloriginDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[spiraloriginDB.ID] = spiraloriginDB
		BackRepoSpiralOriginid_atBckpTime_newID[spiraloriginDB_ID_atBackupTime] = spiraloriginDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SpiralOrigin file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SpiralOrigin>id_atBckpTime_newID
// to compute new index
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) RestorePhaseTwo() {

	for _, spiraloriginDB := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB {

		// next line of code is to avert unused variable compilation error
		_ = spiraloriginDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if spiraloriginDB.ShapeCategoryID.Int64 != 0 {
			spiraloriginDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(spiraloriginDB.ShapeCategoryID.Int64)])
			spiraloriginDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSpiralOrigin.db.Model(spiraloriginDB)
		_, err := db.Updates(*spiraloriginDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSpiralOrigin.ResetReversePointers commits all staged instances of SpiralOrigin to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralorigin := range backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr {
		backRepoSpiralOrigin.ResetReversePointersInstance(backRepo, idx, spiralorigin)
	}

	return
}

func (backRepoSpiralOrigin *BackRepoSpiralOriginStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spiralorigin *models.SpiralOrigin) (Error error) {

	// fetch matching spiraloriginDB
	if spiraloriginDB, ok := backRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginDB[idx]; ok {
		_ = spiraloriginDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSpiralOriginid_atBckpTime_newID map[uint]uint
