// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SpiralRhombus_sql sql.NullBool
var dummy_SpiralRhombus_time time.Duration
var dummy_SpiralRhombus_sort sort.Float64Slice

// SpiralRhombusAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spiralrhombusAPI
type SpiralRhombusAPI struct {
	gorm.Model

	models.SpiralRhombus_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SpiralRhombusPointersEncoding SpiralRhombusPointersEncoding
}

// SpiralRhombusPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SpiralRhombusPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// SpiralRhombusDB describes a spiralrhombus in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spiralrhombusDB
type SpiralRhombusDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spiralrhombusDB.Name
	Name_Data sql.NullString

	// Declation for basic field spiralrhombusDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field spiralrhombusDB.X_r0
	X_r0_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.Y_r0
	Y_r0_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.X_r1
	X_r1_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.Y_r1
	Y_r1_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.X_r2
	X_r2_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.Y_r2
	Y_r2_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.X_r3
	X_r3_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.Y_r3
	Y_r3_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.Color
	Color_Data sql.NullString

	// Declation for basic field spiralrhombusDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field spiralrhombusDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field spiralrhombusDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field spiralrhombusDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field spiralrhombusDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SpiralRhombusPointersEncoding
}

// SpiralRhombusDBs arrays spiralrhombusDBs
// swagger:response spiralrhombusDBsResponse
type SpiralRhombusDBs []SpiralRhombusDB

// SpiralRhombusDBResponse provides response
// swagger:response spiralrhombusDBResponse
type SpiralRhombusDBResponse struct {
	SpiralRhombusDB
}

// SpiralRhombusWOP is a SpiralRhombus without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SpiralRhombusWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	X_r0 float64 `xlsx:"3"`

	Y_r0 float64 `xlsx:"4"`

	X_r1 float64 `xlsx:"5"`

	Y_r1 float64 `xlsx:"6"`

	X_r2 float64 `xlsx:"7"`

	Y_r2 float64 `xlsx:"8"`

	X_r3 float64 `xlsx:"9"`

	Y_r3 float64 `xlsx:"10"`

	Color string `xlsx:"11"`

	FillOpacity float64 `xlsx:"12"`

	Stroke string `xlsx:"13"`

	StrokeOpacity float64 `xlsx:"14"`

	StrokeWidth float64 `xlsx:"15"`

	StrokeDashArray string `xlsx:"16"`

	StrokeDashArrayWhenSelected string `xlsx:"17"`

	Transform string `xlsx:"18"`
	// insertion for WOP pointer fields
}

var SpiralRhombus_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"X_r0",
	"Y_r0",
	"X_r1",
	"Y_r1",
	"X_r2",
	"Y_r2",
	"X_r3",
	"Y_r3",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoSpiralRhombusStruct struct {
	// stores SpiralRhombusDB according to their gorm ID
	Map_SpiralRhombusDBID_SpiralRhombusDB map[uint]*SpiralRhombusDB

	// stores SpiralRhombusDB ID according to SpiralRhombus address
	Map_SpiralRhombusPtr_SpiralRhombusDBID map[*models.SpiralRhombus]uint

	// stores SpiralRhombus according to their gorm ID
	Map_SpiralRhombusDBID_SpiralRhombusPtr map[uint]*models.SpiralRhombus

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSpiralRhombus.stage
	return
}

func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) GetDB() db.DBInterface {
	return backRepoSpiralRhombus.db
}

// GetSpiralRhombusDBFromSpiralRhombusPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) GetSpiralRhombusDBFromSpiralRhombusPtr(spiralrhombus *models.SpiralRhombus) (spiralrhombusDB *SpiralRhombusDB) {
	id := backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus]
	spiralrhombusDB = backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[id]
	return
}

// BackRepoSpiralRhombus.CommitPhaseOne commits all staged instances of SpiralRhombus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spiralrhombus := range stage.SpiralRhombuss {
		backRepoSpiralRhombus.CommitPhaseOneInstance(spiralrhombus)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spiralrhombus := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr {
		if _, ok := stage.SpiralRhombuss[spiralrhombus]; !ok {
			backRepoSpiralRhombus.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSpiralRhombus.CommitDeleteInstance commits deletion of SpiralRhombus to the BackRepo
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CommitDeleteInstance(id uint) (Error error) {

	spiralrhombus := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[id]

	// spiralrhombus is not staged anymore, remove spiralrhombusDB
	spiralrhombusDB := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[id]
	db, _ := backRepoSpiralRhombus.db.Unscoped()
	_, err := db.Delete(spiralrhombusDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID, spiralrhombus)
	delete(backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr, id)
	delete(backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB, id)

	return
}

// BackRepoSpiralRhombus.CommitPhaseOneInstance commits spiralrhombus staged instances of SpiralRhombus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CommitPhaseOneInstance(spiralrhombus *models.SpiralRhombus) (Error error) {

	// check if the spiralrhombus is not commited yet
	if _, ok := backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus]; ok {
		return
	}

	// initiate spiralrhombus
	var spiralrhombusDB SpiralRhombusDB
	spiralrhombusDB.CopyBasicFieldsFromSpiralRhombus(spiralrhombus)

	_, err := backRepoSpiralRhombus.db.Create(&spiralrhombusDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus] = spiralrhombusDB.ID
	backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[spiralrhombusDB.ID] = spiralrhombus
	backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[spiralrhombusDB.ID] = &spiralrhombusDB

	return
}

// BackRepoSpiralRhombus.CommitPhaseTwo commits all staged instances of SpiralRhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralrhombus := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr {
		backRepoSpiralRhombus.CommitPhaseTwoInstance(backRepo, idx, spiralrhombus)
	}

	return
}

// BackRepoSpiralRhombus.CommitPhaseTwoInstance commits {{structname }} of models.SpiralRhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spiralrhombus *models.SpiralRhombus) (Error error) {

	// fetch matching spiralrhombusDB
	if spiralrhombusDB, ok := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[idx]; ok {

		spiralrhombusDB.CopyBasicFieldsFromSpiralRhombus(spiralrhombus)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value spiralrhombus.ShapeCategory translates to updating the spiralrhombus.ShapeCategoryID
		spiralrhombusDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if spiralrhombus.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[spiralrhombus.ShapeCategory]; ok {
				spiralrhombusDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				spiralrhombusDB.ShapeCategoryID.Valid = true
			}
		} else {
			spiralrhombusDB.ShapeCategoryID.Int64 = 0
			spiralrhombusDB.ShapeCategoryID.Valid = true
		}

		_, err := backRepoSpiralRhombus.db.Save(spiralrhombusDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SpiralRhombus intance %s", spiralrhombus.Name))
		return err
	}

	return
}

// BackRepoSpiralRhombus.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CheckoutPhaseOne() (Error error) {

	spiralrhombusDBArray := make([]SpiralRhombusDB, 0)
	_, err := backRepoSpiralRhombus.db.Find(&spiralrhombusDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spiralrhombusInstancesToBeRemovedFromTheStage := make(map[*models.SpiralRhombus]any)
	for key, value := range backRepoSpiralRhombus.stage.SpiralRhombuss {
		spiralrhombusInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spiralrhombusDB := range spiralrhombusDBArray {
		backRepoSpiralRhombus.CheckoutPhaseOneInstance(&spiralrhombusDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spiralrhombus, ok := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[spiralrhombusDB.ID]
		if ok {
			delete(spiralrhombusInstancesToBeRemovedFromTheStage, spiralrhombus)
		}
	}

	// remove from stage and back repo's 3 maps all spiralrhombuss that are not in the checkout
	for spiralrhombus := range spiralrhombusInstancesToBeRemovedFromTheStage {
		spiralrhombus.Unstage(backRepoSpiralRhombus.GetStage())

		// remove instance from the back repo 3 maps
		spiralrhombusID := backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus]
		delete(backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID, spiralrhombus)
		delete(backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB, spiralrhombusID)
		delete(backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr, spiralrhombusID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spiralrhombusDB that has been found in the DB, updates the backRepo and stages the
// models version of the spiralrhombusDB
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CheckoutPhaseOneInstance(spiralrhombusDB *SpiralRhombusDB) (Error error) {

	spiralrhombus, ok := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[spiralrhombusDB.ID]
	if !ok {
		spiralrhombus = new(models.SpiralRhombus)

		backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[spiralrhombusDB.ID] = spiralrhombus
		backRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus] = spiralrhombusDB.ID

		// append model store with the new element
		spiralrhombus.Name = spiralrhombusDB.Name_Data.String
		spiralrhombus.Stage(backRepoSpiralRhombus.GetStage())
	}
	spiralrhombusDB.CopyBasicFieldsToSpiralRhombus(spiralrhombus)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spiralrhombus.Stage(backRepoSpiralRhombus.GetStage())

	// preserve pointer to spiralrhombusDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SpiralRhombusDBID_SpiralRhombusDB)[spiralrhombusDB hold variable pointers
	spiralrhombusDB_Data := *spiralrhombusDB
	preservedPtrToSpiralRhombus := &spiralrhombusDB_Data
	backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[spiralrhombusDB.ID] = preservedPtrToSpiralRhombus

	return
}

// BackRepoSpiralRhombus.CheckoutPhaseTwo Checkouts all staged instances of SpiralRhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spiralrhombusDB := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB {
		backRepoSpiralRhombus.CheckoutPhaseTwoInstance(backRepo, spiralrhombusDB)
	}
	return
}

// BackRepoSpiralRhombus.CheckoutPhaseTwoInstance Checkouts staged instances of SpiralRhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spiralrhombusDB *SpiralRhombusDB) (Error error) {

	spiralrhombus := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[spiralrhombusDB.ID]

	spiralrhombusDB.DecodePointers(backRepo, spiralrhombus)

	return
}

func (spiralrhombusDB *SpiralRhombusDB) DecodePointers(backRepo *BackRepoStruct, spiralrhombus *models.SpiralRhombus) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := spiralrhombusDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: spiralrhombus.ShapeCategory, unknown pointer id", id)
			}

			// updates only if field has changed
			if spiralrhombus.ShapeCategory == nil || spiralrhombus.ShapeCategory != tmp {
				spiralrhombus.ShapeCategory = tmp
			}
		} else {
			spiralrhombus.ShapeCategory = nil
		}
	}
	
	return
}

// CommitSpiralRhombus allows commit of a single spiralrhombus (if already staged)
func (backRepo *BackRepoStruct) CommitSpiralRhombus(spiralrhombus *models.SpiralRhombus) {
	backRepo.BackRepoSpiralRhombus.CommitPhaseOneInstance(spiralrhombus)
	if id, ok := backRepo.BackRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus]; ok {
		backRepo.BackRepoSpiralRhombus.CommitPhaseTwoInstance(backRepo, id, spiralrhombus)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSpiralRhombus allows checkout of a single spiralrhombus (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSpiralRhombus(spiralrhombus *models.SpiralRhombus) {
	// check if the spiralrhombus is staged
	if _, ok := backRepo.BackRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus]; ok {

		if id, ok := backRepo.BackRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[spiralrhombus]; ok {
			var spiralrhombusDB SpiralRhombusDB
			spiralrhombusDB.ID = id

			if _, err := backRepo.BackRepoSpiralRhombus.db.First(&spiralrhombusDB, id); err != nil {
				log.Fatalln("CheckoutSpiralRhombus : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSpiralRhombus.CheckoutPhaseOneInstance(&spiralrhombusDB)
			backRepo.BackRepoSpiralRhombus.CheckoutPhaseTwoInstance(backRepo, &spiralrhombusDB)
		}
	}
}

// CopyBasicFieldsFromSpiralRhombus
func (spiralrhombusDB *SpiralRhombusDB) CopyBasicFieldsFromSpiralRhombus(spiralrhombus *models.SpiralRhombus) {
	// insertion point for fields commit

	spiralrhombusDB.Name_Data.String = spiralrhombus.Name
	spiralrhombusDB.Name_Data.Valid = true

	spiralrhombusDB.IsDisplayed_Data.Bool = spiralrhombus.IsDisplayed
	spiralrhombusDB.IsDisplayed_Data.Valid = true

	spiralrhombusDB.X_r0_Data.Float64 = spiralrhombus.X_r0
	spiralrhombusDB.X_r0_Data.Valid = true

	spiralrhombusDB.Y_r0_Data.Float64 = spiralrhombus.Y_r0
	spiralrhombusDB.Y_r0_Data.Valid = true

	spiralrhombusDB.X_r1_Data.Float64 = spiralrhombus.X_r1
	spiralrhombusDB.X_r1_Data.Valid = true

	spiralrhombusDB.Y_r1_Data.Float64 = spiralrhombus.Y_r1
	spiralrhombusDB.Y_r1_Data.Valid = true

	spiralrhombusDB.X_r2_Data.Float64 = spiralrhombus.X_r2
	spiralrhombusDB.X_r2_Data.Valid = true

	spiralrhombusDB.Y_r2_Data.Float64 = spiralrhombus.Y_r2
	spiralrhombusDB.Y_r2_Data.Valid = true

	spiralrhombusDB.X_r3_Data.Float64 = spiralrhombus.X_r3
	spiralrhombusDB.X_r3_Data.Valid = true

	spiralrhombusDB.Y_r3_Data.Float64 = spiralrhombus.Y_r3
	spiralrhombusDB.Y_r3_Data.Valid = true

	spiralrhombusDB.Color_Data.String = spiralrhombus.Color
	spiralrhombusDB.Color_Data.Valid = true

	spiralrhombusDB.FillOpacity_Data.Float64 = spiralrhombus.FillOpacity
	spiralrhombusDB.FillOpacity_Data.Valid = true

	spiralrhombusDB.Stroke_Data.String = spiralrhombus.Stroke
	spiralrhombusDB.Stroke_Data.Valid = true

	spiralrhombusDB.StrokeOpacity_Data.Float64 = spiralrhombus.StrokeOpacity
	spiralrhombusDB.StrokeOpacity_Data.Valid = true

	spiralrhombusDB.StrokeWidth_Data.Float64 = spiralrhombus.StrokeWidth
	spiralrhombusDB.StrokeWidth_Data.Valid = true

	spiralrhombusDB.StrokeDashArray_Data.String = spiralrhombus.StrokeDashArray
	spiralrhombusDB.StrokeDashArray_Data.Valid = true

	spiralrhombusDB.StrokeDashArrayWhenSelected_Data.String = spiralrhombus.StrokeDashArrayWhenSelected
	spiralrhombusDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiralrhombusDB.Transform_Data.String = spiralrhombus.Transform
	spiralrhombusDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromSpiralRhombus_WOP
func (spiralrhombusDB *SpiralRhombusDB) CopyBasicFieldsFromSpiralRhombus_WOP(spiralrhombus *models.SpiralRhombus_WOP) {
	// insertion point for fields commit

	spiralrhombusDB.Name_Data.String = spiralrhombus.Name
	spiralrhombusDB.Name_Data.Valid = true

	spiralrhombusDB.IsDisplayed_Data.Bool = spiralrhombus.IsDisplayed
	spiralrhombusDB.IsDisplayed_Data.Valid = true

	spiralrhombusDB.X_r0_Data.Float64 = spiralrhombus.X_r0
	spiralrhombusDB.X_r0_Data.Valid = true

	spiralrhombusDB.Y_r0_Data.Float64 = spiralrhombus.Y_r0
	spiralrhombusDB.Y_r0_Data.Valid = true

	spiralrhombusDB.X_r1_Data.Float64 = spiralrhombus.X_r1
	spiralrhombusDB.X_r1_Data.Valid = true

	spiralrhombusDB.Y_r1_Data.Float64 = spiralrhombus.Y_r1
	spiralrhombusDB.Y_r1_Data.Valid = true

	spiralrhombusDB.X_r2_Data.Float64 = spiralrhombus.X_r2
	spiralrhombusDB.X_r2_Data.Valid = true

	spiralrhombusDB.Y_r2_Data.Float64 = spiralrhombus.Y_r2
	spiralrhombusDB.Y_r2_Data.Valid = true

	spiralrhombusDB.X_r3_Data.Float64 = spiralrhombus.X_r3
	spiralrhombusDB.X_r3_Data.Valid = true

	spiralrhombusDB.Y_r3_Data.Float64 = spiralrhombus.Y_r3
	spiralrhombusDB.Y_r3_Data.Valid = true

	spiralrhombusDB.Color_Data.String = spiralrhombus.Color
	spiralrhombusDB.Color_Data.Valid = true

	spiralrhombusDB.FillOpacity_Data.Float64 = spiralrhombus.FillOpacity
	spiralrhombusDB.FillOpacity_Data.Valid = true

	spiralrhombusDB.Stroke_Data.String = spiralrhombus.Stroke
	spiralrhombusDB.Stroke_Data.Valid = true

	spiralrhombusDB.StrokeOpacity_Data.Float64 = spiralrhombus.StrokeOpacity
	spiralrhombusDB.StrokeOpacity_Data.Valid = true

	spiralrhombusDB.StrokeWidth_Data.Float64 = spiralrhombus.StrokeWidth
	spiralrhombusDB.StrokeWidth_Data.Valid = true

	spiralrhombusDB.StrokeDashArray_Data.String = spiralrhombus.StrokeDashArray
	spiralrhombusDB.StrokeDashArray_Data.Valid = true

	spiralrhombusDB.StrokeDashArrayWhenSelected_Data.String = spiralrhombus.StrokeDashArrayWhenSelected
	spiralrhombusDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiralrhombusDB.Transform_Data.String = spiralrhombus.Transform
	spiralrhombusDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromSpiralRhombusWOP
func (spiralrhombusDB *SpiralRhombusDB) CopyBasicFieldsFromSpiralRhombusWOP(spiralrhombus *SpiralRhombusWOP) {
	// insertion point for fields commit

	spiralrhombusDB.Name_Data.String = spiralrhombus.Name
	spiralrhombusDB.Name_Data.Valid = true

	spiralrhombusDB.IsDisplayed_Data.Bool = spiralrhombus.IsDisplayed
	spiralrhombusDB.IsDisplayed_Data.Valid = true

	spiralrhombusDB.X_r0_Data.Float64 = spiralrhombus.X_r0
	spiralrhombusDB.X_r0_Data.Valid = true

	spiralrhombusDB.Y_r0_Data.Float64 = spiralrhombus.Y_r0
	spiralrhombusDB.Y_r0_Data.Valid = true

	spiralrhombusDB.X_r1_Data.Float64 = spiralrhombus.X_r1
	spiralrhombusDB.X_r1_Data.Valid = true

	spiralrhombusDB.Y_r1_Data.Float64 = spiralrhombus.Y_r1
	spiralrhombusDB.Y_r1_Data.Valid = true

	spiralrhombusDB.X_r2_Data.Float64 = spiralrhombus.X_r2
	spiralrhombusDB.X_r2_Data.Valid = true

	spiralrhombusDB.Y_r2_Data.Float64 = spiralrhombus.Y_r2
	spiralrhombusDB.Y_r2_Data.Valid = true

	spiralrhombusDB.X_r3_Data.Float64 = spiralrhombus.X_r3
	spiralrhombusDB.X_r3_Data.Valid = true

	spiralrhombusDB.Y_r3_Data.Float64 = spiralrhombus.Y_r3
	spiralrhombusDB.Y_r3_Data.Valid = true

	spiralrhombusDB.Color_Data.String = spiralrhombus.Color
	spiralrhombusDB.Color_Data.Valid = true

	spiralrhombusDB.FillOpacity_Data.Float64 = spiralrhombus.FillOpacity
	spiralrhombusDB.FillOpacity_Data.Valid = true

	spiralrhombusDB.Stroke_Data.String = spiralrhombus.Stroke
	spiralrhombusDB.Stroke_Data.Valid = true

	spiralrhombusDB.StrokeOpacity_Data.Float64 = spiralrhombus.StrokeOpacity
	spiralrhombusDB.StrokeOpacity_Data.Valid = true

	spiralrhombusDB.StrokeWidth_Data.Float64 = spiralrhombus.StrokeWidth
	spiralrhombusDB.StrokeWidth_Data.Valid = true

	spiralrhombusDB.StrokeDashArray_Data.String = spiralrhombus.StrokeDashArray
	spiralrhombusDB.StrokeDashArray_Data.Valid = true

	spiralrhombusDB.StrokeDashArrayWhenSelected_Data.String = spiralrhombus.StrokeDashArrayWhenSelected
	spiralrhombusDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiralrhombusDB.Transform_Data.String = spiralrhombus.Transform
	spiralrhombusDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToSpiralRhombus
func (spiralrhombusDB *SpiralRhombusDB) CopyBasicFieldsToSpiralRhombus(spiralrhombus *models.SpiralRhombus) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralrhombus.Name = spiralrhombusDB.Name_Data.String
	spiralrhombus.IsDisplayed = spiralrhombusDB.IsDisplayed_Data.Bool
	spiralrhombus.X_r0 = spiralrhombusDB.X_r0_Data.Float64
	spiralrhombus.Y_r0 = spiralrhombusDB.Y_r0_Data.Float64
	spiralrhombus.X_r1 = spiralrhombusDB.X_r1_Data.Float64
	spiralrhombus.Y_r1 = spiralrhombusDB.Y_r1_Data.Float64
	spiralrhombus.X_r2 = spiralrhombusDB.X_r2_Data.Float64
	spiralrhombus.Y_r2 = spiralrhombusDB.Y_r2_Data.Float64
	spiralrhombus.X_r3 = spiralrhombusDB.X_r3_Data.Float64
	spiralrhombus.Y_r3 = spiralrhombusDB.Y_r3_Data.Float64
	spiralrhombus.Color = spiralrhombusDB.Color_Data.String
	spiralrhombus.FillOpacity = spiralrhombusDB.FillOpacity_Data.Float64
	spiralrhombus.Stroke = spiralrhombusDB.Stroke_Data.String
	spiralrhombus.StrokeOpacity = spiralrhombusDB.StrokeOpacity_Data.Float64
	spiralrhombus.StrokeWidth = spiralrhombusDB.StrokeWidth_Data.Float64
	spiralrhombus.StrokeDashArray = spiralrhombusDB.StrokeDashArray_Data.String
	spiralrhombus.StrokeDashArrayWhenSelected = spiralrhombusDB.StrokeDashArrayWhenSelected_Data.String
	spiralrhombus.Transform = spiralrhombusDB.Transform_Data.String
}

// CopyBasicFieldsToSpiralRhombus_WOP
func (spiralrhombusDB *SpiralRhombusDB) CopyBasicFieldsToSpiralRhombus_WOP(spiralrhombus *models.SpiralRhombus_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralrhombus.Name = spiralrhombusDB.Name_Data.String
	spiralrhombus.IsDisplayed = spiralrhombusDB.IsDisplayed_Data.Bool
	spiralrhombus.X_r0 = spiralrhombusDB.X_r0_Data.Float64
	spiralrhombus.Y_r0 = spiralrhombusDB.Y_r0_Data.Float64
	spiralrhombus.X_r1 = spiralrhombusDB.X_r1_Data.Float64
	spiralrhombus.Y_r1 = spiralrhombusDB.Y_r1_Data.Float64
	spiralrhombus.X_r2 = spiralrhombusDB.X_r2_Data.Float64
	spiralrhombus.Y_r2 = spiralrhombusDB.Y_r2_Data.Float64
	spiralrhombus.X_r3 = spiralrhombusDB.X_r3_Data.Float64
	spiralrhombus.Y_r3 = spiralrhombusDB.Y_r3_Data.Float64
	spiralrhombus.Color = spiralrhombusDB.Color_Data.String
	spiralrhombus.FillOpacity = spiralrhombusDB.FillOpacity_Data.Float64
	spiralrhombus.Stroke = spiralrhombusDB.Stroke_Data.String
	spiralrhombus.StrokeOpacity = spiralrhombusDB.StrokeOpacity_Data.Float64
	spiralrhombus.StrokeWidth = spiralrhombusDB.StrokeWidth_Data.Float64
	spiralrhombus.StrokeDashArray = spiralrhombusDB.StrokeDashArray_Data.String
	spiralrhombus.StrokeDashArrayWhenSelected = spiralrhombusDB.StrokeDashArrayWhenSelected_Data.String
	spiralrhombus.Transform = spiralrhombusDB.Transform_Data.String
}

// CopyBasicFieldsToSpiralRhombusWOP
func (spiralrhombusDB *SpiralRhombusDB) CopyBasicFieldsToSpiralRhombusWOP(spiralrhombus *SpiralRhombusWOP) {
	spiralrhombus.ID = int(spiralrhombusDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spiralrhombus.Name = spiralrhombusDB.Name_Data.String
	spiralrhombus.IsDisplayed = spiralrhombusDB.IsDisplayed_Data.Bool
	spiralrhombus.X_r0 = spiralrhombusDB.X_r0_Data.Float64
	spiralrhombus.Y_r0 = spiralrhombusDB.Y_r0_Data.Float64
	spiralrhombus.X_r1 = spiralrhombusDB.X_r1_Data.Float64
	spiralrhombus.Y_r1 = spiralrhombusDB.Y_r1_Data.Float64
	spiralrhombus.X_r2 = spiralrhombusDB.X_r2_Data.Float64
	spiralrhombus.Y_r2 = spiralrhombusDB.Y_r2_Data.Float64
	spiralrhombus.X_r3 = spiralrhombusDB.X_r3_Data.Float64
	spiralrhombus.Y_r3 = spiralrhombusDB.Y_r3_Data.Float64
	spiralrhombus.Color = spiralrhombusDB.Color_Data.String
	spiralrhombus.FillOpacity = spiralrhombusDB.FillOpacity_Data.Float64
	spiralrhombus.Stroke = spiralrhombusDB.Stroke_Data.String
	spiralrhombus.StrokeOpacity = spiralrhombusDB.StrokeOpacity_Data.Float64
	spiralrhombus.StrokeWidth = spiralrhombusDB.StrokeWidth_Data.Float64
	spiralrhombus.StrokeDashArray = spiralrhombusDB.StrokeDashArray_Data.String
	spiralrhombus.StrokeDashArrayWhenSelected = spiralrhombusDB.StrokeDashArrayWhenSelected_Data.String
	spiralrhombus.Transform = spiralrhombusDB.Transform_Data.String
}

// Backup generates a json file from a slice of all SpiralRhombusDB instances in the backrepo
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SpiralRhombusDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralRhombusDB, 0)
	for _, spiralrhombusDB := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB {
		forBackup = append(forBackup, spiralrhombusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SpiralRhombus ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SpiralRhombus file", err.Error())
	}
}

// Backup generates a json file from a slice of all SpiralRhombusDB instances in the backrepo
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralRhombusDB, 0)
	for _, spiralrhombusDB := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB {
		forBackup = append(forBackup, spiralrhombusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SpiralRhombus")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SpiralRhombus_Fields, -1)
	for _, spiralrhombusDB := range forBackup {

		var spiralrhombusWOP SpiralRhombusWOP
		spiralrhombusDB.CopyBasicFieldsToSpiralRhombusWOP(&spiralrhombusWOP)

		row := sh.AddRow()
		row.WriteStruct(&spiralrhombusWOP, -1)
	}
}

// RestoreXL from the "SpiralRhombus" sheet all SpiralRhombusDB instances
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSpiralRhombusid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SpiralRhombus"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSpiralRhombus.rowVisitorSpiralRhombus)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) rowVisitorSpiralRhombus(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spiralrhombusWOP SpiralRhombusWOP
		row.ReadStruct(&spiralrhombusWOP)

		// add the unmarshalled struct to the stage
		spiralrhombusDB := new(SpiralRhombusDB)
		spiralrhombusDB.CopyBasicFieldsFromSpiralRhombusWOP(&spiralrhombusWOP)

		spiralrhombusDB_ID_atBackupTime := spiralrhombusDB.ID
		spiralrhombusDB.ID = 0
		_, err := backRepoSpiralRhombus.db.Create(spiralrhombusDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[spiralrhombusDB.ID] = spiralrhombusDB
		BackRepoSpiralRhombusid_atBckpTime_newID[spiralrhombusDB_ID_atBackupTime] = spiralrhombusDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SpiralRhombusDB.json" in dirPath that stores an array
// of SpiralRhombusDB and stores it in the database
// the map BackRepoSpiralRhombusid_atBckpTime_newID is updated accordingly
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSpiralRhombusid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SpiralRhombusDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SpiralRhombus file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SpiralRhombusDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SpiralRhombusDBID_SpiralRhombusDB
	for _, spiralrhombusDB := range forRestore {

		spiralrhombusDB_ID_atBackupTime := spiralrhombusDB.ID
		spiralrhombusDB.ID = 0
		_, err := backRepoSpiralRhombus.db.Create(spiralrhombusDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[spiralrhombusDB.ID] = spiralrhombusDB
		BackRepoSpiralRhombusid_atBckpTime_newID[spiralrhombusDB_ID_atBackupTime] = spiralrhombusDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SpiralRhombus file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SpiralRhombus>id_atBckpTime_newID
// to compute new index
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) RestorePhaseTwo() {

	for _, spiralrhombusDB := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB {

		// next line of code is to avert unused variable compilation error
		_ = spiralrhombusDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if spiralrhombusDB.ShapeCategoryID.Int64 != 0 {
			spiralrhombusDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(spiralrhombusDB.ShapeCategoryID.Int64)])
			spiralrhombusDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSpiralRhombus.db.Model(spiralrhombusDB)
		_, err := db.Updates(*spiralrhombusDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSpiralRhombus.ResetReversePointers commits all staged instances of SpiralRhombus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralrhombus := range backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr {
		backRepoSpiralRhombus.ResetReversePointersInstance(backRepo, idx, spiralrhombus)
	}

	return
}

func (backRepoSpiralRhombus *BackRepoSpiralRhombusStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spiralrhombus *models.SpiralRhombus) (Error error) {

	// fetch matching spiralrhombusDB
	if spiralrhombusDB, ok := backRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusDB[idx]; ok {
		_ = spiralrhombusDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSpiralRhombusid_atBckpTime_newID map[uint]uint
