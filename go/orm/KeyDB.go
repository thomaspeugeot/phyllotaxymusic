// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Key_sql sql.NullBool
var dummy_Key_time time.Duration
var dummy_Key_sort sort.Float64Slice

// KeyAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model keyAPI
type KeyAPI struct {
	gorm.Model

	models.Key_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	KeyPointersEncoding KeyPointersEncoding
}

// KeyPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type KeyPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// KeyDB describes a key in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model keyDB
type KeyDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field keyDB.Name
	Name_Data sql.NullString

	// Declation for basic field keyDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field keyDB.Path
	Path_Data sql.NullString

	// Declation for basic field keyDB.Color
	Color_Data sql.NullString

	// Declation for basic field keyDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field keyDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field keyDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field keyDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field keyDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field keyDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field keyDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	KeyPointersEncoding
}

// KeyDBs arrays keyDBs
// swagger:response keyDBsResponse
type KeyDBs []KeyDB

// KeyDBResponse provides response
// swagger:response keyDBResponse
type KeyDBResponse struct {
	KeyDB
}

// KeyWOP is a Key without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type KeyWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	Path string `xlsx:"3"`

	Color string `xlsx:"4"`

	FillOpacity float64 `xlsx:"5"`

	Stroke string `xlsx:"6"`

	StrokeOpacity float64 `xlsx:"7"`

	StrokeWidth float64 `xlsx:"8"`

	StrokeDashArray string `xlsx:"9"`

	StrokeDashArrayWhenSelected string `xlsx:"10"`

	Transform string `xlsx:"11"`
	// insertion for WOP pointer fields
}

var Key_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"Path",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoKeyStruct struct {
	// stores KeyDB according to their gorm ID
	Map_KeyDBID_KeyDB map[uint]*KeyDB

	// stores KeyDB ID according to Key address
	Map_KeyPtr_KeyDBID map[*models.Key]uint

	// stores Key according to their gorm ID
	Map_KeyDBID_KeyPtr map[uint]*models.Key

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoKey *BackRepoKeyStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKey.stage
	return
}

func (backRepoKey *BackRepoKeyStruct) GetDB() db.DBInterface {
	return backRepoKey.db
}

// GetKeyDBFromKeyPtr is a handy function to access the back repo instance from the stage instance
func (backRepoKey *BackRepoKeyStruct) GetKeyDBFromKeyPtr(key *models.Key) (keyDB *KeyDB) {
	id := backRepoKey.Map_KeyPtr_KeyDBID[key]
	keyDB = backRepoKey.Map_KeyDBID_KeyDB[id]
	return
}

// BackRepoKey.CommitPhaseOne commits all staged instances of Key to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKey *BackRepoKeyStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for key := range stage.Keys {
		backRepoKey.CommitPhaseOneInstance(key)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, key := range backRepoKey.Map_KeyDBID_KeyPtr {
		if _, ok := stage.Keys[key]; !ok {
			backRepoKey.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKey.CommitDeleteInstance commits deletion of Key to the BackRepo
func (backRepoKey *BackRepoKeyStruct) CommitDeleteInstance(id uint) (Error error) {

	key := backRepoKey.Map_KeyDBID_KeyPtr[id]

	// key is not staged anymore, remove keyDB
	keyDB := backRepoKey.Map_KeyDBID_KeyDB[id]
	db, _ := backRepoKey.db.Unscoped()
	_, err := db.Delete(&keyDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoKey.Map_KeyPtr_KeyDBID, key)
	delete(backRepoKey.Map_KeyDBID_KeyPtr, id)
	delete(backRepoKey.Map_KeyDBID_KeyDB, id)

	return
}

// BackRepoKey.CommitPhaseOneInstance commits key staged instances of Key to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKey *BackRepoKeyStruct) CommitPhaseOneInstance(key *models.Key) (Error error) {

	// check if the key is not commited yet
	if _, ok := backRepoKey.Map_KeyPtr_KeyDBID[key]; ok {
		return
	}

	// initiate key
	var keyDB KeyDB
	keyDB.CopyBasicFieldsFromKey(key)

	_, err := backRepoKey.db.Create(&keyDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoKey.Map_KeyPtr_KeyDBID[key] = keyDB.ID
	backRepoKey.Map_KeyDBID_KeyPtr[keyDB.ID] = key
	backRepoKey.Map_KeyDBID_KeyDB[keyDB.ID] = &keyDB

	return
}

// BackRepoKey.CommitPhaseTwo commits all staged instances of Key to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey *BackRepoKeyStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, key := range backRepoKey.Map_KeyDBID_KeyPtr {
		backRepoKey.CommitPhaseTwoInstance(backRepo, idx, key)
	}

	return
}

// BackRepoKey.CommitPhaseTwoInstance commits {{structname }} of models.Key to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey *BackRepoKeyStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, key *models.Key) (Error error) {

	// fetch matching keyDB
	if keyDB, ok := backRepoKey.Map_KeyDBID_KeyDB[idx]; ok {

		keyDB.CopyBasicFieldsFromKey(key)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value key.ShapeCategory translates to updating the key.ShapeCategoryID
		keyDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if key.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[key.ShapeCategory]; ok {
				keyDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				keyDB.ShapeCategoryID.Valid = true
			}
		} else {
			keyDB.ShapeCategoryID.Int64 = 0
			keyDB.ShapeCategoryID.Valid = true
		}

		_, err := backRepoKey.db.Save(&keyDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Key intance %s", key.Name))
		return err
	}

	return
}

// BackRepoKey.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKey *BackRepoKeyStruct) CheckoutPhaseOne() (Error error) {

	keyDBArray := make([]KeyDB, 0)
	_, err := backRepoKey.db.Find(&keyDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	keyInstancesToBeRemovedFromTheStage := make(map[*models.Key]any)
	for key, value := range backRepoKey.stage.Keys {
		keyInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, keyDB := range keyDBArray {
		backRepoKey.CheckoutPhaseOneInstance(&keyDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		key, ok := backRepoKey.Map_KeyDBID_KeyPtr[keyDB.ID]
		if ok {
			delete(keyInstancesToBeRemovedFromTheStage, key)
		}
	}

	// remove from stage and back repo's 3 maps all keys that are not in the checkout
	for key := range keyInstancesToBeRemovedFromTheStage {
		key.Unstage(backRepoKey.GetStage())

		// remove instance from the back repo 3 maps
		keyID := backRepoKey.Map_KeyPtr_KeyDBID[key]
		delete(backRepoKey.Map_KeyPtr_KeyDBID, key)
		delete(backRepoKey.Map_KeyDBID_KeyDB, keyID)
		delete(backRepoKey.Map_KeyDBID_KeyPtr, keyID)
	}

	return
}

// CheckoutPhaseOneInstance takes a keyDB that has been found in the DB, updates the backRepo and stages the
// models version of the keyDB
func (backRepoKey *BackRepoKeyStruct) CheckoutPhaseOneInstance(keyDB *KeyDB) (Error error) {

	key, ok := backRepoKey.Map_KeyDBID_KeyPtr[keyDB.ID]
	if !ok {
		key = new(models.Key)

		backRepoKey.Map_KeyDBID_KeyPtr[keyDB.ID] = key
		backRepoKey.Map_KeyPtr_KeyDBID[key] = keyDB.ID

		// append model store with the new element
		key.Name = keyDB.Name_Data.String
		key.Stage(backRepoKey.GetStage())
	}
	keyDB.CopyBasicFieldsToKey(key)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	key.Stage(backRepoKey.GetStage())

	// preserve pointer to keyDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_KeyDBID_KeyDB)[keyDB hold variable pointers
	keyDB_Data := *keyDB
	preservedPtrToKey := &keyDB_Data
	backRepoKey.Map_KeyDBID_KeyDB[keyDB.ID] = preservedPtrToKey

	return
}

// BackRepoKey.CheckoutPhaseTwo Checkouts all staged instances of Key to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey *BackRepoKeyStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, keyDB := range backRepoKey.Map_KeyDBID_KeyDB {
		backRepoKey.CheckoutPhaseTwoInstance(backRepo, keyDB)
	}
	return
}

// BackRepoKey.CheckoutPhaseTwoInstance Checkouts staged instances of Key to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey *BackRepoKeyStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, keyDB *KeyDB) (Error error) {

	key := backRepoKey.Map_KeyDBID_KeyPtr[keyDB.ID]

	keyDB.DecodePointers(backRepo, key)

	return
}

func (keyDB *KeyDB) DecodePointers(backRepo *BackRepoStruct, key *models.Key) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field
	key.ShapeCategory = nil
	if keyDB.ShapeCategoryID.Int64 != 0 {
		key.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(keyDB.ShapeCategoryID.Int64)]
	}
	return
}

// CommitKey allows commit of a single key (if already staged)
func (backRepo *BackRepoStruct) CommitKey(key *models.Key) {
	backRepo.BackRepoKey.CommitPhaseOneInstance(key)
	if id, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[key]; ok {
		backRepo.BackRepoKey.CommitPhaseTwoInstance(backRepo, id, key)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKey allows checkout of a single key (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKey(key *models.Key) {
	// check if the key is staged
	if _, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[key]; ok {

		if id, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[key]; ok {
			var keyDB KeyDB
			keyDB.ID = id

			if _, err := backRepo.BackRepoKey.db.First(&keyDB, id); err != nil {
				log.Fatalln("CheckoutKey : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKey.CheckoutPhaseOneInstance(&keyDB)
			backRepo.BackRepoKey.CheckoutPhaseTwoInstance(backRepo, &keyDB)
		}
	}
}

// CopyBasicFieldsFromKey
func (keyDB *KeyDB) CopyBasicFieldsFromKey(key *models.Key) {
	// insertion point for fields commit

	keyDB.Name_Data.String = key.Name
	keyDB.Name_Data.Valid = true

	keyDB.IsDisplayed_Data.Bool = key.IsDisplayed
	keyDB.IsDisplayed_Data.Valid = true

	keyDB.Path_Data.String = key.Path
	keyDB.Path_Data.Valid = true

	keyDB.Color_Data.String = key.Color
	keyDB.Color_Data.Valid = true

	keyDB.FillOpacity_Data.Float64 = key.FillOpacity
	keyDB.FillOpacity_Data.Valid = true

	keyDB.Stroke_Data.String = key.Stroke
	keyDB.Stroke_Data.Valid = true

	keyDB.StrokeOpacity_Data.Float64 = key.StrokeOpacity
	keyDB.StrokeOpacity_Data.Valid = true

	keyDB.StrokeWidth_Data.Float64 = key.StrokeWidth
	keyDB.StrokeWidth_Data.Valid = true

	keyDB.StrokeDashArray_Data.String = key.StrokeDashArray
	keyDB.StrokeDashArray_Data.Valid = true

	keyDB.StrokeDashArrayWhenSelected_Data.String = key.StrokeDashArrayWhenSelected
	keyDB.StrokeDashArrayWhenSelected_Data.Valid = true

	keyDB.Transform_Data.String = key.Transform
	keyDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromKey_WOP
func (keyDB *KeyDB) CopyBasicFieldsFromKey_WOP(key *models.Key_WOP) {
	// insertion point for fields commit

	keyDB.Name_Data.String = key.Name
	keyDB.Name_Data.Valid = true

	keyDB.IsDisplayed_Data.Bool = key.IsDisplayed
	keyDB.IsDisplayed_Data.Valid = true

	keyDB.Path_Data.String = key.Path
	keyDB.Path_Data.Valid = true

	keyDB.Color_Data.String = key.Color
	keyDB.Color_Data.Valid = true

	keyDB.FillOpacity_Data.Float64 = key.FillOpacity
	keyDB.FillOpacity_Data.Valid = true

	keyDB.Stroke_Data.String = key.Stroke
	keyDB.Stroke_Data.Valid = true

	keyDB.StrokeOpacity_Data.Float64 = key.StrokeOpacity
	keyDB.StrokeOpacity_Data.Valid = true

	keyDB.StrokeWidth_Data.Float64 = key.StrokeWidth
	keyDB.StrokeWidth_Data.Valid = true

	keyDB.StrokeDashArray_Data.String = key.StrokeDashArray
	keyDB.StrokeDashArray_Data.Valid = true

	keyDB.StrokeDashArrayWhenSelected_Data.String = key.StrokeDashArrayWhenSelected
	keyDB.StrokeDashArrayWhenSelected_Data.Valid = true

	keyDB.Transform_Data.String = key.Transform
	keyDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromKeyWOP
func (keyDB *KeyDB) CopyBasicFieldsFromKeyWOP(key *KeyWOP) {
	// insertion point for fields commit

	keyDB.Name_Data.String = key.Name
	keyDB.Name_Data.Valid = true

	keyDB.IsDisplayed_Data.Bool = key.IsDisplayed
	keyDB.IsDisplayed_Data.Valid = true

	keyDB.Path_Data.String = key.Path
	keyDB.Path_Data.Valid = true

	keyDB.Color_Data.String = key.Color
	keyDB.Color_Data.Valid = true

	keyDB.FillOpacity_Data.Float64 = key.FillOpacity
	keyDB.FillOpacity_Data.Valid = true

	keyDB.Stroke_Data.String = key.Stroke
	keyDB.Stroke_Data.Valid = true

	keyDB.StrokeOpacity_Data.Float64 = key.StrokeOpacity
	keyDB.StrokeOpacity_Data.Valid = true

	keyDB.StrokeWidth_Data.Float64 = key.StrokeWidth
	keyDB.StrokeWidth_Data.Valid = true

	keyDB.StrokeDashArray_Data.String = key.StrokeDashArray
	keyDB.StrokeDashArray_Data.Valid = true

	keyDB.StrokeDashArrayWhenSelected_Data.String = key.StrokeDashArrayWhenSelected
	keyDB.StrokeDashArrayWhenSelected_Data.Valid = true

	keyDB.Transform_Data.String = key.Transform
	keyDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToKey
func (keyDB *KeyDB) CopyBasicFieldsToKey(key *models.Key) {
	// insertion point for checkout of basic fields (back repo to stage)
	key.Name = keyDB.Name_Data.String
	key.IsDisplayed = keyDB.IsDisplayed_Data.Bool
	key.Path = keyDB.Path_Data.String
	key.Color = keyDB.Color_Data.String
	key.FillOpacity = keyDB.FillOpacity_Data.Float64
	key.Stroke = keyDB.Stroke_Data.String
	key.StrokeOpacity = keyDB.StrokeOpacity_Data.Float64
	key.StrokeWidth = keyDB.StrokeWidth_Data.Float64
	key.StrokeDashArray = keyDB.StrokeDashArray_Data.String
	key.StrokeDashArrayWhenSelected = keyDB.StrokeDashArrayWhenSelected_Data.String
	key.Transform = keyDB.Transform_Data.String
}

// CopyBasicFieldsToKey_WOP
func (keyDB *KeyDB) CopyBasicFieldsToKey_WOP(key *models.Key_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	key.Name = keyDB.Name_Data.String
	key.IsDisplayed = keyDB.IsDisplayed_Data.Bool
	key.Path = keyDB.Path_Data.String
	key.Color = keyDB.Color_Data.String
	key.FillOpacity = keyDB.FillOpacity_Data.Float64
	key.Stroke = keyDB.Stroke_Data.String
	key.StrokeOpacity = keyDB.StrokeOpacity_Data.Float64
	key.StrokeWidth = keyDB.StrokeWidth_Data.Float64
	key.StrokeDashArray = keyDB.StrokeDashArray_Data.String
	key.StrokeDashArrayWhenSelected = keyDB.StrokeDashArrayWhenSelected_Data.String
	key.Transform = keyDB.Transform_Data.String
}

// CopyBasicFieldsToKeyWOP
func (keyDB *KeyDB) CopyBasicFieldsToKeyWOP(key *KeyWOP) {
	key.ID = int(keyDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	key.Name = keyDB.Name_Data.String
	key.IsDisplayed = keyDB.IsDisplayed_Data.Bool
	key.Path = keyDB.Path_Data.String
	key.Color = keyDB.Color_Data.String
	key.FillOpacity = keyDB.FillOpacity_Data.Float64
	key.Stroke = keyDB.Stroke_Data.String
	key.StrokeOpacity = keyDB.StrokeOpacity_Data.Float64
	key.StrokeWidth = keyDB.StrokeWidth_Data.Float64
	key.StrokeDashArray = keyDB.StrokeDashArray_Data.String
	key.StrokeDashArrayWhenSelected = keyDB.StrokeDashArrayWhenSelected_Data.String
	key.Transform = keyDB.Transform_Data.String
}

// Backup generates a json file from a slice of all KeyDB instances in the backrepo
func (backRepoKey *BackRepoKeyStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "KeyDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KeyDB, 0)
	for _, keyDB := range backRepoKey.Map_KeyDBID_KeyDB {
		forBackup = append(forBackup, keyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Key ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Key file", err.Error())
	}
}

// Backup generates a json file from a slice of all KeyDB instances in the backrepo
func (backRepoKey *BackRepoKeyStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KeyDB, 0)
	for _, keyDB := range backRepoKey.Map_KeyDBID_KeyDB {
		forBackup = append(forBackup, keyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Key")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Key_Fields, -1)
	for _, keyDB := range forBackup {

		var keyWOP KeyWOP
		keyDB.CopyBasicFieldsToKeyWOP(&keyWOP)

		row := sh.AddRow()
		row.WriteStruct(&keyWOP, -1)
	}
}

// RestoreXL from the "Key" sheet all KeyDB instances
func (backRepoKey *BackRepoKeyStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKeyid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Key"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKey.rowVisitorKey)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKey *BackRepoKeyStruct) rowVisitorKey(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var keyWOP KeyWOP
		row.ReadStruct(&keyWOP)

		// add the unmarshalled struct to the stage
		keyDB := new(KeyDB)
		keyDB.CopyBasicFieldsFromKeyWOP(&keyWOP)

		keyDB_ID_atBackupTime := keyDB.ID
		keyDB.ID = 0
		_, err := backRepoKey.db.Create(keyDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoKey.Map_KeyDBID_KeyDB[keyDB.ID] = keyDB
		BackRepoKeyid_atBckpTime_newID[keyDB_ID_atBackupTime] = keyDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "KeyDB.json" in dirPath that stores an array
// of KeyDB and stores it in the database
// the map BackRepoKeyid_atBckpTime_newID is updated accordingly
func (backRepoKey *BackRepoKeyStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKeyid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "KeyDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Key file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*KeyDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_KeyDBID_KeyDB
	for _, keyDB := range forRestore {

		keyDB_ID_atBackupTime := keyDB.ID
		keyDB.ID = 0
		_, err := backRepoKey.db.Create(keyDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoKey.Map_KeyDBID_KeyDB[keyDB.ID] = keyDB
		BackRepoKeyid_atBckpTime_newID[keyDB_ID_atBackupTime] = keyDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Key file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Key>id_atBckpTime_newID
// to compute new index
func (backRepoKey *BackRepoKeyStruct) RestorePhaseTwo() {

	for _, keyDB := range backRepoKey.Map_KeyDBID_KeyDB {

		// next line of code is to avert unused variable compilation error
		_ = keyDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if keyDB.ShapeCategoryID.Int64 != 0 {
			keyDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(keyDB.ShapeCategoryID.Int64)])
			keyDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoKey.db.Model(keyDB)
		_, err := db.Updates(*keyDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoKey.ResetReversePointers commits all staged instances of Key to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey *BackRepoKeyStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, key := range backRepoKey.Map_KeyDBID_KeyPtr {
		backRepoKey.ResetReversePointersInstance(backRepo, idx, key)
	}

	return
}

func (backRepoKey *BackRepoKeyStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, key *models.Key) (Error error) {

	// fetch matching keyDB
	if keyDB, ok := backRepoKey.Map_KeyDBID_KeyDB[idx]; ok {
		_ = keyDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKeyid_atBckpTime_newID map[uint]uint
