// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AxisGrid_sql sql.NullBool
var dummy_AxisGrid_time time.Duration
var dummy_AxisGrid_sort sort.Float64Slice

// AxisGridAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model axisgridAPI
type AxisGridAPI struct {
	gorm.Model

	models.AxisGrid_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AxisGridPointersEncoding AxisGridPointersEncoding
}

// AxisGridPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AxisGridPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Reference is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ReferenceID sql.NullInt64

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field Axiss is a slice of pointers to another Struct (optional or 0..1)
	Axiss IntSlice `gorm:"type:TEXT"`
}

// AxisGridDB describes a axisgrid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model axisgridDB
type AxisGridDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field axisgridDB.Name
	Name_Data sql.NullString

	// Declation for basic field axisgridDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AxisGridPointersEncoding
}

// AxisGridDBs arrays axisgridDBs
// swagger:response axisgridDBsResponse
type AxisGridDBs []AxisGridDB

// AxisGridDBResponse provides response
// swagger:response axisgridDBResponse
type AxisGridDBResponse struct {
	AxisGridDB
}

// AxisGridWOP is a AxisGrid without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AxisGridWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var AxisGrid_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoAxisGridStruct struct {
	// stores AxisGridDB according to their gorm ID
	Map_AxisGridDBID_AxisGridDB map[uint]*AxisGridDB

	// stores AxisGridDB ID according to AxisGrid address
	Map_AxisGridPtr_AxisGridDBID map[*models.AxisGrid]uint

	// stores AxisGrid according to their gorm ID
	Map_AxisGridDBID_AxisGridPtr map[uint]*models.AxisGrid

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoAxisGrid *BackRepoAxisGridStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAxisGrid.stage
	return
}

func (backRepoAxisGrid *BackRepoAxisGridStruct) GetDB() db.DBInterface {
	return backRepoAxisGrid.db
}

// GetAxisGridDBFromAxisGridPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAxisGrid *BackRepoAxisGridStruct) GetAxisGridDBFromAxisGridPtr(axisgrid *models.AxisGrid) (axisgridDB *AxisGridDB) {
	id := backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid]
	axisgridDB = backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[id]
	return
}

// BackRepoAxisGrid.CommitPhaseOne commits all staged instances of AxisGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAxisGrid *BackRepoAxisGridStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for axisgrid := range stage.AxisGrids {
		backRepoAxisGrid.CommitPhaseOneInstance(axisgrid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, axisgrid := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr {
		if _, ok := stage.AxisGrids[axisgrid]; !ok {
			backRepoAxisGrid.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAxisGrid.CommitDeleteInstance commits deletion of AxisGrid to the BackRepo
func (backRepoAxisGrid *BackRepoAxisGridStruct) CommitDeleteInstance(id uint) (Error error) {

	axisgrid := backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[id]

	// axisgrid is not staged anymore, remove axisgridDB
	axisgridDB := backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[id]
	db, _ := backRepoAxisGrid.db.Unscoped()
	_, err := db.Delete(axisgridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID, axisgrid)
	delete(backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr, id)
	delete(backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB, id)

	return
}

// BackRepoAxisGrid.CommitPhaseOneInstance commits axisgrid staged instances of AxisGrid to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAxisGrid *BackRepoAxisGridStruct) CommitPhaseOneInstance(axisgrid *models.AxisGrid) (Error error) {

	// check if the axisgrid is not commited yet
	if _, ok := backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid]; ok {
		return
	}

	// initiate axisgrid
	var axisgridDB AxisGridDB
	axisgridDB.CopyBasicFieldsFromAxisGrid(axisgrid)

	_, err := backRepoAxisGrid.db.Create(&axisgridDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid] = axisgridDB.ID
	backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[axisgridDB.ID] = axisgrid
	backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[axisgridDB.ID] = &axisgridDB

	return
}

// BackRepoAxisGrid.CommitPhaseTwo commits all staged instances of AxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAxisGrid *BackRepoAxisGridStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, axisgrid := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr {
		backRepoAxisGrid.CommitPhaseTwoInstance(backRepo, idx, axisgrid)
	}

	return
}

// BackRepoAxisGrid.CommitPhaseTwoInstance commits {{structname }} of models.AxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAxisGrid *BackRepoAxisGridStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, axisgrid *models.AxisGrid) (Error error) {

	// fetch matching axisgridDB
	if axisgridDB, ok := backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[idx]; ok {

		axisgridDB.CopyBasicFieldsFromAxisGrid(axisgrid)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value axisgrid.Reference translates to updating the axisgrid.ReferenceID
		axisgridDB.ReferenceID.Valid = true // allow for a 0 value (nil association)
		if axisgrid.Reference != nil {
			if ReferenceId, ok := backRepo.BackRepoAxis.Map_AxisPtr_AxisDBID[axisgrid.Reference]; ok {
				axisgridDB.ReferenceID.Int64 = int64(ReferenceId)
				axisgridDB.ReferenceID.Valid = true
			}
		} else {
			axisgridDB.ReferenceID.Int64 = 0
			axisgridDB.ReferenceID.Valid = true
		}

		// commit pointer value axisgrid.ShapeCategory translates to updating the axisgrid.ShapeCategoryID
		axisgridDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if axisgrid.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[axisgrid.ShapeCategory]; ok {
				axisgridDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				axisgridDB.ShapeCategoryID.Valid = true
			}
		} else {
			axisgridDB.ShapeCategoryID.Int64 = 0
			axisgridDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		axisgridDB.AxisGridPointersEncoding.Axiss = make([]int, 0)
		// 2. encode
		for _, axisAssocEnd := range axisgrid.Axiss {
			axisAssocEnd_DB :=
				backRepo.BackRepoAxis.GetAxisDBFromAxisPtr(axisAssocEnd)
			
			// the stage might be inconsistant, meaning that the axisAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if axisAssocEnd_DB == nil {
				continue
			}
			
			axisgridDB.AxisGridPointersEncoding.Axiss =
				append(axisgridDB.AxisGridPointersEncoding.Axiss, int(axisAssocEnd_DB.ID))
		}

		_, err := backRepoAxisGrid.db.Save(axisgridDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AxisGrid intance %s", axisgrid.Name))
		return err
	}

	return
}

// BackRepoAxisGrid.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAxisGrid *BackRepoAxisGridStruct) CheckoutPhaseOne() (Error error) {

	axisgridDBArray := make([]AxisGridDB, 0)
	_, err := backRepoAxisGrid.db.Find(&axisgridDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	axisgridInstancesToBeRemovedFromTheStage := make(map[*models.AxisGrid]any)
	for key, value := range backRepoAxisGrid.stage.AxisGrids {
		axisgridInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, axisgridDB := range axisgridDBArray {
		backRepoAxisGrid.CheckoutPhaseOneInstance(&axisgridDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		axisgrid, ok := backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[axisgridDB.ID]
		if ok {
			delete(axisgridInstancesToBeRemovedFromTheStage, axisgrid)
		}
	}

	// remove from stage and back repo's 3 maps all axisgrids that are not in the checkout
	for axisgrid := range axisgridInstancesToBeRemovedFromTheStage {
		axisgrid.Unstage(backRepoAxisGrid.GetStage())

		// remove instance from the back repo 3 maps
		axisgridID := backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid]
		delete(backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID, axisgrid)
		delete(backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB, axisgridID)
		delete(backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr, axisgridID)
	}

	return
}

// CheckoutPhaseOneInstance takes a axisgridDB that has been found in the DB, updates the backRepo and stages the
// models version of the axisgridDB
func (backRepoAxisGrid *BackRepoAxisGridStruct) CheckoutPhaseOneInstance(axisgridDB *AxisGridDB) (Error error) {

	axisgrid, ok := backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[axisgridDB.ID]
	if !ok {
		axisgrid = new(models.AxisGrid)

		backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[axisgridDB.ID] = axisgrid
		backRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid] = axisgridDB.ID

		// append model store with the new element
		axisgrid.Name = axisgridDB.Name_Data.String
		axisgrid.Stage(backRepoAxisGrid.GetStage())
	}
	axisgridDB.CopyBasicFieldsToAxisGrid(axisgrid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	axisgrid.Stage(backRepoAxisGrid.GetStage())

	// preserve pointer to axisgridDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AxisGridDBID_AxisGridDB)[axisgridDB hold variable pointers
	axisgridDB_Data := *axisgridDB
	preservedPtrToAxisGrid := &axisgridDB_Data
	backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[axisgridDB.ID] = preservedPtrToAxisGrid

	return
}

// BackRepoAxisGrid.CheckoutPhaseTwo Checkouts all staged instances of AxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAxisGrid *BackRepoAxisGridStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, axisgridDB := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB {
		backRepoAxisGrid.CheckoutPhaseTwoInstance(backRepo, axisgridDB)
	}
	return
}

// BackRepoAxisGrid.CheckoutPhaseTwoInstance Checkouts staged instances of AxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAxisGrid *BackRepoAxisGridStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, axisgridDB *AxisGridDB) (Error error) {

	axisgrid := backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[axisgridDB.ID]

	axisgridDB.DecodePointers(backRepo, axisgrid)

	return
}

func (axisgridDB *AxisGridDB) DecodePointers(backRepo *BackRepoStruct, axisgrid *models.AxisGrid) {

	// insertion point for checkout of pointer encoding
	// Reference field
	axisgrid.Reference = nil
	if axisgridDB.ReferenceID.Int64 != 0 {
		axisgrid.Reference = backRepo.BackRepoAxis.Map_AxisDBID_AxisPtr[uint(axisgridDB.ReferenceID.Int64)]
	}
	// ShapeCategory field
	axisgrid.ShapeCategory = nil
	if axisgridDB.ShapeCategoryID.Int64 != 0 {
		axisgrid.ShapeCategory = backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(axisgridDB.ShapeCategoryID.Int64)]
	}
	// This loop redeem axisgrid.Axiss in the stage from the encode in the back repo
	// It parses all AxisDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	axisgrid.Axiss = axisgrid.Axiss[:0]
	for _, _Axisid := range axisgridDB.AxisGridPointersEncoding.Axiss {
		axisgrid.Axiss = append(axisgrid.Axiss, backRepo.BackRepoAxis.Map_AxisDBID_AxisPtr[uint(_Axisid)])
	}

	return
}

// CommitAxisGrid allows commit of a single axisgrid (if already staged)
func (backRepo *BackRepoStruct) CommitAxisGrid(axisgrid *models.AxisGrid) {
	backRepo.BackRepoAxisGrid.CommitPhaseOneInstance(axisgrid)
	if id, ok := backRepo.BackRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid]; ok {
		backRepo.BackRepoAxisGrid.CommitPhaseTwoInstance(backRepo, id, axisgrid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAxisGrid allows checkout of a single axisgrid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAxisGrid(axisgrid *models.AxisGrid) {
	// check if the axisgrid is staged
	if _, ok := backRepo.BackRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid]; ok {

		if id, ok := backRepo.BackRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[axisgrid]; ok {
			var axisgridDB AxisGridDB
			axisgridDB.ID = id

			if _, err := backRepo.BackRepoAxisGrid.db.First(&axisgridDB, id); err != nil {
				log.Fatalln("CheckoutAxisGrid : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAxisGrid.CheckoutPhaseOneInstance(&axisgridDB)
			backRepo.BackRepoAxisGrid.CheckoutPhaseTwoInstance(backRepo, &axisgridDB)
		}
	}
}

// CopyBasicFieldsFromAxisGrid
func (axisgridDB *AxisGridDB) CopyBasicFieldsFromAxisGrid(axisgrid *models.AxisGrid) {
	// insertion point for fields commit

	axisgridDB.Name_Data.String = axisgrid.Name
	axisgridDB.Name_Data.Valid = true

	axisgridDB.IsDisplayed_Data.Bool = axisgrid.IsDisplayed
	axisgridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromAxisGrid_WOP
func (axisgridDB *AxisGridDB) CopyBasicFieldsFromAxisGrid_WOP(axisgrid *models.AxisGrid_WOP) {
	// insertion point for fields commit

	axisgridDB.Name_Data.String = axisgrid.Name
	axisgridDB.Name_Data.Valid = true

	axisgridDB.IsDisplayed_Data.Bool = axisgrid.IsDisplayed
	axisgridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromAxisGridWOP
func (axisgridDB *AxisGridDB) CopyBasicFieldsFromAxisGridWOP(axisgrid *AxisGridWOP) {
	// insertion point for fields commit

	axisgridDB.Name_Data.String = axisgrid.Name
	axisgridDB.Name_Data.Valid = true

	axisgridDB.IsDisplayed_Data.Bool = axisgrid.IsDisplayed
	axisgridDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToAxisGrid
func (axisgridDB *AxisGridDB) CopyBasicFieldsToAxisGrid(axisgrid *models.AxisGrid) {
	// insertion point for checkout of basic fields (back repo to stage)
	axisgrid.Name = axisgridDB.Name_Data.String
	axisgrid.IsDisplayed = axisgridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToAxisGrid_WOP
func (axisgridDB *AxisGridDB) CopyBasicFieldsToAxisGrid_WOP(axisgrid *models.AxisGrid_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	axisgrid.Name = axisgridDB.Name_Data.String
	axisgrid.IsDisplayed = axisgridDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToAxisGridWOP
func (axisgridDB *AxisGridDB) CopyBasicFieldsToAxisGridWOP(axisgrid *AxisGridWOP) {
	axisgrid.ID = int(axisgridDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	axisgrid.Name = axisgridDB.Name_Data.String
	axisgrid.IsDisplayed = axisgridDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all AxisGridDB instances in the backrepo
func (backRepoAxisGrid *BackRepoAxisGridStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AxisGridDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AxisGridDB, 0)
	for _, axisgridDB := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB {
		forBackup = append(forBackup, axisgridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AxisGrid ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AxisGrid file", err.Error())
	}
}

// Backup generates a json file from a slice of all AxisGridDB instances in the backrepo
func (backRepoAxisGrid *BackRepoAxisGridStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AxisGridDB, 0)
	for _, axisgridDB := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB {
		forBackup = append(forBackup, axisgridDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AxisGrid")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AxisGrid_Fields, -1)
	for _, axisgridDB := range forBackup {

		var axisgridWOP AxisGridWOP
		axisgridDB.CopyBasicFieldsToAxisGridWOP(&axisgridWOP)

		row := sh.AddRow()
		row.WriteStruct(&axisgridWOP, -1)
	}
}

// RestoreXL from the "AxisGrid" sheet all AxisGridDB instances
func (backRepoAxisGrid *BackRepoAxisGridStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAxisGridid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AxisGrid"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAxisGrid.rowVisitorAxisGrid)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAxisGrid *BackRepoAxisGridStruct) rowVisitorAxisGrid(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var axisgridWOP AxisGridWOP
		row.ReadStruct(&axisgridWOP)

		// add the unmarshalled struct to the stage
		axisgridDB := new(AxisGridDB)
		axisgridDB.CopyBasicFieldsFromAxisGridWOP(&axisgridWOP)

		axisgridDB_ID_atBackupTime := axisgridDB.ID
		axisgridDB.ID = 0
		_, err := backRepoAxisGrid.db.Create(axisgridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[axisgridDB.ID] = axisgridDB
		BackRepoAxisGridid_atBckpTime_newID[axisgridDB_ID_atBackupTime] = axisgridDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AxisGridDB.json" in dirPath that stores an array
// of AxisGridDB and stores it in the database
// the map BackRepoAxisGridid_atBckpTime_newID is updated accordingly
func (backRepoAxisGrid *BackRepoAxisGridStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAxisGridid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AxisGridDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AxisGrid file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AxisGridDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AxisGridDBID_AxisGridDB
	for _, axisgridDB := range forRestore {

		axisgridDB_ID_atBackupTime := axisgridDB.ID
		axisgridDB.ID = 0
		_, err := backRepoAxisGrid.db.Create(axisgridDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[axisgridDB.ID] = axisgridDB
		BackRepoAxisGridid_atBckpTime_newID[axisgridDB_ID_atBackupTime] = axisgridDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AxisGrid file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AxisGrid>id_atBckpTime_newID
// to compute new index
func (backRepoAxisGrid *BackRepoAxisGridStruct) RestorePhaseTwo() {

	for _, axisgridDB := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB {

		// next line of code is to avert unused variable compilation error
		_ = axisgridDB

		// insertion point for reindexing pointers encoding
		// reindexing Reference field
		if axisgridDB.ReferenceID.Int64 != 0 {
			axisgridDB.ReferenceID.Int64 = int64(BackRepoAxisid_atBckpTime_newID[uint(axisgridDB.ReferenceID.Int64)])
			axisgridDB.ReferenceID.Valid = true
		}

		// reindexing ShapeCategory field
		if axisgridDB.ShapeCategoryID.Int64 != 0 {
			axisgridDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(axisgridDB.ShapeCategoryID.Int64)])
			axisgridDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoAxisGrid.db.Model(axisgridDB)
		_, err := db.Updates(*axisgridDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoAxisGrid.ResetReversePointers commits all staged instances of AxisGrid to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAxisGrid *BackRepoAxisGridStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, axisgrid := range backRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr {
		backRepoAxisGrid.ResetReversePointersInstance(backRepo, idx, axisgrid)
	}

	return
}

func (backRepoAxisGrid *BackRepoAxisGridStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, axisgrid *models.AxisGrid) (Error error) {

	// fetch matching axisgridDB
	if axisgridDB, ok := backRepoAxisGrid.Map_AxisGridDBID_AxisGridDB[idx]; ok {
		_ = axisgridDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAxisGridid_atBckpTime_newID map[uint]uint
