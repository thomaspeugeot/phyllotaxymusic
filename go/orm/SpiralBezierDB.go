// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SpiralBezier_sql sql.NullBool
var dummy_SpiralBezier_time time.Duration
var dummy_SpiralBezier_sort sort.Float64Slice

// SpiralBezierAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spiralbezierAPI
type SpiralBezierAPI struct {
	gorm.Model

	models.SpiralBezier_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SpiralBezierPointersEncoding SpiralBezierPointersEncoding
}

// SpiralBezierPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SpiralBezierPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64
}

// SpiralBezierDB describes a spiralbezier in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spiralbezierDB
type SpiralBezierDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spiralbezierDB.Name
	Name_Data sql.NullString

	// Declation for basic field spiralbezierDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field spiralbezierDB.StartX
	StartX_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.StartY
	StartY_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.ControlPointStartX
	ControlPointStartX_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.ControlPointStartY
	ControlPointStartY_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.EndX
	EndX_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.EndY
	EndY_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.ControlPointEndX
	ControlPointEndX_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.ControlPointEndY
	ControlPointEndY_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.Color
	Color_Data sql.NullString

	// Declation for basic field spiralbezierDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field spiralbezierDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field spiralbezierDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field spiralbezierDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field spiralbezierDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SpiralBezierPointersEncoding
}

// SpiralBezierDBs arrays spiralbezierDBs
// swagger:response spiralbezierDBsResponse
type SpiralBezierDBs []SpiralBezierDB

// SpiralBezierDBResponse provides response
// swagger:response spiralbezierDBResponse
type SpiralBezierDBResponse struct {
	SpiralBezierDB
}

// SpiralBezierWOP is a SpiralBezier without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SpiralBezierWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	StartX float64 `xlsx:"3"`

	StartY float64 `xlsx:"4"`

	ControlPointStartX float64 `xlsx:"5"`

	ControlPointStartY float64 `xlsx:"6"`

	EndX float64 `xlsx:"7"`

	EndY float64 `xlsx:"8"`

	ControlPointEndX float64 `xlsx:"9"`

	ControlPointEndY float64 `xlsx:"10"`

	Color string `xlsx:"11"`

	FillOpacity float64 `xlsx:"12"`

	Stroke string `xlsx:"13"`

	StrokeOpacity float64 `xlsx:"14"`

	StrokeWidth float64 `xlsx:"15"`

	StrokeDashArray string `xlsx:"16"`

	StrokeDashArrayWhenSelected string `xlsx:"17"`

	Transform string `xlsx:"18"`
	// insertion for WOP pointer fields
}

var SpiralBezier_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"StartX",
	"StartY",
	"ControlPointStartX",
	"ControlPointStartY",
	"EndX",
	"EndY",
	"ControlPointEndX",
	"ControlPointEndY",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoSpiralBezierStruct struct {
	// stores SpiralBezierDB according to their gorm ID
	Map_SpiralBezierDBID_SpiralBezierDB map[uint]*SpiralBezierDB

	// stores SpiralBezierDB ID according to SpiralBezier address
	Map_SpiralBezierPtr_SpiralBezierDBID map[*models.SpiralBezier]uint

	// stores SpiralBezier according to their gorm ID
	Map_SpiralBezierDBID_SpiralBezierPtr map[uint]*models.SpiralBezier

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSpiralBezier.stage
	return
}

func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) GetDB() db.DBInterface {
	return backRepoSpiralBezier.db
}

// GetSpiralBezierDBFromSpiralBezierPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) GetSpiralBezierDBFromSpiralBezierPtr(spiralbezier *models.SpiralBezier) (spiralbezierDB *SpiralBezierDB) {
	id := backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier]
	spiralbezierDB = backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[id]
	return
}

// BackRepoSpiralBezier.CommitPhaseOne commits all staged instances of SpiralBezier to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	var spiralbeziers []*models.SpiralBezier
	for spiralbezier := range stage.SpiralBeziers {
		spiralbeziers = append(spiralbeziers, spiralbezier)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(spiralbeziers, func(i, j int) bool {
		return stage.Map_Staged_Order[spiralbeziers[i]] < stage.Map_Staged_Order[spiralbeziers[j]]
	})

	for _, spiralbezier := range spiralbeziers {
		backRepoSpiralBezier.CommitPhaseOneInstance(spiralbezier)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spiralbezier := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr {
		if _, ok := stage.SpiralBeziers[spiralbezier]; !ok {
			backRepoSpiralBezier.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSpiralBezier.CommitDeleteInstance commits deletion of SpiralBezier to the BackRepo
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CommitDeleteInstance(id uint) (Error error) {

	spiralbezier := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[id]

	// spiralbezier is not staged anymore, remove spiralbezierDB
	spiralbezierDB := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[id]
	db, _ := backRepoSpiralBezier.db.Unscoped()
	_, err := db.Delete(spiralbezierDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID, spiralbezier)
	delete(backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr, id)
	delete(backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB, id)

	return
}

// BackRepoSpiralBezier.CommitPhaseOneInstance commits spiralbezier staged instances of SpiralBezier to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CommitPhaseOneInstance(spiralbezier *models.SpiralBezier) (Error error) {

	// check if the spiralbezier is not commited yet
	if _, ok := backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier]; ok {
		return
	}

	// initiate spiralbezier
	var spiralbezierDB SpiralBezierDB
	spiralbezierDB.CopyBasicFieldsFromSpiralBezier(spiralbezier)

	_, err := backRepoSpiralBezier.db.Create(&spiralbezierDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier] = spiralbezierDB.ID
	backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[spiralbezierDB.ID] = spiralbezier
	backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[spiralbezierDB.ID] = &spiralbezierDB

	return
}

// BackRepoSpiralBezier.CommitPhaseTwo commits all staged instances of SpiralBezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralbezier := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr {
		backRepoSpiralBezier.CommitPhaseTwoInstance(backRepo, idx, spiralbezier)
	}

	return
}

// BackRepoSpiralBezier.CommitPhaseTwoInstance commits {{structname }} of models.SpiralBezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spiralbezier *models.SpiralBezier) (Error error) {

	// fetch matching spiralbezierDB
	if spiralbezierDB, ok := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[idx]; ok {

		spiralbezierDB.CopyBasicFieldsFromSpiralBezier(spiralbezier)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value spiralbezier.ShapeCategory translates to updating the spiralbezier.ShapeCategoryID
		spiralbezierDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if spiralbezier.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[spiralbezier.ShapeCategory]; ok {
				spiralbezierDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				spiralbezierDB.ShapeCategoryID.Valid = true
			}
		} else {
			spiralbezierDB.ShapeCategoryID.Int64 = 0
			spiralbezierDB.ShapeCategoryID.Valid = true
		}

		_, err := backRepoSpiralBezier.db.Save(spiralbezierDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SpiralBezier intance %s", spiralbezier.Name))
		return err
	}

	return
}

// BackRepoSpiralBezier.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CheckoutPhaseOne() (Error error) {

	spiralbezierDBArray := make([]SpiralBezierDB, 0)
	_, err := backRepoSpiralBezier.db.Find(&spiralbezierDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spiralbezierInstancesToBeRemovedFromTheStage := make(map[*models.SpiralBezier]any)
	for key, value := range backRepoSpiralBezier.stage.SpiralBeziers {
		spiralbezierInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spiralbezierDB := range spiralbezierDBArray {
		backRepoSpiralBezier.CheckoutPhaseOneInstance(&spiralbezierDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spiralbezier, ok := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[spiralbezierDB.ID]
		if ok {
			delete(spiralbezierInstancesToBeRemovedFromTheStage, spiralbezier)
		}
	}

	// remove from stage and back repo's 3 maps all spiralbeziers that are not in the checkout
	for spiralbezier := range spiralbezierInstancesToBeRemovedFromTheStage {
		spiralbezier.Unstage(backRepoSpiralBezier.GetStage())

		// remove instance from the back repo 3 maps
		spiralbezierID := backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier]
		delete(backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID, spiralbezier)
		delete(backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB, spiralbezierID)
		delete(backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr, spiralbezierID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spiralbezierDB that has been found in the DB, updates the backRepo and stages the
// models version of the spiralbezierDB
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CheckoutPhaseOneInstance(spiralbezierDB *SpiralBezierDB) (Error error) {

	spiralbezier, ok := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[spiralbezierDB.ID]
	if !ok {
		spiralbezier = new(models.SpiralBezier)

		backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[spiralbezierDB.ID] = spiralbezier
		backRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier] = spiralbezierDB.ID

		// append model store with the new element
		spiralbezier.Name = spiralbezierDB.Name_Data.String
		spiralbezier.Stage(backRepoSpiralBezier.GetStage())
	}
	spiralbezierDB.CopyBasicFieldsToSpiralBezier(spiralbezier)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spiralbezier.Stage(backRepoSpiralBezier.GetStage())

	// preserve pointer to spiralbezierDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SpiralBezierDBID_SpiralBezierDB)[spiralbezierDB hold variable pointers
	spiralbezierDB_Data := *spiralbezierDB
	preservedPtrToSpiralBezier := &spiralbezierDB_Data
	backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[spiralbezierDB.ID] = preservedPtrToSpiralBezier

	return
}

// BackRepoSpiralBezier.CheckoutPhaseTwo Checkouts all staged instances of SpiralBezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spiralbezierDB := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB {
		backRepoSpiralBezier.CheckoutPhaseTwoInstance(backRepo, spiralbezierDB)
	}
	return
}

// BackRepoSpiralBezier.CheckoutPhaseTwoInstance Checkouts staged instances of SpiralBezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spiralbezierDB *SpiralBezierDB) (Error error) {

	spiralbezier := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[spiralbezierDB.ID]

	spiralbezierDB.DecodePointers(backRepo, spiralbezier)

	return
}

func (spiralbezierDB *SpiralBezierDB) DecodePointers(backRepo *BackRepoStruct, spiralbezier *models.SpiralBezier) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := spiralbezierDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: spiralbezier.ShapeCategory, unknown pointer id", id)
				spiralbezier.ShapeCategory = nil
			} else {
				// updates only if field has changed
				if spiralbezier.ShapeCategory == nil || spiralbezier.ShapeCategory != tmp {
					spiralbezier.ShapeCategory = tmp
				}
			}
		} else {
			spiralbezier.ShapeCategory = nil
		}
	}
	
	return
}

// CommitSpiralBezier allows commit of a single spiralbezier (if already staged)
func (backRepo *BackRepoStruct) CommitSpiralBezier(spiralbezier *models.SpiralBezier) {
	backRepo.BackRepoSpiralBezier.CommitPhaseOneInstance(spiralbezier)
	if id, ok := backRepo.BackRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier]; ok {
		backRepo.BackRepoSpiralBezier.CommitPhaseTwoInstance(backRepo, id, spiralbezier)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSpiralBezier allows checkout of a single spiralbezier (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSpiralBezier(spiralbezier *models.SpiralBezier) {
	// check if the spiralbezier is staged
	if _, ok := backRepo.BackRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier]; ok {

		if id, ok := backRepo.BackRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[spiralbezier]; ok {
			var spiralbezierDB SpiralBezierDB
			spiralbezierDB.ID = id

			if _, err := backRepo.BackRepoSpiralBezier.db.First(&spiralbezierDB, id); err != nil {
				log.Fatalln("CheckoutSpiralBezier : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSpiralBezier.CheckoutPhaseOneInstance(&spiralbezierDB)
			backRepo.BackRepoSpiralBezier.CheckoutPhaseTwoInstance(backRepo, &spiralbezierDB)
		}
	}
}

// CopyBasicFieldsFromSpiralBezier
func (spiralbezierDB *SpiralBezierDB) CopyBasicFieldsFromSpiralBezier(spiralbezier *models.SpiralBezier) {
	// insertion point for fields commit

	spiralbezierDB.Name_Data.String = spiralbezier.Name
	spiralbezierDB.Name_Data.Valid = true

	spiralbezierDB.IsDisplayed_Data.Bool = spiralbezier.IsDisplayed
	spiralbezierDB.IsDisplayed_Data.Valid = true

	spiralbezierDB.StartX_Data.Float64 = spiralbezier.StartX
	spiralbezierDB.StartX_Data.Valid = true

	spiralbezierDB.StartY_Data.Float64 = spiralbezier.StartY
	spiralbezierDB.StartY_Data.Valid = true

	spiralbezierDB.ControlPointStartX_Data.Float64 = spiralbezier.ControlPointStartX
	spiralbezierDB.ControlPointStartX_Data.Valid = true

	spiralbezierDB.ControlPointStartY_Data.Float64 = spiralbezier.ControlPointStartY
	spiralbezierDB.ControlPointStartY_Data.Valid = true

	spiralbezierDB.EndX_Data.Float64 = spiralbezier.EndX
	spiralbezierDB.EndX_Data.Valid = true

	spiralbezierDB.EndY_Data.Float64 = spiralbezier.EndY
	spiralbezierDB.EndY_Data.Valid = true

	spiralbezierDB.ControlPointEndX_Data.Float64 = spiralbezier.ControlPointEndX
	spiralbezierDB.ControlPointEndX_Data.Valid = true

	spiralbezierDB.ControlPointEndY_Data.Float64 = spiralbezier.ControlPointEndY
	spiralbezierDB.ControlPointEndY_Data.Valid = true

	spiralbezierDB.Color_Data.String = spiralbezier.Color
	spiralbezierDB.Color_Data.Valid = true

	spiralbezierDB.FillOpacity_Data.Float64 = spiralbezier.FillOpacity
	spiralbezierDB.FillOpacity_Data.Valid = true

	spiralbezierDB.Stroke_Data.String = spiralbezier.Stroke
	spiralbezierDB.Stroke_Data.Valid = true

	spiralbezierDB.StrokeOpacity_Data.Float64 = spiralbezier.StrokeOpacity
	spiralbezierDB.StrokeOpacity_Data.Valid = true

	spiralbezierDB.StrokeWidth_Data.Float64 = spiralbezier.StrokeWidth
	spiralbezierDB.StrokeWidth_Data.Valid = true

	spiralbezierDB.StrokeDashArray_Data.String = spiralbezier.StrokeDashArray
	spiralbezierDB.StrokeDashArray_Data.Valid = true

	spiralbezierDB.StrokeDashArrayWhenSelected_Data.String = spiralbezier.StrokeDashArrayWhenSelected
	spiralbezierDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiralbezierDB.Transform_Data.String = spiralbezier.Transform
	spiralbezierDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromSpiralBezier_WOP
func (spiralbezierDB *SpiralBezierDB) CopyBasicFieldsFromSpiralBezier_WOP(spiralbezier *models.SpiralBezier_WOP) {
	// insertion point for fields commit

	spiralbezierDB.Name_Data.String = spiralbezier.Name
	spiralbezierDB.Name_Data.Valid = true

	spiralbezierDB.IsDisplayed_Data.Bool = spiralbezier.IsDisplayed
	spiralbezierDB.IsDisplayed_Data.Valid = true

	spiralbezierDB.StartX_Data.Float64 = spiralbezier.StartX
	spiralbezierDB.StartX_Data.Valid = true

	spiralbezierDB.StartY_Data.Float64 = spiralbezier.StartY
	spiralbezierDB.StartY_Data.Valid = true

	spiralbezierDB.ControlPointStartX_Data.Float64 = spiralbezier.ControlPointStartX
	spiralbezierDB.ControlPointStartX_Data.Valid = true

	spiralbezierDB.ControlPointStartY_Data.Float64 = spiralbezier.ControlPointStartY
	spiralbezierDB.ControlPointStartY_Data.Valid = true

	spiralbezierDB.EndX_Data.Float64 = spiralbezier.EndX
	spiralbezierDB.EndX_Data.Valid = true

	spiralbezierDB.EndY_Data.Float64 = spiralbezier.EndY
	spiralbezierDB.EndY_Data.Valid = true

	spiralbezierDB.ControlPointEndX_Data.Float64 = spiralbezier.ControlPointEndX
	spiralbezierDB.ControlPointEndX_Data.Valid = true

	spiralbezierDB.ControlPointEndY_Data.Float64 = spiralbezier.ControlPointEndY
	spiralbezierDB.ControlPointEndY_Data.Valid = true

	spiralbezierDB.Color_Data.String = spiralbezier.Color
	spiralbezierDB.Color_Data.Valid = true

	spiralbezierDB.FillOpacity_Data.Float64 = spiralbezier.FillOpacity
	spiralbezierDB.FillOpacity_Data.Valid = true

	spiralbezierDB.Stroke_Data.String = spiralbezier.Stroke
	spiralbezierDB.Stroke_Data.Valid = true

	spiralbezierDB.StrokeOpacity_Data.Float64 = spiralbezier.StrokeOpacity
	spiralbezierDB.StrokeOpacity_Data.Valid = true

	spiralbezierDB.StrokeWidth_Data.Float64 = spiralbezier.StrokeWidth
	spiralbezierDB.StrokeWidth_Data.Valid = true

	spiralbezierDB.StrokeDashArray_Data.String = spiralbezier.StrokeDashArray
	spiralbezierDB.StrokeDashArray_Data.Valid = true

	spiralbezierDB.StrokeDashArrayWhenSelected_Data.String = spiralbezier.StrokeDashArrayWhenSelected
	spiralbezierDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiralbezierDB.Transform_Data.String = spiralbezier.Transform
	spiralbezierDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromSpiralBezierWOP
func (spiralbezierDB *SpiralBezierDB) CopyBasicFieldsFromSpiralBezierWOP(spiralbezier *SpiralBezierWOP) {
	// insertion point for fields commit

	spiralbezierDB.Name_Data.String = spiralbezier.Name
	spiralbezierDB.Name_Data.Valid = true

	spiralbezierDB.IsDisplayed_Data.Bool = spiralbezier.IsDisplayed
	spiralbezierDB.IsDisplayed_Data.Valid = true

	spiralbezierDB.StartX_Data.Float64 = spiralbezier.StartX
	spiralbezierDB.StartX_Data.Valid = true

	spiralbezierDB.StartY_Data.Float64 = spiralbezier.StartY
	spiralbezierDB.StartY_Data.Valid = true

	spiralbezierDB.ControlPointStartX_Data.Float64 = spiralbezier.ControlPointStartX
	spiralbezierDB.ControlPointStartX_Data.Valid = true

	spiralbezierDB.ControlPointStartY_Data.Float64 = spiralbezier.ControlPointStartY
	spiralbezierDB.ControlPointStartY_Data.Valid = true

	spiralbezierDB.EndX_Data.Float64 = spiralbezier.EndX
	spiralbezierDB.EndX_Data.Valid = true

	spiralbezierDB.EndY_Data.Float64 = spiralbezier.EndY
	spiralbezierDB.EndY_Data.Valid = true

	spiralbezierDB.ControlPointEndX_Data.Float64 = spiralbezier.ControlPointEndX
	spiralbezierDB.ControlPointEndX_Data.Valid = true

	spiralbezierDB.ControlPointEndY_Data.Float64 = spiralbezier.ControlPointEndY
	spiralbezierDB.ControlPointEndY_Data.Valid = true

	spiralbezierDB.Color_Data.String = spiralbezier.Color
	spiralbezierDB.Color_Data.Valid = true

	spiralbezierDB.FillOpacity_Data.Float64 = spiralbezier.FillOpacity
	spiralbezierDB.FillOpacity_Data.Valid = true

	spiralbezierDB.Stroke_Data.String = spiralbezier.Stroke
	spiralbezierDB.Stroke_Data.Valid = true

	spiralbezierDB.StrokeOpacity_Data.Float64 = spiralbezier.StrokeOpacity
	spiralbezierDB.StrokeOpacity_Data.Valid = true

	spiralbezierDB.StrokeWidth_Data.Float64 = spiralbezier.StrokeWidth
	spiralbezierDB.StrokeWidth_Data.Valid = true

	spiralbezierDB.StrokeDashArray_Data.String = spiralbezier.StrokeDashArray
	spiralbezierDB.StrokeDashArray_Data.Valid = true

	spiralbezierDB.StrokeDashArrayWhenSelected_Data.String = spiralbezier.StrokeDashArrayWhenSelected
	spiralbezierDB.StrokeDashArrayWhenSelected_Data.Valid = true

	spiralbezierDB.Transform_Data.String = spiralbezier.Transform
	spiralbezierDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToSpiralBezier
func (spiralbezierDB *SpiralBezierDB) CopyBasicFieldsToSpiralBezier(spiralbezier *models.SpiralBezier) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralbezier.Name = spiralbezierDB.Name_Data.String
	spiralbezier.IsDisplayed = spiralbezierDB.IsDisplayed_Data.Bool
	spiralbezier.StartX = spiralbezierDB.StartX_Data.Float64
	spiralbezier.StartY = spiralbezierDB.StartY_Data.Float64
	spiralbezier.ControlPointStartX = spiralbezierDB.ControlPointStartX_Data.Float64
	spiralbezier.ControlPointStartY = spiralbezierDB.ControlPointStartY_Data.Float64
	spiralbezier.EndX = spiralbezierDB.EndX_Data.Float64
	spiralbezier.EndY = spiralbezierDB.EndY_Data.Float64
	spiralbezier.ControlPointEndX = spiralbezierDB.ControlPointEndX_Data.Float64
	spiralbezier.ControlPointEndY = spiralbezierDB.ControlPointEndY_Data.Float64
	spiralbezier.Color = spiralbezierDB.Color_Data.String
	spiralbezier.FillOpacity = spiralbezierDB.FillOpacity_Data.Float64
	spiralbezier.Stroke = spiralbezierDB.Stroke_Data.String
	spiralbezier.StrokeOpacity = spiralbezierDB.StrokeOpacity_Data.Float64
	spiralbezier.StrokeWidth = spiralbezierDB.StrokeWidth_Data.Float64
	spiralbezier.StrokeDashArray = spiralbezierDB.StrokeDashArray_Data.String
	spiralbezier.StrokeDashArrayWhenSelected = spiralbezierDB.StrokeDashArrayWhenSelected_Data.String
	spiralbezier.Transform = spiralbezierDB.Transform_Data.String
}

// CopyBasicFieldsToSpiralBezier_WOP
func (spiralbezierDB *SpiralBezierDB) CopyBasicFieldsToSpiralBezier_WOP(spiralbezier *models.SpiralBezier_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spiralbezier.Name = spiralbezierDB.Name_Data.String
	spiralbezier.IsDisplayed = spiralbezierDB.IsDisplayed_Data.Bool
	spiralbezier.StartX = spiralbezierDB.StartX_Data.Float64
	spiralbezier.StartY = spiralbezierDB.StartY_Data.Float64
	spiralbezier.ControlPointStartX = spiralbezierDB.ControlPointStartX_Data.Float64
	spiralbezier.ControlPointStartY = spiralbezierDB.ControlPointStartY_Data.Float64
	spiralbezier.EndX = spiralbezierDB.EndX_Data.Float64
	spiralbezier.EndY = spiralbezierDB.EndY_Data.Float64
	spiralbezier.ControlPointEndX = spiralbezierDB.ControlPointEndX_Data.Float64
	spiralbezier.ControlPointEndY = spiralbezierDB.ControlPointEndY_Data.Float64
	spiralbezier.Color = spiralbezierDB.Color_Data.String
	spiralbezier.FillOpacity = spiralbezierDB.FillOpacity_Data.Float64
	spiralbezier.Stroke = spiralbezierDB.Stroke_Data.String
	spiralbezier.StrokeOpacity = spiralbezierDB.StrokeOpacity_Data.Float64
	spiralbezier.StrokeWidth = spiralbezierDB.StrokeWidth_Data.Float64
	spiralbezier.StrokeDashArray = spiralbezierDB.StrokeDashArray_Data.String
	spiralbezier.StrokeDashArrayWhenSelected = spiralbezierDB.StrokeDashArrayWhenSelected_Data.String
	spiralbezier.Transform = spiralbezierDB.Transform_Data.String
}

// CopyBasicFieldsToSpiralBezierWOP
func (spiralbezierDB *SpiralBezierDB) CopyBasicFieldsToSpiralBezierWOP(spiralbezier *SpiralBezierWOP) {
	spiralbezier.ID = int(spiralbezierDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spiralbezier.Name = spiralbezierDB.Name_Data.String
	spiralbezier.IsDisplayed = spiralbezierDB.IsDisplayed_Data.Bool
	spiralbezier.StartX = spiralbezierDB.StartX_Data.Float64
	spiralbezier.StartY = spiralbezierDB.StartY_Data.Float64
	spiralbezier.ControlPointStartX = spiralbezierDB.ControlPointStartX_Data.Float64
	spiralbezier.ControlPointStartY = spiralbezierDB.ControlPointStartY_Data.Float64
	spiralbezier.EndX = spiralbezierDB.EndX_Data.Float64
	spiralbezier.EndY = spiralbezierDB.EndY_Data.Float64
	spiralbezier.ControlPointEndX = spiralbezierDB.ControlPointEndX_Data.Float64
	spiralbezier.ControlPointEndY = spiralbezierDB.ControlPointEndY_Data.Float64
	spiralbezier.Color = spiralbezierDB.Color_Data.String
	spiralbezier.FillOpacity = spiralbezierDB.FillOpacity_Data.Float64
	spiralbezier.Stroke = spiralbezierDB.Stroke_Data.String
	spiralbezier.StrokeOpacity = spiralbezierDB.StrokeOpacity_Data.Float64
	spiralbezier.StrokeWidth = spiralbezierDB.StrokeWidth_Data.Float64
	spiralbezier.StrokeDashArray = spiralbezierDB.StrokeDashArray_Data.String
	spiralbezier.StrokeDashArrayWhenSelected = spiralbezierDB.StrokeDashArrayWhenSelected_Data.String
	spiralbezier.Transform = spiralbezierDB.Transform_Data.String
}

// Backup generates a json file from a slice of all SpiralBezierDB instances in the backrepo
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SpiralBezierDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralBezierDB, 0)
	for _, spiralbezierDB := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB {
		forBackup = append(forBackup, spiralbezierDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SpiralBezier ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SpiralBezier file", err.Error())
	}
}

// Backup generates a json file from a slice of all SpiralBezierDB instances in the backrepo
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SpiralBezierDB, 0)
	for _, spiralbezierDB := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB {
		forBackup = append(forBackup, spiralbezierDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SpiralBezier")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SpiralBezier_Fields, -1)
	for _, spiralbezierDB := range forBackup {

		var spiralbezierWOP SpiralBezierWOP
		spiralbezierDB.CopyBasicFieldsToSpiralBezierWOP(&spiralbezierWOP)

		row := sh.AddRow()
		row.WriteStruct(&spiralbezierWOP, -1)
	}
}

// RestoreXL from the "SpiralBezier" sheet all SpiralBezierDB instances
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSpiralBezierid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SpiralBezier"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSpiralBezier.rowVisitorSpiralBezier)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) rowVisitorSpiralBezier(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spiralbezierWOP SpiralBezierWOP
		row.ReadStruct(&spiralbezierWOP)

		// add the unmarshalled struct to the stage
		spiralbezierDB := new(SpiralBezierDB)
		spiralbezierDB.CopyBasicFieldsFromSpiralBezierWOP(&spiralbezierWOP)

		spiralbezierDB_ID_atBackupTime := spiralbezierDB.ID
		spiralbezierDB.ID = 0
		_, err := backRepoSpiralBezier.db.Create(spiralbezierDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[spiralbezierDB.ID] = spiralbezierDB
		BackRepoSpiralBezierid_atBckpTime_newID[spiralbezierDB_ID_atBackupTime] = spiralbezierDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SpiralBezierDB.json" in dirPath that stores an array
// of SpiralBezierDB and stores it in the database
// the map BackRepoSpiralBezierid_atBckpTime_newID is updated accordingly
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSpiralBezierid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SpiralBezierDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SpiralBezier file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SpiralBezierDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SpiralBezierDBID_SpiralBezierDB
	for _, spiralbezierDB := range forRestore {

		spiralbezierDB_ID_atBackupTime := spiralbezierDB.ID
		spiralbezierDB.ID = 0
		_, err := backRepoSpiralBezier.db.Create(spiralbezierDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[spiralbezierDB.ID] = spiralbezierDB
		BackRepoSpiralBezierid_atBckpTime_newID[spiralbezierDB_ID_atBackupTime] = spiralbezierDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SpiralBezier file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SpiralBezier>id_atBckpTime_newID
// to compute new index
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) RestorePhaseTwo() {

	for _, spiralbezierDB := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB {

		// next line of code is to avert unused variable compilation error
		_ = spiralbezierDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if spiralbezierDB.ShapeCategoryID.Int64 != 0 {
			spiralbezierDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(spiralbezierDB.ShapeCategoryID.Int64)])
			spiralbezierDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSpiralBezier.db.Model(spiralbezierDB)
		_, err := db.Updates(*spiralbezierDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSpiralBezier.ResetReversePointers commits all staged instances of SpiralBezier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spiralbezier := range backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr {
		backRepoSpiralBezier.ResetReversePointersInstance(backRepo, idx, spiralbezier)
	}

	return
}

func (backRepoSpiralBezier *BackRepoSpiralBezierStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spiralbezier *models.SpiralBezier) (Error error) {

	// fetch matching spiralbezierDB
	if spiralbezierDB, ok := backRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierDB[idx]; ok {
		_ = spiralbezierDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSpiralBezierid_atBckpTime_newID map[uint]uint
