// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Diagram_sql sql.NullBool
var dummy_Diagram_time time.Duration
var dummy_Diagram_sort sort.Float64Slice

// DiagramAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model diagramAPI
type DiagramAPI struct {
	gorm.Model

	models.Diagram_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DiagramPointersEncoding DiagramPointersEncoding
}

// DiagramPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DiagramPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DiagramDB describes a diagram in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model diagramDB
type DiagramDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field diagramDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DiagramPointersEncoding
}

// DiagramDBs arrays diagramDBs
// swagger:response diagramDBsResponse
type DiagramDBs []DiagramDB

// DiagramDBResponse provides response
// swagger:response diagramDBResponse
type DiagramDBResponse struct {
	DiagramDB
}

// DiagramWOP is a Diagram without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DiagramWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Diagram_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDiagramStruct struct {
	// stores DiagramDB according to their gorm ID
	Map_DiagramDBID_DiagramDB map[uint]*DiagramDB

	// stores DiagramDB ID according to Diagram address
	Map_DiagramPtr_DiagramDBID map[*models.Diagram]uint

	// stores Diagram according to their gorm ID
	Map_DiagramDBID_DiagramPtr map[uint]*models.Diagram

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDiagram *BackRepoDiagramStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDiagram.stage
	return
}

func (backRepoDiagram *BackRepoDiagramStruct) GetDB() *gorm.DB {
	return backRepoDiagram.db
}

// GetDiagramDBFromDiagramPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDiagram *BackRepoDiagramStruct) GetDiagramDBFromDiagramPtr(diagram *models.Diagram) (diagramDB *DiagramDB) {
	id := backRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram]
	diagramDB = backRepoDiagram.Map_DiagramDBID_DiagramDB[id]
	return
}

// BackRepoDiagram.CommitPhaseOne commits all staged instances of Diagram to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDiagram *BackRepoDiagramStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for diagram := range stage.Diagrams {
		backRepoDiagram.CommitPhaseOneInstance(diagram)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, diagram := range backRepoDiagram.Map_DiagramDBID_DiagramPtr {
		if _, ok := stage.Diagrams[diagram]; !ok {
			backRepoDiagram.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDiagram.CommitDeleteInstance commits deletion of Diagram to the BackRepo
func (backRepoDiagram *BackRepoDiagramStruct) CommitDeleteInstance(id uint) (Error error) {

	diagram := backRepoDiagram.Map_DiagramDBID_DiagramPtr[id]

	// diagram is not staged anymore, remove diagramDB
	diagramDB := backRepoDiagram.Map_DiagramDBID_DiagramDB[id]
	query := backRepoDiagram.db.Unscoped().Delete(&diagramDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDiagram.Map_DiagramPtr_DiagramDBID, diagram)
	delete(backRepoDiagram.Map_DiagramDBID_DiagramPtr, id)
	delete(backRepoDiagram.Map_DiagramDBID_DiagramDB, id)

	return
}

// BackRepoDiagram.CommitPhaseOneInstance commits diagram staged instances of Diagram to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDiagram *BackRepoDiagramStruct) CommitPhaseOneInstance(diagram *models.Diagram) (Error error) {

	// check if the diagram is not commited yet
	if _, ok := backRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram]; ok {
		return
	}

	// initiate diagram
	var diagramDB DiagramDB
	diagramDB.CopyBasicFieldsFromDiagram(diagram)

	query := backRepoDiagram.db.Create(&diagramDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram] = diagramDB.ID
	backRepoDiagram.Map_DiagramDBID_DiagramPtr[diagramDB.ID] = diagram
	backRepoDiagram.Map_DiagramDBID_DiagramDB[diagramDB.ID] = &diagramDB

	return
}

// BackRepoDiagram.CommitPhaseTwo commits all staged instances of Diagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagram *BackRepoDiagramStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, diagram := range backRepoDiagram.Map_DiagramDBID_DiagramPtr {
		backRepoDiagram.CommitPhaseTwoInstance(backRepo, idx, diagram)
	}

	return
}

// BackRepoDiagram.CommitPhaseTwoInstance commits {{structname }} of models.Diagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagram *BackRepoDiagramStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, diagram *models.Diagram) (Error error) {

	// fetch matching diagramDB
	if diagramDB, ok := backRepoDiagram.Map_DiagramDBID_DiagramDB[idx]; ok {

		diagramDB.CopyBasicFieldsFromDiagram(diagram)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDiagram.db.Save(&diagramDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Diagram intance %s", diagram.Name))
		return err
	}

	return
}

// BackRepoDiagram.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDiagram *BackRepoDiagramStruct) CheckoutPhaseOne() (Error error) {

	diagramDBArray := make([]DiagramDB, 0)
	query := backRepoDiagram.db.Find(&diagramDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	diagramInstancesToBeRemovedFromTheStage := make(map[*models.Diagram]any)
	for key, value := range backRepoDiagram.stage.Diagrams {
		diagramInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, diagramDB := range diagramDBArray {
		backRepoDiagram.CheckoutPhaseOneInstance(&diagramDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		diagram, ok := backRepoDiagram.Map_DiagramDBID_DiagramPtr[diagramDB.ID]
		if ok {
			delete(diagramInstancesToBeRemovedFromTheStage, diagram)
		}
	}

	// remove from stage and back repo's 3 maps all diagrams that are not in the checkout
	for diagram := range diagramInstancesToBeRemovedFromTheStage {
		diagram.Unstage(backRepoDiagram.GetStage())

		// remove instance from the back repo 3 maps
		diagramID := backRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram]
		delete(backRepoDiagram.Map_DiagramPtr_DiagramDBID, diagram)
		delete(backRepoDiagram.Map_DiagramDBID_DiagramDB, diagramID)
		delete(backRepoDiagram.Map_DiagramDBID_DiagramPtr, diagramID)
	}

	return
}

// CheckoutPhaseOneInstance takes a diagramDB that has been found in the DB, updates the backRepo and stages the
// models version of the diagramDB
func (backRepoDiagram *BackRepoDiagramStruct) CheckoutPhaseOneInstance(diagramDB *DiagramDB) (Error error) {

	diagram, ok := backRepoDiagram.Map_DiagramDBID_DiagramPtr[diagramDB.ID]
	if !ok {
		diagram = new(models.Diagram)

		backRepoDiagram.Map_DiagramDBID_DiagramPtr[diagramDB.ID] = diagram
		backRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram] = diagramDB.ID

		// append model store with the new element
		diagram.Name = diagramDB.Name_Data.String
		diagram.Stage(backRepoDiagram.GetStage())
	}
	diagramDB.CopyBasicFieldsToDiagram(diagram)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	diagram.Stage(backRepoDiagram.GetStage())

	// preserve pointer to diagramDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DiagramDBID_DiagramDB)[diagramDB hold variable pointers
	diagramDB_Data := *diagramDB
	preservedPtrToDiagram := &diagramDB_Data
	backRepoDiagram.Map_DiagramDBID_DiagramDB[diagramDB.ID] = preservedPtrToDiagram

	return
}

// BackRepoDiagram.CheckoutPhaseTwo Checkouts all staged instances of Diagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagram *BackRepoDiagramStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, diagramDB := range backRepoDiagram.Map_DiagramDBID_DiagramDB {
		backRepoDiagram.CheckoutPhaseTwoInstance(backRepo, diagramDB)
	}
	return
}

// BackRepoDiagram.CheckoutPhaseTwoInstance Checkouts staged instances of Diagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagram *BackRepoDiagramStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, diagramDB *DiagramDB) (Error error) {

	diagram := backRepoDiagram.Map_DiagramDBID_DiagramPtr[diagramDB.ID]

	diagramDB.DecodePointers(backRepo, diagram)

	return
}

func (diagramDB *DiagramDB) DecodePointers(backRepo *BackRepoStruct, diagram *models.Diagram) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDiagram allows commit of a single diagram (if already staged)
func (backRepo *BackRepoStruct) CommitDiagram(diagram *models.Diagram) {
	backRepo.BackRepoDiagram.CommitPhaseOneInstance(diagram)
	if id, ok := backRepo.BackRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram]; ok {
		backRepo.BackRepoDiagram.CommitPhaseTwoInstance(backRepo, id, diagram)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDiagram allows checkout of a single diagram (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDiagram(diagram *models.Diagram) {
	// check if the diagram is staged
	if _, ok := backRepo.BackRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram]; ok {

		if id, ok := backRepo.BackRepoDiagram.Map_DiagramPtr_DiagramDBID[diagram]; ok {
			var diagramDB DiagramDB
			diagramDB.ID = id

			if err := backRepo.BackRepoDiagram.db.First(&diagramDB, id).Error; err != nil {
				log.Fatalln("CheckoutDiagram : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDiagram.CheckoutPhaseOneInstance(&diagramDB)
			backRepo.BackRepoDiagram.CheckoutPhaseTwoInstance(backRepo, &diagramDB)
		}
	}
}

// CopyBasicFieldsFromDiagram
func (diagramDB *DiagramDB) CopyBasicFieldsFromDiagram(diagram *models.Diagram) {
	// insertion point for fields commit

	diagramDB.Name_Data.String = diagram.Name
	diagramDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDiagram_WOP
func (diagramDB *DiagramDB) CopyBasicFieldsFromDiagram_WOP(diagram *models.Diagram_WOP) {
	// insertion point for fields commit

	diagramDB.Name_Data.String = diagram.Name
	diagramDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDiagramWOP
func (diagramDB *DiagramDB) CopyBasicFieldsFromDiagramWOP(diagram *DiagramWOP) {
	// insertion point for fields commit

	diagramDB.Name_Data.String = diagram.Name
	diagramDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDiagram
func (diagramDB *DiagramDB) CopyBasicFieldsToDiagram(diagram *models.Diagram) {
	// insertion point for checkout of basic fields (back repo to stage)
	diagram.Name = diagramDB.Name_Data.String
}

// CopyBasicFieldsToDiagram_WOP
func (diagramDB *DiagramDB) CopyBasicFieldsToDiagram_WOP(diagram *models.Diagram_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	diagram.Name = diagramDB.Name_Data.String
}

// CopyBasicFieldsToDiagramWOP
func (diagramDB *DiagramDB) CopyBasicFieldsToDiagramWOP(diagram *DiagramWOP) {
	diagram.ID = int(diagramDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	diagram.Name = diagramDB.Name_Data.String
}

// Backup generates a json file from a slice of all DiagramDB instances in the backrepo
func (backRepoDiagram *BackRepoDiagramStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DiagramDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DiagramDB, 0)
	for _, diagramDB := range backRepoDiagram.Map_DiagramDBID_DiagramDB {
		forBackup = append(forBackup, diagramDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Diagram ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Diagram file", err.Error())
	}
}

// Backup generates a json file from a slice of all DiagramDB instances in the backrepo
func (backRepoDiagram *BackRepoDiagramStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DiagramDB, 0)
	for _, diagramDB := range backRepoDiagram.Map_DiagramDBID_DiagramDB {
		forBackup = append(forBackup, diagramDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Diagram")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Diagram_Fields, -1)
	for _, diagramDB := range forBackup {

		var diagramWOP DiagramWOP
		diagramDB.CopyBasicFieldsToDiagramWOP(&diagramWOP)

		row := sh.AddRow()
		row.WriteStruct(&diagramWOP, -1)
	}
}

// RestoreXL from the "Diagram" sheet all DiagramDB instances
func (backRepoDiagram *BackRepoDiagramStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDiagramid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Diagram"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDiagram.rowVisitorDiagram)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDiagram *BackRepoDiagramStruct) rowVisitorDiagram(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var diagramWOP DiagramWOP
		row.ReadStruct(&diagramWOP)

		// add the unmarshalled struct to the stage
		diagramDB := new(DiagramDB)
		diagramDB.CopyBasicFieldsFromDiagramWOP(&diagramWOP)

		diagramDB_ID_atBackupTime := diagramDB.ID
		diagramDB.ID = 0
		query := backRepoDiagram.db.Create(diagramDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDiagram.Map_DiagramDBID_DiagramDB[diagramDB.ID] = diagramDB
		BackRepoDiagramid_atBckpTime_newID[diagramDB_ID_atBackupTime] = diagramDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DiagramDB.json" in dirPath that stores an array
// of DiagramDB and stores it in the database
// the map BackRepoDiagramid_atBckpTime_newID is updated accordingly
func (backRepoDiagram *BackRepoDiagramStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDiagramid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DiagramDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Diagram file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DiagramDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DiagramDBID_DiagramDB
	for _, diagramDB := range forRestore {

		diagramDB_ID_atBackupTime := diagramDB.ID
		diagramDB.ID = 0
		query := backRepoDiagram.db.Create(diagramDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDiagram.Map_DiagramDBID_DiagramDB[diagramDB.ID] = diagramDB
		BackRepoDiagramid_atBckpTime_newID[diagramDB_ID_atBackupTime] = diagramDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Diagram file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Diagram>id_atBckpTime_newID
// to compute new index
func (backRepoDiagram *BackRepoDiagramStruct) RestorePhaseTwo() {

	for _, diagramDB := range backRepoDiagram.Map_DiagramDBID_DiagramDB {

		// next line of code is to avert unused variable compilation error
		_ = diagramDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDiagram.db.Model(diagramDB).Updates(*diagramDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDiagram.ResetReversePointers commits all staged instances of Diagram to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDiagram *BackRepoDiagramStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, diagram := range backRepoDiagram.Map_DiagramDBID_DiagramPtr {
		backRepoDiagram.ResetReversePointersInstance(backRepo, idx, diagram)
	}

	return
}

func (backRepoDiagram *BackRepoDiagramStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, diagram *models.Diagram) (Error error) {

	// fetch matching diagramDB
	if diagramDB, ok := backRepoDiagram.Map_DiagramDBID_DiagramDB[idx]; ok {
		_ = diagramDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDiagramid_atBckpTime_newID map[uint]uint
