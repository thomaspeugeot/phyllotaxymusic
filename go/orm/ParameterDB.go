// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Parameter_sql sql.NullBool
var dummy_Parameter_time time.Duration
var dummy_Parameter_sort sort.Float64Slice

// ParameterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model parameterAPI
type ParameterAPI struct {
	gorm.Model

	models.Parameter_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ParameterPointersEncoding ParameterPointersEncoding
}

// ParameterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ParameterPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field InitialRhombus is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	InitialRhombusID sql.NullInt64

	// field HorizontalAxis is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	HorizontalAxisID sql.NullInt64
}

// ParameterDB describes a parameter in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model parameterDB
type ParameterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field parameterDB.Name
	Name_Data sql.NullString

	// Declation for basic field parameterDB.N
	N_Data sql.NullInt64

	// Declation for basic field parameterDB.M
	M_Data sql.NullInt64

	// Declation for basic field parameterDB.Angle
	Angle_Data sql.NullFloat64

	// Declation for basic field parameterDB.DiamondSideLenght
	DiamondSideLenght_Data sql.NullFloat64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ParameterPointersEncoding
}

// ParameterDBs arrays parameterDBs
// swagger:response parameterDBsResponse
type ParameterDBs []ParameterDB

// ParameterDBResponse provides response
// swagger:response parameterDBResponse
type ParameterDBResponse struct {
	ParameterDB
}

// ParameterWOP is a Parameter without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ParameterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	N int `xlsx:"2"`

	M int `xlsx:"3"`

	Angle float64 `xlsx:"4"`

	DiamondSideLenght float64 `xlsx:"5"`
	// insertion for WOP pointer fields
}

var Parameter_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"N",
	"M",
	"Angle",
	"DiamondSideLenght",
}

type BackRepoParameterStruct struct {
	// stores ParameterDB according to their gorm ID
	Map_ParameterDBID_ParameterDB map[uint]*ParameterDB

	// stores ParameterDB ID according to Parameter address
	Map_ParameterPtr_ParameterDBID map[*models.Parameter]uint

	// stores Parameter according to their gorm ID
	Map_ParameterDBID_ParameterPtr map[uint]*models.Parameter

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoParameter *BackRepoParameterStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoParameter.stage
	return
}

func (backRepoParameter *BackRepoParameterStruct) GetDB() *gorm.DB {
	return backRepoParameter.db
}

// GetParameterDBFromParameterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoParameter *BackRepoParameterStruct) GetParameterDBFromParameterPtr(parameter *models.Parameter) (parameterDB *ParameterDB) {
	id := backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]
	parameterDB = backRepoParameter.Map_ParameterDBID_ParameterDB[id]
	return
}

// BackRepoParameter.CommitPhaseOne commits all staged instances of Parameter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for parameter := range stage.Parameters {
		backRepoParameter.CommitPhaseOneInstance(parameter)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, parameter := range backRepoParameter.Map_ParameterDBID_ParameterPtr {
		if _, ok := stage.Parameters[parameter]; !ok {
			backRepoParameter.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoParameter.CommitDeleteInstance commits deletion of Parameter to the BackRepo
func (backRepoParameter *BackRepoParameterStruct) CommitDeleteInstance(id uint) (Error error) {

	parameter := backRepoParameter.Map_ParameterDBID_ParameterPtr[id]

	// parameter is not staged anymore, remove parameterDB
	parameterDB := backRepoParameter.Map_ParameterDBID_ParameterDB[id]
	query := backRepoParameter.db.Unscoped().Delete(&parameterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoParameter.Map_ParameterPtr_ParameterDBID, parameter)
	delete(backRepoParameter.Map_ParameterDBID_ParameterPtr, id)
	delete(backRepoParameter.Map_ParameterDBID_ParameterDB, id)

	return
}

// BackRepoParameter.CommitPhaseOneInstance commits parameter staged instances of Parameter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseOneInstance(parameter *models.Parameter) (Error error) {

	// check if the parameter is not commited yet
	if _, ok := backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {
		return
	}

	// initiate parameter
	var parameterDB ParameterDB
	parameterDB.CopyBasicFieldsFromParameter(parameter)

	query := backRepoParameter.db.Create(&parameterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter] = parameterDB.ID
	backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID] = parameter
	backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = &parameterDB

	return
}

// BackRepoParameter.CommitPhaseTwo commits all staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, parameter := range backRepoParameter.Map_ParameterDBID_ParameterPtr {
		backRepoParameter.CommitPhaseTwoInstance(backRepo, idx, parameter)
	}

	return
}

// BackRepoParameter.CommitPhaseTwoInstance commits {{structname }} of models.Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, parameter *models.Parameter) (Error error) {

	// fetch matching parameterDB
	if parameterDB, ok := backRepoParameter.Map_ParameterDBID_ParameterDB[idx]; ok {

		parameterDB.CopyBasicFieldsFromParameter(parameter)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value parameter.InitialRhombus translates to updating the parameter.InitialRhombusID
		parameterDB.InitialRhombusID.Valid = true // allow for a 0 value (nil association)
		if parameter.InitialRhombus != nil {
			if InitialRhombusId, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[parameter.InitialRhombus]; ok {
				parameterDB.InitialRhombusID.Int64 = int64(InitialRhombusId)
				parameterDB.InitialRhombusID.Valid = true
			}
		} else {
			parameterDB.InitialRhombusID.Int64 = 0
			parameterDB.InitialRhombusID.Valid = true
		}

		// commit pointer value parameter.HorizontalAxis translates to updating the parameter.HorizontalAxisID
		parameterDB.HorizontalAxisID.Valid = true // allow for a 0 value (nil association)
		if parameter.HorizontalAxis != nil {
			if HorizontalAxisId, ok := backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[parameter.HorizontalAxis]; ok {
				parameterDB.HorizontalAxisID.Int64 = int64(HorizontalAxisId)
				parameterDB.HorizontalAxisID.Valid = true
			}
		} else {
			parameterDB.HorizontalAxisID.Int64 = 0
			parameterDB.HorizontalAxisID.Valid = true
		}

		query := backRepoParameter.db.Save(&parameterDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Parameter intance %s", parameter.Name))
		return err
	}

	return
}

// BackRepoParameter.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseOne() (Error error) {

	parameterDBArray := make([]ParameterDB, 0)
	query := backRepoParameter.db.Find(&parameterDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	parameterInstancesToBeRemovedFromTheStage := make(map[*models.Parameter]any)
	for key, value := range backRepoParameter.stage.Parameters {
		parameterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, parameterDB := range parameterDBArray {
		backRepoParameter.CheckoutPhaseOneInstance(&parameterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		parameter, ok := backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID]
		if ok {
			delete(parameterInstancesToBeRemovedFromTheStage, parameter)
		}
	}

	// remove from stage and back repo's 3 maps all parameters that are not in the checkout
	for parameter := range parameterInstancesToBeRemovedFromTheStage {
		parameter.Unstage(backRepoParameter.GetStage())

		// remove instance from the back repo 3 maps
		parameterID := backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]
		delete(backRepoParameter.Map_ParameterPtr_ParameterDBID, parameter)
		delete(backRepoParameter.Map_ParameterDBID_ParameterDB, parameterID)
		delete(backRepoParameter.Map_ParameterDBID_ParameterPtr, parameterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a parameterDB that has been found in the DB, updates the backRepo and stages the
// models version of the parameterDB
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseOneInstance(parameterDB *ParameterDB) (Error error) {

	parameter, ok := backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID]
	if !ok {
		parameter = new(models.Parameter)

		backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID] = parameter
		backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter] = parameterDB.ID

		// append model store with the new element
		parameter.Name = parameterDB.Name_Data.String
		parameter.Stage(backRepoParameter.GetStage())
	}
	parameterDB.CopyBasicFieldsToParameter(parameter)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	parameter.Stage(backRepoParameter.GetStage())

	// preserve pointer to parameterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ParameterDBID_ParameterDB)[parameterDB hold variable pointers
	parameterDB_Data := *parameterDB
	preservedPtrToParameter := &parameterDB_Data
	backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = preservedPtrToParameter

	return
}

// BackRepoParameter.CheckoutPhaseTwo Checkouts all staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {
		backRepoParameter.CheckoutPhaseTwoInstance(backRepo, parameterDB)
	}
	return
}

// BackRepoParameter.CheckoutPhaseTwoInstance Checkouts staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, parameterDB *ParameterDB) (Error error) {

	parameter := backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID]

	parameterDB.DecodePointers(backRepo, parameter)

	return
}

func (parameterDB *ParameterDB) DecodePointers(backRepo *BackRepoStruct, parameter *models.Parameter) {

	// insertion point for checkout of pointer encoding
	// InitialRhombus field
	parameter.InitialRhombus = nil
	if parameterDB.InitialRhombusID.Int64 != 0 {
		parameter.InitialRhombus = backRepo.BackRepoRhombus.Map_RhombusDBID_RhombusPtr[uint(parameterDB.InitialRhombusID.Int64)]
	}
	// HorizontalAxis field
	parameter.HorizontalAxis = nil
	if parameterDB.HorizontalAxisID.Int64 != 0 {
		parameter.HorizontalAxis = backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[uint(parameterDB.HorizontalAxisID.Int64)]
	}
	return
}

// CommitParameter allows commit of a single parameter (if already staged)
func (backRepo *BackRepoStruct) CommitParameter(parameter *models.Parameter) {
	backRepo.BackRepoParameter.CommitPhaseOneInstance(parameter)
	if id, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {
		backRepo.BackRepoParameter.CommitPhaseTwoInstance(backRepo, id, parameter)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitParameter allows checkout of a single parameter (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutParameter(parameter *models.Parameter) {
	// check if the parameter is staged
	if _, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {

		if id, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {
			var parameterDB ParameterDB
			parameterDB.ID = id

			if err := backRepo.BackRepoParameter.db.First(&parameterDB, id).Error; err != nil {
				log.Fatalln("CheckoutParameter : Problem with getting object with id:", id)
			}
			backRepo.BackRepoParameter.CheckoutPhaseOneInstance(&parameterDB)
			backRepo.BackRepoParameter.CheckoutPhaseTwoInstance(backRepo, &parameterDB)
		}
	}
}

// CopyBasicFieldsFromParameter
func (parameterDB *ParameterDB) CopyBasicFieldsFromParameter(parameter *models.Parameter) {
	// insertion point for fields commit

	parameterDB.Name_Data.String = parameter.Name
	parameterDB.Name_Data.Valid = true

	parameterDB.N_Data.Int64 = int64(parameter.N)
	parameterDB.N_Data.Valid = true

	parameterDB.M_Data.Int64 = int64(parameter.M)
	parameterDB.M_Data.Valid = true

	parameterDB.Angle_Data.Float64 = parameter.Angle
	parameterDB.Angle_Data.Valid = true

	parameterDB.DiamondSideLenght_Data.Float64 = parameter.DiamondSideLenght
	parameterDB.DiamondSideLenght_Data.Valid = true
}

// CopyBasicFieldsFromParameter_WOP
func (parameterDB *ParameterDB) CopyBasicFieldsFromParameter_WOP(parameter *models.Parameter_WOP) {
	// insertion point for fields commit

	parameterDB.Name_Data.String = parameter.Name
	parameterDB.Name_Data.Valid = true

	parameterDB.N_Data.Int64 = int64(parameter.N)
	parameterDB.N_Data.Valid = true

	parameterDB.M_Data.Int64 = int64(parameter.M)
	parameterDB.M_Data.Valid = true

	parameterDB.Angle_Data.Float64 = parameter.Angle
	parameterDB.Angle_Data.Valid = true

	parameterDB.DiamondSideLenght_Data.Float64 = parameter.DiamondSideLenght
	parameterDB.DiamondSideLenght_Data.Valid = true
}

// CopyBasicFieldsFromParameterWOP
func (parameterDB *ParameterDB) CopyBasicFieldsFromParameterWOP(parameter *ParameterWOP) {
	// insertion point for fields commit

	parameterDB.Name_Data.String = parameter.Name
	parameterDB.Name_Data.Valid = true

	parameterDB.N_Data.Int64 = int64(parameter.N)
	parameterDB.N_Data.Valid = true

	parameterDB.M_Data.Int64 = int64(parameter.M)
	parameterDB.M_Data.Valid = true

	parameterDB.Angle_Data.Float64 = parameter.Angle
	parameterDB.Angle_Data.Valid = true

	parameterDB.DiamondSideLenght_Data.Float64 = parameter.DiamondSideLenght
	parameterDB.DiamondSideLenght_Data.Valid = true
}

// CopyBasicFieldsToParameter
func (parameterDB *ParameterDB) CopyBasicFieldsToParameter(parameter *models.Parameter) {
	// insertion point for checkout of basic fields (back repo to stage)
	parameter.Name = parameterDB.Name_Data.String
	parameter.N = int(parameterDB.N_Data.Int64)
	parameter.M = int(parameterDB.M_Data.Int64)
	parameter.Angle = parameterDB.Angle_Data.Float64
	parameter.DiamondSideLenght = parameterDB.DiamondSideLenght_Data.Float64
}

// CopyBasicFieldsToParameter_WOP
func (parameterDB *ParameterDB) CopyBasicFieldsToParameter_WOP(parameter *models.Parameter_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	parameter.Name = parameterDB.Name_Data.String
	parameter.N = int(parameterDB.N_Data.Int64)
	parameter.M = int(parameterDB.M_Data.Int64)
	parameter.Angle = parameterDB.Angle_Data.Float64
	parameter.DiamondSideLenght = parameterDB.DiamondSideLenght_Data.Float64
}

// CopyBasicFieldsToParameterWOP
func (parameterDB *ParameterDB) CopyBasicFieldsToParameterWOP(parameter *ParameterWOP) {
	parameter.ID = int(parameterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	parameter.Name = parameterDB.Name_Data.String
	parameter.N = int(parameterDB.N_Data.Int64)
	parameter.M = int(parameterDB.M_Data.Int64)
	parameter.Angle = parameterDB.Angle_Data.Float64
	parameter.DiamondSideLenght = parameterDB.DiamondSideLenght_Data.Float64
}

// Backup generates a json file from a slice of all ParameterDB instances in the backrepo
func (backRepoParameter *BackRepoParameterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ParameterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ParameterDB, 0)
	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {
		forBackup = append(forBackup, parameterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Parameter ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Parameter file", err.Error())
	}
}

// Backup generates a json file from a slice of all ParameterDB instances in the backrepo
func (backRepoParameter *BackRepoParameterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ParameterDB, 0)
	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {
		forBackup = append(forBackup, parameterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Parameter")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Parameter_Fields, -1)
	for _, parameterDB := range forBackup {

		var parameterWOP ParameterWOP
		parameterDB.CopyBasicFieldsToParameterWOP(&parameterWOP)

		row := sh.AddRow()
		row.WriteStruct(&parameterWOP, -1)
	}
}

// RestoreXL from the "Parameter" sheet all ParameterDB instances
func (backRepoParameter *BackRepoParameterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoParameterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Parameter"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoParameter.rowVisitorParameter)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoParameter *BackRepoParameterStruct) rowVisitorParameter(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var parameterWOP ParameterWOP
		row.ReadStruct(&parameterWOP)

		// add the unmarshalled struct to the stage
		parameterDB := new(ParameterDB)
		parameterDB.CopyBasicFieldsFromParameterWOP(&parameterWOP)

		parameterDB_ID_atBackupTime := parameterDB.ID
		parameterDB.ID = 0
		query := backRepoParameter.db.Create(parameterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = parameterDB
		BackRepoParameterid_atBckpTime_newID[parameterDB_ID_atBackupTime] = parameterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ParameterDB.json" in dirPath that stores an array
// of ParameterDB and stores it in the database
// the map BackRepoParameterid_atBckpTime_newID is updated accordingly
func (backRepoParameter *BackRepoParameterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoParameterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ParameterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Parameter file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ParameterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ParameterDBID_ParameterDB
	for _, parameterDB := range forRestore {

		parameterDB_ID_atBackupTime := parameterDB.ID
		parameterDB.ID = 0
		query := backRepoParameter.db.Create(parameterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = parameterDB
		BackRepoParameterid_atBckpTime_newID[parameterDB_ID_atBackupTime] = parameterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Parameter file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Parameter>id_atBckpTime_newID
// to compute new index
func (backRepoParameter *BackRepoParameterStruct) RestorePhaseTwo() {

	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {

		// next line of code is to avert unused variable compilation error
		_ = parameterDB

		// insertion point for reindexing pointers encoding
		// reindexing InitialRhombus field
		if parameterDB.InitialRhombusID.Int64 != 0 {
			parameterDB.InitialRhombusID.Int64 = int64(BackRepoRhombusid_atBckpTime_newID[uint(parameterDB.InitialRhombusID.Int64)])
			parameterDB.InitialRhombusID.Valid = true
		}

		// reindexing HorizontalAxis field
		if parameterDB.HorizontalAxisID.Int64 != 0 {
			parameterDB.HorizontalAxisID.Int64 = int64(BackRepoHorizontalAxisid_atBckpTime_newID[uint(parameterDB.HorizontalAxisID.Int64)])
			parameterDB.HorizontalAxisID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoParameter.db.Model(parameterDB).Updates(*parameterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoParameter.ResetReversePointers commits all staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, parameter := range backRepoParameter.Map_ParameterDBID_ParameterPtr {
		backRepoParameter.ResetReversePointersInstance(backRepo, idx, parameter)
	}

	return
}

func (backRepoParameter *BackRepoParameterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, parameter *models.Parameter) (Error error) {

	// fetch matching parameterDB
	if parameterDB, ok := backRepoParameter.Map_ParameterDBID_ParameterDB[idx]; ok {
		_ = parameterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoParameterid_atBckpTime_newID map[uint]uint
