// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/db"
	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Parameter_sql sql.NullBool
var dummy_Parameter_time time.Duration
var dummy_Parameter_sort sort.Float64Slice

// ParameterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model parameterAPI
type ParameterAPI struct {
	gorm.Model

	models.Parameter_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ParameterPointersEncoding ParameterPointersEncoding
}

// ParameterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ParameterPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field InitialRhombus is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	InitialRhombusID sql.NullInt64

	// field InitialCircle is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	InitialCircleID sql.NullInt64

	// field InitialRhombusGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	InitialRhombusGridID sql.NullInt64

	// field InitialCircleGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	InitialCircleGridID sql.NullInt64

	// field InitialAxis is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	InitialAxisID sql.NullInt64

	// field RotatedAxis is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RotatedAxisID sql.NullInt64

	// field RotatedRhombus is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RotatedRhombusID sql.NullInt64

	// field RotatedRhombusGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RotatedRhombusGridID sql.NullInt64

	// field RotatedCircleGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RotatedCircleGridID sql.NullInt64

	// field NextRhombus is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NextRhombusID sql.NullInt64

	// field NextCircle is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NextCircleID sql.NullInt64

	// field GrowingRhombusGridSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowingRhombusGridSeedID sql.NullInt64

	// field GrowingRhombusGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowingRhombusGridID sql.NullInt64

	// field GrowingCircleGridSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowingCircleGridSeedID sql.NullInt64

	// field GrowingCircleGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowingCircleGridID sql.NullInt64

	// field GrowingCircleGridLeftSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowingCircleGridLeftSeedID sql.NullInt64

	// field GrowingCircleGridLeft is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowingCircleGridLeftID sql.NullInt64

	// field ConstructionAxis is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ConstructionAxisID sql.NullInt64

	// field ConstructionAxisGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ConstructionAxisGridID sql.NullInt64

	// field ConstructionCircle is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ConstructionCircleID sql.NullInt64

	// field ConstructionCircleGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ConstructionCircleGridID sql.NullInt64

	// field GrowthCurveSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveSeedID sql.NullInt64

	// field GrowthCurve is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveID sql.NullInt64

	// field GrowthCurveShiftedRightSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveShiftedRightSeedID sql.NullInt64

	// field GrowthCurveShiftedRight is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveShiftedRightID sql.NullInt64

	// field GrowthCurveNextSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveNextSeedID sql.NullInt64

	// field GrowthCurveNext is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveNextID sql.NullInt64

	// field GrowthCurveNextShiftedRightSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveNextShiftedRightSeedID sql.NullInt64

	// field GrowthCurveNextShiftedRight is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveNextShiftedRightID sql.NullInt64

	// field GrowthCurveStack is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GrowthCurveStackID sql.NullInt64

	// field SpiralRhombusGridSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralRhombusGridSeedID sql.NullInt64

	// field SpiralRhombusGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralRhombusGridID sql.NullInt64

	// field SpiralCircleSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralCircleSeedID sql.NullInt64

	// field SpiralCircleGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralCircleGridID sql.NullInt64

	// field SpiralCircleFullGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralCircleFullGridID sql.NullInt64

	// field SpiralConstructionOuterLineSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralConstructionOuterLineSeedID sql.NullInt64

	// field SpiralConstructionInnerLineSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralConstructionInnerLineSeedID sql.NullInt64

	// field SpiralConstructionOuterLineGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralConstructionOuterLineGridID sql.NullInt64

	// field SpiralConstructionInnerLineGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralConstructionInnerLineGridID sql.NullInt64

	// field SpiralConstructionCircleGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralConstructionCircleGridID sql.NullInt64

	// field SpiralConstructionOuterLineFullGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralConstructionOuterLineFullGridID sql.NullInt64

	// field SpiralBezierSeed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralBezierSeedID sql.NullInt64

	// field SpiralBezierGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralBezierGridID sql.NullInt64

	// field SpiralBezierFullGrid is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralBezierFullGridID sql.NullInt64

	// field FrontCurveStack is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FrontCurveStackID sql.NullInt64

	// field HourCurve is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	HourCurveID sql.NullInt64

	// field HourMarker is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	HourMarkerID sql.NullInt64

	// field MinuteCurve is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MinuteCurveID sql.NullInt64

	// field MinuteMarker is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MinuteMarkerID sql.NullInt64

	// field BackendCurve is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	BackendCurveID sql.NullInt64

	// field BackendMarker is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	BackendMarkerID sql.NullInt64

	// field Fkey is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FkeyID sql.NullInt64

	// field PitchLines is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PitchLinesID sql.NullInt64

	// field MeasureLines is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MeasureLinesID sql.NullInt64

	// field FirstVoice is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FirstVoiceID sql.NullInt64

	// field FirstVoiceShiftRigth is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FirstVoiceShiftRigthID sql.NullInt64

	// field SecondVoice is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SecondVoiceID sql.NullInt64

	// field SecondVoiceShiftedRight is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SecondVoiceShiftedRightID sql.NullInt64

	// field FirstVoiceNotes is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FirstVoiceNotesID sql.NullInt64

	// field FirstVoiceNotesShiftedRight is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FirstVoiceNotesShiftedRightID sql.NullInt64

	// field SecondVoiceNotes is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SecondVoiceNotesID sql.NullInt64

	// field SecondVoiceNotesShiftedRight is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SecondVoiceNotesShiftedRightID sql.NullInt64

	// field NoteInfos is a slice of pointers to another Struct (optional or 0..1)
	NoteInfos IntSlice `gorm:"type:TEXT"`

	// field HorizontalAxis is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	HorizontalAxisID sql.NullInt64

	// field VerticalAxis is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	VerticalAxisID sql.NullInt64

	// field SpiralOrigin is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SpiralOriginID sql.NullInt64
}

// ParameterDB describes a parameter in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model parameterDB
type ParameterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field parameterDB.Name
	Name_Data sql.NullString

	// Declation for basic field parameterDB.BackendColor
	BackendColor_Data sql.NullString

	// Declation for basic field parameterDB.MinuteColor
	MinuteColor_Data sql.NullString

	// Declation for basic field parameterDB.HourColor
	HourColor_Data sql.NullString

	// Declation for basic field parameterDB.N
	N_Data sql.NullInt64

	// Declation for basic field parameterDB.M
	M_Data sql.NullInt64

	// Declation for basic field parameterDB.Z
	Z_Data sql.NullInt64

	// Declation for basic field parameterDB.ShiftToNearestCircle
	ShiftToNearestCircle_Data sql.NullInt64

	// Declation for basic field parameterDB.InsideAngle
	InsideAngle_Data sql.NullFloat64

	// Declation for basic field parameterDB.SideLength
	SideLength_Data sql.NullFloat64

	// Declation for basic field parameterDB.StackWidth
	StackWidth_Data sql.NullInt64

	// Declation for basic field parameterDB.NbShitRight
	NbShitRight_Data sql.NullInt64

	// Declation for basic field parameterDB.StackHeight
	StackHeight_Data sql.NullInt64

	// Declation for basic field parameterDB.BezierControlLengthRatio
	BezierControlLengthRatio_Data sql.NullFloat64

	// Declation for basic field parameterDB.SpiralBezierStrength
	SpiralBezierStrength_Data sql.NullFloat64

	// Declation for basic field parameterDB.NbInterpolationPoints
	NbInterpolationPoints_Data sql.NullInt64

	// Declation for basic field parameterDB.HourHandleRotationAngle
	HourHandleRotationAngle_Data sql.NullFloat64

	// Declation for basic field parameterDB.HourHandleDiskDistance
	HourHandleDiskDistance_Data sql.NullFloat64

	// Declation for basic field parameterDB.HourHandleRadius
	HourHandleRadius_Data sql.NullFloat64

	// Declation for basic field parameterDB.MinuteHandleRotationAngle
	MinuteHandleRotationAngle_Data sql.NullFloat64

	// Declation for basic field parameterDB.MinuteHandleDiskDistance
	MinuteHandleDiskDistance_Data sql.NullFloat64

	// Declation for basic field parameterDB.MinuteHandleRadius
	MinuteHandleRadius_Data sql.NullFloat64

	// Declation for basic field parameterDB.MinuteOffset
	MinuteOffset_Data sql.NullFloat64

	// Declation for basic field parameterDB.BackendHandleRotationAngle
	BackendHandleRotationAngle_Data sql.NullFloat64

	// Declation for basic field parameterDB.BackendHandleDiskDistance
	BackendHandleDiskDistance_Data sql.NullFloat64

	// Declation for basic field parameterDB.BackendHandleRadius
	BackendHandleRadius_Data sql.NullFloat64

	// Declation for basic field parameterDB.BackendOffset
	BackendOffset_Data sql.NullFloat64

	// Declation for basic field parameterDB.FkeySizeRatio
	FkeySizeRatio_Data sql.NullFloat64

	// Declation for basic field parameterDB.FkeyOriginRelativeX
	FkeyOriginRelativeX_Data sql.NullFloat64

	// Declation for basic field parameterDB.FkeyOriginRelativeY
	FkeyOriginRelativeY_Data sql.NullFloat64

	// Declation for basic field parameterDB.PitchHeight
	PitchHeight_Data sql.NullFloat64

	// Declation for basic field parameterDB.NbPitchLines
	NbPitchLines_Data sql.NullInt64

	// Declation for basic field parameterDB.MeasureLinesHeightRatio
	MeasureLinesHeightRatio_Data sql.NullFloat64

	// Declation for basic field parameterDB.NbMeasureLines
	NbMeasureLines_Data sql.NullInt64

	// Declation for basic field parameterDB.NbMeasureLinesPerCurve
	NbMeasureLinesPerCurve_Data sql.NullInt64

	// Declation for basic field parameterDB.FirstVoiceShiftX
	FirstVoiceShiftX_Data sql.NullFloat64

	// Declation for basic field parameterDB.FirstVoiceShiftY
	FirstVoiceShiftY_Data sql.NullFloat64

	// Declation for basic field parameterDB.PitchDifference
	PitchDifference_Data sql.NullInt64

	// Declation for basic field parameterDB.Speed
	Speed_Data sql.NullFloat64

	// Declation for basic field parameterDB.Level
	Level_Data sql.NullFloat64

	// Declation for basic field parameterDB.IsMinor
	// provide the sql storage for the boolan
	IsMinor_Data sql.NullBool

	// Declation for basic field parameterDB.OriginX
	OriginX_Data sql.NullFloat64

	// Declation for basic field parameterDB.OriginY
	OriginY_Data sql.NullFloat64

	// Declation for basic field parameterDB.SpiralOriginX
	SpiralOriginX_Data sql.NullFloat64

	// Declation for basic field parameterDB.SpiralOriginY
	SpiralOriginY_Data sql.NullFloat64

	// Declation for basic field parameterDB.OriginCrossWidth
	OriginCrossWidth_Data sql.NullFloat64

	// Declation for basic field parameterDB.SpiralRadiusRatio
	SpiralRadiusRatio_Data sql.NullFloat64

	// Declation for basic field parameterDB.ShowSpiralBezierConstruct
	// provide the sql storage for the boolan
	ShowSpiralBezierConstruct_Data sql.NullBool

	// Declation for basic field parameterDB.ShowInterpolationPoints
	// provide the sql storage for the boolan
	ShowInterpolationPoints_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ParameterPointersEncoding
}

// ParameterDBs arrays parameterDBs
// swagger:response parameterDBsResponse
type ParameterDBs []ParameterDB

// ParameterDBResponse provides response
// swagger:response parameterDBResponse
type ParameterDBResponse struct {
	ParameterDB
}

// ParameterWOP is a Parameter without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ParameterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	BackendColor string `xlsx:"2"`

	MinuteColor string `xlsx:"3"`

	HourColor string `xlsx:"4"`

	N int `xlsx:"5"`

	M int `xlsx:"6"`

	Z int `xlsx:"7"`

	ShiftToNearestCircle int `xlsx:"8"`

	InsideAngle float64 `xlsx:"9"`

	SideLength float64 `xlsx:"10"`

	StackWidth int `xlsx:"11"`

	NbShitRight int `xlsx:"12"`

	StackHeight int `xlsx:"13"`

	BezierControlLengthRatio float64 `xlsx:"14"`

	SpiralBezierStrength float64 `xlsx:"15"`

	NbInterpolationPoints int `xlsx:"16"`

	HourHandleRotationAngle float64 `xlsx:"17"`

	HourHandleDiskDistance float64 `xlsx:"18"`

	HourHandleRadius float64 `xlsx:"19"`

	MinuteHandleRotationAngle float64 `xlsx:"20"`

	MinuteHandleDiskDistance float64 `xlsx:"21"`

	MinuteHandleRadius float64 `xlsx:"22"`

	MinuteOffset float64 `xlsx:"23"`

	BackendHandleRotationAngle float64 `xlsx:"24"`

	BackendHandleDiskDistance float64 `xlsx:"25"`

	BackendHandleRadius float64 `xlsx:"26"`

	BackendOffset float64 `xlsx:"27"`

	FkeySizeRatio float64 `xlsx:"28"`

	FkeyOriginRelativeX float64 `xlsx:"29"`

	FkeyOriginRelativeY float64 `xlsx:"30"`

	PitchHeight float64 `xlsx:"31"`

	NbPitchLines int `xlsx:"32"`

	MeasureLinesHeightRatio float64 `xlsx:"33"`

	NbMeasureLines int `xlsx:"34"`

	NbMeasureLinesPerCurve int `xlsx:"35"`

	FirstVoiceShiftX float64 `xlsx:"36"`

	FirstVoiceShiftY float64 `xlsx:"37"`

	PitchDifference int `xlsx:"38"`

	Speed float64 `xlsx:"39"`

	Level float64 `xlsx:"40"`

	IsMinor bool `xlsx:"41"`

	OriginX float64 `xlsx:"42"`

	OriginY float64 `xlsx:"43"`

	SpiralOriginX float64 `xlsx:"44"`

	SpiralOriginY float64 `xlsx:"45"`

	OriginCrossWidth float64 `xlsx:"46"`

	SpiralRadiusRatio float64 `xlsx:"47"`

	ShowSpiralBezierConstruct bool `xlsx:"48"`

	ShowInterpolationPoints bool `xlsx:"49"`
	// insertion for WOP pointer fields
}

var Parameter_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"BackendColor",
	"MinuteColor",
	"HourColor",
	"N",
	"M",
	"Z",
	"ShiftToNearestCircle",
	"InsideAngle",
	"SideLength",
	"StackWidth",
	"NbShitRight",
	"StackHeight",
	"BezierControlLengthRatio",
	"SpiralBezierStrength",
	"NbInterpolationPoints",
	"HourHandleRotationAngle",
	"HourHandleDiskDistance",
	"HourHandleRadius",
	"MinuteHandleRotationAngle",
	"MinuteHandleDiskDistance",
	"MinuteHandleRadius",
	"MinuteOffset",
	"BackendHandleRotationAngle",
	"BackendHandleDiskDistance",
	"BackendHandleRadius",
	"BackendOffset",
	"FkeySizeRatio",
	"FkeyOriginRelativeX",
	"FkeyOriginRelativeY",
	"PitchHeight",
	"NbPitchLines",
	"MeasureLinesHeightRatio",
	"NbMeasureLines",
	"NbMeasureLinesPerCurve",
	"FirstVoiceShiftX",
	"FirstVoiceShiftY",
	"PitchDifference",
	"Speed",
	"Level",
	"IsMinor",
	"OriginX",
	"OriginY",
	"SpiralOriginX",
	"SpiralOriginY",
	"OriginCrossWidth",
	"SpiralRadiusRatio",
	"ShowSpiralBezierConstruct",
	"ShowInterpolationPoints",
}

type BackRepoParameterStruct struct {
	// stores ParameterDB according to their gorm ID
	Map_ParameterDBID_ParameterDB map[uint]*ParameterDB

	// stores ParameterDB ID according to Parameter address
	Map_ParameterPtr_ParameterDBID map[*models.Parameter]uint

	// stores Parameter according to their gorm ID
	Map_ParameterDBID_ParameterPtr map[uint]*models.Parameter

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoParameter *BackRepoParameterStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoParameter.stage
	return
}

func (backRepoParameter *BackRepoParameterStruct) GetDB() db.DBInterface {
	return backRepoParameter.db
}

// GetParameterDBFromParameterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoParameter *BackRepoParameterStruct) GetParameterDBFromParameterPtr(parameter *models.Parameter) (parameterDB *ParameterDB) {
	id := backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]
	parameterDB = backRepoParameter.Map_ParameterDBID_ParameterDB[id]
	return
}

// BackRepoParameter.CommitPhaseOne commits all staged instances of Parameter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for parameter := range stage.Parameters {
		backRepoParameter.CommitPhaseOneInstance(parameter)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, parameter := range backRepoParameter.Map_ParameterDBID_ParameterPtr {
		if _, ok := stage.Parameters[parameter]; !ok {
			backRepoParameter.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoParameter.CommitDeleteInstance commits deletion of Parameter to the BackRepo
func (backRepoParameter *BackRepoParameterStruct) CommitDeleteInstance(id uint) (Error error) {

	parameter := backRepoParameter.Map_ParameterDBID_ParameterPtr[id]

	// parameter is not staged anymore, remove parameterDB
	parameterDB := backRepoParameter.Map_ParameterDBID_ParameterDB[id]
	db, _ := backRepoParameter.db.Unscoped()
	_, err := db.Delete(&parameterDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoParameter.Map_ParameterPtr_ParameterDBID, parameter)
	delete(backRepoParameter.Map_ParameterDBID_ParameterPtr, id)
	delete(backRepoParameter.Map_ParameterDBID_ParameterDB, id)

	return
}

// BackRepoParameter.CommitPhaseOneInstance commits parameter staged instances of Parameter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseOneInstance(parameter *models.Parameter) (Error error) {

	// check if the parameter is not commited yet
	if _, ok := backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {
		return
	}

	// initiate parameter
	var parameterDB ParameterDB
	parameterDB.CopyBasicFieldsFromParameter(parameter)

	_, err := backRepoParameter.db.Create(&parameterDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter] = parameterDB.ID
	backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID] = parameter
	backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = &parameterDB

	return
}

// BackRepoParameter.CommitPhaseTwo commits all staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, parameter := range backRepoParameter.Map_ParameterDBID_ParameterPtr {
		backRepoParameter.CommitPhaseTwoInstance(backRepo, idx, parameter)
	}

	return
}

// BackRepoParameter.CommitPhaseTwoInstance commits {{structname }} of models.Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, parameter *models.Parameter) (Error error) {

	// fetch matching parameterDB
	if parameterDB, ok := backRepoParameter.Map_ParameterDBID_ParameterDB[idx]; ok {

		parameterDB.CopyBasicFieldsFromParameter(parameter)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value parameter.InitialRhombus translates to updating the parameter.InitialRhombusID
		parameterDB.InitialRhombusID.Valid = true // allow for a 0 value (nil association)
		if parameter.InitialRhombus != nil {
			if InitialRhombusId, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[parameter.InitialRhombus]; ok {
				parameterDB.InitialRhombusID.Int64 = int64(InitialRhombusId)
				parameterDB.InitialRhombusID.Valid = true
			}
		} else {
			parameterDB.InitialRhombusID.Int64 = 0
			parameterDB.InitialRhombusID.Valid = true
		}

		// commit pointer value parameter.InitialCircle translates to updating the parameter.InitialCircleID
		parameterDB.InitialCircleID.Valid = true // allow for a 0 value (nil association)
		if parameter.InitialCircle != nil {
			if InitialCircleId, ok := backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID[parameter.InitialCircle]; ok {
				parameterDB.InitialCircleID.Int64 = int64(InitialCircleId)
				parameterDB.InitialCircleID.Valid = true
			}
		} else {
			parameterDB.InitialCircleID.Int64 = 0
			parameterDB.InitialCircleID.Valid = true
		}

		// commit pointer value parameter.InitialRhombusGrid translates to updating the parameter.InitialRhombusGridID
		parameterDB.InitialRhombusGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.InitialRhombusGrid != nil {
			if InitialRhombusGridId, ok := backRepo.BackRepoRhombusGrid.Map_RhombusGridPtr_RhombusGridDBID[parameter.InitialRhombusGrid]; ok {
				parameterDB.InitialRhombusGridID.Int64 = int64(InitialRhombusGridId)
				parameterDB.InitialRhombusGridID.Valid = true
			}
		} else {
			parameterDB.InitialRhombusGridID.Int64 = 0
			parameterDB.InitialRhombusGridID.Valid = true
		}

		// commit pointer value parameter.InitialCircleGrid translates to updating the parameter.InitialCircleGridID
		parameterDB.InitialCircleGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.InitialCircleGrid != nil {
			if InitialCircleGridId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.InitialCircleGrid]; ok {
				parameterDB.InitialCircleGridID.Int64 = int64(InitialCircleGridId)
				parameterDB.InitialCircleGridID.Valid = true
			}
		} else {
			parameterDB.InitialCircleGridID.Int64 = 0
			parameterDB.InitialCircleGridID.Valid = true
		}

		// commit pointer value parameter.InitialAxis translates to updating the parameter.InitialAxisID
		parameterDB.InitialAxisID.Valid = true // allow for a 0 value (nil association)
		if parameter.InitialAxis != nil {
			if InitialAxisId, ok := backRepo.BackRepoAxis.Map_AxisPtr_AxisDBID[parameter.InitialAxis]; ok {
				parameterDB.InitialAxisID.Int64 = int64(InitialAxisId)
				parameterDB.InitialAxisID.Valid = true
			}
		} else {
			parameterDB.InitialAxisID.Int64 = 0
			parameterDB.InitialAxisID.Valid = true
		}

		// commit pointer value parameter.RotatedAxis translates to updating the parameter.RotatedAxisID
		parameterDB.RotatedAxisID.Valid = true // allow for a 0 value (nil association)
		if parameter.RotatedAxis != nil {
			if RotatedAxisId, ok := backRepo.BackRepoAxis.Map_AxisPtr_AxisDBID[parameter.RotatedAxis]; ok {
				parameterDB.RotatedAxisID.Int64 = int64(RotatedAxisId)
				parameterDB.RotatedAxisID.Valid = true
			}
		} else {
			parameterDB.RotatedAxisID.Int64 = 0
			parameterDB.RotatedAxisID.Valid = true
		}

		// commit pointer value parameter.RotatedRhombus translates to updating the parameter.RotatedRhombusID
		parameterDB.RotatedRhombusID.Valid = true // allow for a 0 value (nil association)
		if parameter.RotatedRhombus != nil {
			if RotatedRhombusId, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[parameter.RotatedRhombus]; ok {
				parameterDB.RotatedRhombusID.Int64 = int64(RotatedRhombusId)
				parameterDB.RotatedRhombusID.Valid = true
			}
		} else {
			parameterDB.RotatedRhombusID.Int64 = 0
			parameterDB.RotatedRhombusID.Valid = true
		}

		// commit pointer value parameter.RotatedRhombusGrid translates to updating the parameter.RotatedRhombusGridID
		parameterDB.RotatedRhombusGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.RotatedRhombusGrid != nil {
			if RotatedRhombusGridId, ok := backRepo.BackRepoRhombusGrid.Map_RhombusGridPtr_RhombusGridDBID[parameter.RotatedRhombusGrid]; ok {
				parameterDB.RotatedRhombusGridID.Int64 = int64(RotatedRhombusGridId)
				parameterDB.RotatedRhombusGridID.Valid = true
			}
		} else {
			parameterDB.RotatedRhombusGridID.Int64 = 0
			parameterDB.RotatedRhombusGridID.Valid = true
		}

		// commit pointer value parameter.RotatedCircleGrid translates to updating the parameter.RotatedCircleGridID
		parameterDB.RotatedCircleGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.RotatedCircleGrid != nil {
			if RotatedCircleGridId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.RotatedCircleGrid]; ok {
				parameterDB.RotatedCircleGridID.Int64 = int64(RotatedCircleGridId)
				parameterDB.RotatedCircleGridID.Valid = true
			}
		} else {
			parameterDB.RotatedCircleGridID.Int64 = 0
			parameterDB.RotatedCircleGridID.Valid = true
		}

		// commit pointer value parameter.NextRhombus translates to updating the parameter.NextRhombusID
		parameterDB.NextRhombusID.Valid = true // allow for a 0 value (nil association)
		if parameter.NextRhombus != nil {
			if NextRhombusId, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[parameter.NextRhombus]; ok {
				parameterDB.NextRhombusID.Int64 = int64(NextRhombusId)
				parameterDB.NextRhombusID.Valid = true
			}
		} else {
			parameterDB.NextRhombusID.Int64 = 0
			parameterDB.NextRhombusID.Valid = true
		}

		// commit pointer value parameter.NextCircle translates to updating the parameter.NextCircleID
		parameterDB.NextCircleID.Valid = true // allow for a 0 value (nil association)
		if parameter.NextCircle != nil {
			if NextCircleId, ok := backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID[parameter.NextCircle]; ok {
				parameterDB.NextCircleID.Int64 = int64(NextCircleId)
				parameterDB.NextCircleID.Valid = true
			}
		} else {
			parameterDB.NextCircleID.Int64 = 0
			parameterDB.NextCircleID.Valid = true
		}

		// commit pointer value parameter.GrowingRhombusGridSeed translates to updating the parameter.GrowingRhombusGridSeedID
		parameterDB.GrowingRhombusGridSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowingRhombusGridSeed != nil {
			if GrowingRhombusGridSeedId, ok := backRepo.BackRepoRhombus.Map_RhombusPtr_RhombusDBID[parameter.GrowingRhombusGridSeed]; ok {
				parameterDB.GrowingRhombusGridSeedID.Int64 = int64(GrowingRhombusGridSeedId)
				parameterDB.GrowingRhombusGridSeedID.Valid = true
			}
		} else {
			parameterDB.GrowingRhombusGridSeedID.Int64 = 0
			parameterDB.GrowingRhombusGridSeedID.Valid = true
		}

		// commit pointer value parameter.GrowingRhombusGrid translates to updating the parameter.GrowingRhombusGridID
		parameterDB.GrowingRhombusGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowingRhombusGrid != nil {
			if GrowingRhombusGridId, ok := backRepo.BackRepoRhombusGrid.Map_RhombusGridPtr_RhombusGridDBID[parameter.GrowingRhombusGrid]; ok {
				parameterDB.GrowingRhombusGridID.Int64 = int64(GrowingRhombusGridId)
				parameterDB.GrowingRhombusGridID.Valid = true
			}
		} else {
			parameterDB.GrowingRhombusGridID.Int64 = 0
			parameterDB.GrowingRhombusGridID.Valid = true
		}

		// commit pointer value parameter.GrowingCircleGridSeed translates to updating the parameter.GrowingCircleGridSeedID
		parameterDB.GrowingCircleGridSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowingCircleGridSeed != nil {
			if GrowingCircleGridSeedId, ok := backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID[parameter.GrowingCircleGridSeed]; ok {
				parameterDB.GrowingCircleGridSeedID.Int64 = int64(GrowingCircleGridSeedId)
				parameterDB.GrowingCircleGridSeedID.Valid = true
			}
		} else {
			parameterDB.GrowingCircleGridSeedID.Int64 = 0
			parameterDB.GrowingCircleGridSeedID.Valid = true
		}

		// commit pointer value parameter.GrowingCircleGrid translates to updating the parameter.GrowingCircleGridID
		parameterDB.GrowingCircleGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowingCircleGrid != nil {
			if GrowingCircleGridId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.GrowingCircleGrid]; ok {
				parameterDB.GrowingCircleGridID.Int64 = int64(GrowingCircleGridId)
				parameterDB.GrowingCircleGridID.Valid = true
			}
		} else {
			parameterDB.GrowingCircleGridID.Int64 = 0
			parameterDB.GrowingCircleGridID.Valid = true
		}

		// commit pointer value parameter.GrowingCircleGridLeftSeed translates to updating the parameter.GrowingCircleGridLeftSeedID
		parameterDB.GrowingCircleGridLeftSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowingCircleGridLeftSeed != nil {
			if GrowingCircleGridLeftSeedId, ok := backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID[parameter.GrowingCircleGridLeftSeed]; ok {
				parameterDB.GrowingCircleGridLeftSeedID.Int64 = int64(GrowingCircleGridLeftSeedId)
				parameterDB.GrowingCircleGridLeftSeedID.Valid = true
			}
		} else {
			parameterDB.GrowingCircleGridLeftSeedID.Int64 = 0
			parameterDB.GrowingCircleGridLeftSeedID.Valid = true
		}

		// commit pointer value parameter.GrowingCircleGridLeft translates to updating the parameter.GrowingCircleGridLeftID
		parameterDB.GrowingCircleGridLeftID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowingCircleGridLeft != nil {
			if GrowingCircleGridLeftId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.GrowingCircleGridLeft]; ok {
				parameterDB.GrowingCircleGridLeftID.Int64 = int64(GrowingCircleGridLeftId)
				parameterDB.GrowingCircleGridLeftID.Valid = true
			}
		} else {
			parameterDB.GrowingCircleGridLeftID.Int64 = 0
			parameterDB.GrowingCircleGridLeftID.Valid = true
		}

		// commit pointer value parameter.ConstructionAxis translates to updating the parameter.ConstructionAxisID
		parameterDB.ConstructionAxisID.Valid = true // allow for a 0 value (nil association)
		if parameter.ConstructionAxis != nil {
			if ConstructionAxisId, ok := backRepo.BackRepoAxis.Map_AxisPtr_AxisDBID[parameter.ConstructionAxis]; ok {
				parameterDB.ConstructionAxisID.Int64 = int64(ConstructionAxisId)
				parameterDB.ConstructionAxisID.Valid = true
			}
		} else {
			parameterDB.ConstructionAxisID.Int64 = 0
			parameterDB.ConstructionAxisID.Valid = true
		}

		// commit pointer value parameter.ConstructionAxisGrid translates to updating the parameter.ConstructionAxisGridID
		parameterDB.ConstructionAxisGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.ConstructionAxisGrid != nil {
			if ConstructionAxisGridId, ok := backRepo.BackRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[parameter.ConstructionAxisGrid]; ok {
				parameterDB.ConstructionAxisGridID.Int64 = int64(ConstructionAxisGridId)
				parameterDB.ConstructionAxisGridID.Valid = true
			}
		} else {
			parameterDB.ConstructionAxisGridID.Int64 = 0
			parameterDB.ConstructionAxisGridID.Valid = true
		}

		// commit pointer value parameter.ConstructionCircle translates to updating the parameter.ConstructionCircleID
		parameterDB.ConstructionCircleID.Valid = true // allow for a 0 value (nil association)
		if parameter.ConstructionCircle != nil {
			if ConstructionCircleId, ok := backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID[parameter.ConstructionCircle]; ok {
				parameterDB.ConstructionCircleID.Int64 = int64(ConstructionCircleId)
				parameterDB.ConstructionCircleID.Valid = true
			}
		} else {
			parameterDB.ConstructionCircleID.Int64 = 0
			parameterDB.ConstructionCircleID.Valid = true
		}

		// commit pointer value parameter.ConstructionCircleGrid translates to updating the parameter.ConstructionCircleGridID
		parameterDB.ConstructionCircleGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.ConstructionCircleGrid != nil {
			if ConstructionCircleGridId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.ConstructionCircleGrid]; ok {
				parameterDB.ConstructionCircleGridID.Int64 = int64(ConstructionCircleGridId)
				parameterDB.ConstructionCircleGridID.Valid = true
			}
		} else {
			parameterDB.ConstructionCircleGridID.Int64 = 0
			parameterDB.ConstructionCircleGridID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveSeed translates to updating the parameter.GrowthCurveSeedID
		parameterDB.GrowthCurveSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveSeed != nil {
			if GrowthCurveSeedId, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[parameter.GrowthCurveSeed]; ok {
				parameterDB.GrowthCurveSeedID.Int64 = int64(GrowthCurveSeedId)
				parameterDB.GrowthCurveSeedID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveSeedID.Int64 = 0
			parameterDB.GrowthCurveSeedID.Valid = true
		}

		// commit pointer value parameter.GrowthCurve translates to updating the parameter.GrowthCurveID
		parameterDB.GrowthCurveID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurve != nil {
			if GrowthCurveId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.GrowthCurve]; ok {
				parameterDB.GrowthCurveID.Int64 = int64(GrowthCurveId)
				parameterDB.GrowthCurveID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveID.Int64 = 0
			parameterDB.GrowthCurveID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveShiftedRightSeed translates to updating the parameter.GrowthCurveShiftedRightSeedID
		parameterDB.GrowthCurveShiftedRightSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveShiftedRightSeed != nil {
			if GrowthCurveShiftedRightSeedId, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[parameter.GrowthCurveShiftedRightSeed]; ok {
				parameterDB.GrowthCurveShiftedRightSeedID.Int64 = int64(GrowthCurveShiftedRightSeedId)
				parameterDB.GrowthCurveShiftedRightSeedID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveShiftedRightSeedID.Int64 = 0
			parameterDB.GrowthCurveShiftedRightSeedID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveShiftedRight translates to updating the parameter.GrowthCurveShiftedRightID
		parameterDB.GrowthCurveShiftedRightID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveShiftedRight != nil {
			if GrowthCurveShiftedRightId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.GrowthCurveShiftedRight]; ok {
				parameterDB.GrowthCurveShiftedRightID.Int64 = int64(GrowthCurveShiftedRightId)
				parameterDB.GrowthCurveShiftedRightID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveShiftedRightID.Int64 = 0
			parameterDB.GrowthCurveShiftedRightID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveNextSeed translates to updating the parameter.GrowthCurveNextSeedID
		parameterDB.GrowthCurveNextSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveNextSeed != nil {
			if GrowthCurveNextSeedId, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[parameter.GrowthCurveNextSeed]; ok {
				parameterDB.GrowthCurveNextSeedID.Int64 = int64(GrowthCurveNextSeedId)
				parameterDB.GrowthCurveNextSeedID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveNextSeedID.Int64 = 0
			parameterDB.GrowthCurveNextSeedID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveNext translates to updating the parameter.GrowthCurveNextID
		parameterDB.GrowthCurveNextID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveNext != nil {
			if GrowthCurveNextId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.GrowthCurveNext]; ok {
				parameterDB.GrowthCurveNextID.Int64 = int64(GrowthCurveNextId)
				parameterDB.GrowthCurveNextID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveNextID.Int64 = 0
			parameterDB.GrowthCurveNextID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveNextShiftedRightSeed translates to updating the parameter.GrowthCurveNextShiftedRightSeedID
		parameterDB.GrowthCurveNextShiftedRightSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveNextShiftedRightSeed != nil {
			if GrowthCurveNextShiftedRightSeedId, ok := backRepo.BackRepoBezier.Map_BezierPtr_BezierDBID[parameter.GrowthCurveNextShiftedRightSeed]; ok {
				parameterDB.GrowthCurveNextShiftedRightSeedID.Int64 = int64(GrowthCurveNextShiftedRightSeedId)
				parameterDB.GrowthCurveNextShiftedRightSeedID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveNextShiftedRightSeedID.Int64 = 0
			parameterDB.GrowthCurveNextShiftedRightSeedID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveNextShiftedRight translates to updating the parameter.GrowthCurveNextShiftedRightID
		parameterDB.GrowthCurveNextShiftedRightID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveNextShiftedRight != nil {
			if GrowthCurveNextShiftedRightId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.GrowthCurveNextShiftedRight]; ok {
				parameterDB.GrowthCurveNextShiftedRightID.Int64 = int64(GrowthCurveNextShiftedRightId)
				parameterDB.GrowthCurveNextShiftedRightID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveNextShiftedRightID.Int64 = 0
			parameterDB.GrowthCurveNextShiftedRightID.Valid = true
		}

		// commit pointer value parameter.GrowthCurveStack translates to updating the parameter.GrowthCurveStackID
		parameterDB.GrowthCurveStackID.Valid = true // allow for a 0 value (nil association)
		if parameter.GrowthCurveStack != nil {
			if GrowthCurveStackId, ok := backRepo.BackRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[parameter.GrowthCurveStack]; ok {
				parameterDB.GrowthCurveStackID.Int64 = int64(GrowthCurveStackId)
				parameterDB.GrowthCurveStackID.Valid = true
			}
		} else {
			parameterDB.GrowthCurveStackID.Int64 = 0
			parameterDB.GrowthCurveStackID.Valid = true
		}

		// commit pointer value parameter.SpiralRhombusGridSeed translates to updating the parameter.SpiralRhombusGridSeedID
		parameterDB.SpiralRhombusGridSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralRhombusGridSeed != nil {
			if SpiralRhombusGridSeedId, ok := backRepo.BackRepoSpiralRhombus.Map_SpiralRhombusPtr_SpiralRhombusDBID[parameter.SpiralRhombusGridSeed]; ok {
				parameterDB.SpiralRhombusGridSeedID.Int64 = int64(SpiralRhombusGridSeedId)
				parameterDB.SpiralRhombusGridSeedID.Valid = true
			}
		} else {
			parameterDB.SpiralRhombusGridSeedID.Int64 = 0
			parameterDB.SpiralRhombusGridSeedID.Valid = true
		}

		// commit pointer value parameter.SpiralRhombusGrid translates to updating the parameter.SpiralRhombusGridID
		parameterDB.SpiralRhombusGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralRhombusGrid != nil {
			if SpiralRhombusGridId, ok := backRepo.BackRepoSpiralRhombusGrid.Map_SpiralRhombusGridPtr_SpiralRhombusGridDBID[parameter.SpiralRhombusGrid]; ok {
				parameterDB.SpiralRhombusGridID.Int64 = int64(SpiralRhombusGridId)
				parameterDB.SpiralRhombusGridID.Valid = true
			}
		} else {
			parameterDB.SpiralRhombusGridID.Int64 = 0
			parameterDB.SpiralRhombusGridID.Valid = true
		}

		// commit pointer value parameter.SpiralCircleSeed translates to updating the parameter.SpiralCircleSeedID
		parameterDB.SpiralCircleSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralCircleSeed != nil {
			if SpiralCircleSeedId, ok := backRepo.BackRepoSpiralCircle.Map_SpiralCirclePtr_SpiralCircleDBID[parameter.SpiralCircleSeed]; ok {
				parameterDB.SpiralCircleSeedID.Int64 = int64(SpiralCircleSeedId)
				parameterDB.SpiralCircleSeedID.Valid = true
			}
		} else {
			parameterDB.SpiralCircleSeedID.Int64 = 0
			parameterDB.SpiralCircleSeedID.Valid = true
		}

		// commit pointer value parameter.SpiralCircleGrid translates to updating the parameter.SpiralCircleGridID
		parameterDB.SpiralCircleGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralCircleGrid != nil {
			if SpiralCircleGridId, ok := backRepo.BackRepoSpiralCircleGrid.Map_SpiralCircleGridPtr_SpiralCircleGridDBID[parameter.SpiralCircleGrid]; ok {
				parameterDB.SpiralCircleGridID.Int64 = int64(SpiralCircleGridId)
				parameterDB.SpiralCircleGridID.Valid = true
			}
		} else {
			parameterDB.SpiralCircleGridID.Int64 = 0
			parameterDB.SpiralCircleGridID.Valid = true
		}

		// commit pointer value parameter.SpiralCircleFullGrid translates to updating the parameter.SpiralCircleFullGridID
		parameterDB.SpiralCircleFullGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralCircleFullGrid != nil {
			if SpiralCircleFullGridId, ok := backRepo.BackRepoSpiralCircleGrid.Map_SpiralCircleGridPtr_SpiralCircleGridDBID[parameter.SpiralCircleFullGrid]; ok {
				parameterDB.SpiralCircleFullGridID.Int64 = int64(SpiralCircleFullGridId)
				parameterDB.SpiralCircleFullGridID.Valid = true
			}
		} else {
			parameterDB.SpiralCircleFullGridID.Int64 = 0
			parameterDB.SpiralCircleFullGridID.Valid = true
		}

		// commit pointer value parameter.SpiralConstructionOuterLineSeed translates to updating the parameter.SpiralConstructionOuterLineSeedID
		parameterDB.SpiralConstructionOuterLineSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralConstructionOuterLineSeed != nil {
			if SpiralConstructionOuterLineSeedId, ok := backRepo.BackRepoSpiralLine.Map_SpiralLinePtr_SpiralLineDBID[parameter.SpiralConstructionOuterLineSeed]; ok {
				parameterDB.SpiralConstructionOuterLineSeedID.Int64 = int64(SpiralConstructionOuterLineSeedId)
				parameterDB.SpiralConstructionOuterLineSeedID.Valid = true
			}
		} else {
			parameterDB.SpiralConstructionOuterLineSeedID.Int64 = 0
			parameterDB.SpiralConstructionOuterLineSeedID.Valid = true
		}

		// commit pointer value parameter.SpiralConstructionInnerLineSeed translates to updating the parameter.SpiralConstructionInnerLineSeedID
		parameterDB.SpiralConstructionInnerLineSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralConstructionInnerLineSeed != nil {
			if SpiralConstructionInnerLineSeedId, ok := backRepo.BackRepoSpiralLine.Map_SpiralLinePtr_SpiralLineDBID[parameter.SpiralConstructionInnerLineSeed]; ok {
				parameterDB.SpiralConstructionInnerLineSeedID.Int64 = int64(SpiralConstructionInnerLineSeedId)
				parameterDB.SpiralConstructionInnerLineSeedID.Valid = true
			}
		} else {
			parameterDB.SpiralConstructionInnerLineSeedID.Int64 = 0
			parameterDB.SpiralConstructionInnerLineSeedID.Valid = true
		}

		// commit pointer value parameter.SpiralConstructionOuterLineGrid translates to updating the parameter.SpiralConstructionOuterLineGridID
		parameterDB.SpiralConstructionOuterLineGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralConstructionOuterLineGrid != nil {
			if SpiralConstructionOuterLineGridId, ok := backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[parameter.SpiralConstructionOuterLineGrid]; ok {
				parameterDB.SpiralConstructionOuterLineGridID.Int64 = int64(SpiralConstructionOuterLineGridId)
				parameterDB.SpiralConstructionOuterLineGridID.Valid = true
			}
		} else {
			parameterDB.SpiralConstructionOuterLineGridID.Int64 = 0
			parameterDB.SpiralConstructionOuterLineGridID.Valid = true
		}

		// commit pointer value parameter.SpiralConstructionInnerLineGrid translates to updating the parameter.SpiralConstructionInnerLineGridID
		parameterDB.SpiralConstructionInnerLineGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralConstructionInnerLineGrid != nil {
			if SpiralConstructionInnerLineGridId, ok := backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[parameter.SpiralConstructionInnerLineGrid]; ok {
				parameterDB.SpiralConstructionInnerLineGridID.Int64 = int64(SpiralConstructionInnerLineGridId)
				parameterDB.SpiralConstructionInnerLineGridID.Valid = true
			}
		} else {
			parameterDB.SpiralConstructionInnerLineGridID.Int64 = 0
			parameterDB.SpiralConstructionInnerLineGridID.Valid = true
		}

		// commit pointer value parameter.SpiralConstructionCircleGrid translates to updating the parameter.SpiralConstructionCircleGridID
		parameterDB.SpiralConstructionCircleGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralConstructionCircleGrid != nil {
			if SpiralConstructionCircleGridId, ok := backRepo.BackRepoSpiralCircleGrid.Map_SpiralCircleGridPtr_SpiralCircleGridDBID[parameter.SpiralConstructionCircleGrid]; ok {
				parameterDB.SpiralConstructionCircleGridID.Int64 = int64(SpiralConstructionCircleGridId)
				parameterDB.SpiralConstructionCircleGridID.Valid = true
			}
		} else {
			parameterDB.SpiralConstructionCircleGridID.Int64 = 0
			parameterDB.SpiralConstructionCircleGridID.Valid = true
		}

		// commit pointer value parameter.SpiralConstructionOuterLineFullGrid translates to updating the parameter.SpiralConstructionOuterLineFullGridID
		parameterDB.SpiralConstructionOuterLineFullGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralConstructionOuterLineFullGrid != nil {
			if SpiralConstructionOuterLineFullGridId, ok := backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridPtr_SpiralLineGridDBID[parameter.SpiralConstructionOuterLineFullGrid]; ok {
				parameterDB.SpiralConstructionOuterLineFullGridID.Int64 = int64(SpiralConstructionOuterLineFullGridId)
				parameterDB.SpiralConstructionOuterLineFullGridID.Valid = true
			}
		} else {
			parameterDB.SpiralConstructionOuterLineFullGridID.Int64 = 0
			parameterDB.SpiralConstructionOuterLineFullGridID.Valid = true
		}

		// commit pointer value parameter.SpiralBezierSeed translates to updating the parameter.SpiralBezierSeedID
		parameterDB.SpiralBezierSeedID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralBezierSeed != nil {
			if SpiralBezierSeedId, ok := backRepo.BackRepoSpiralBezier.Map_SpiralBezierPtr_SpiralBezierDBID[parameter.SpiralBezierSeed]; ok {
				parameterDB.SpiralBezierSeedID.Int64 = int64(SpiralBezierSeedId)
				parameterDB.SpiralBezierSeedID.Valid = true
			}
		} else {
			parameterDB.SpiralBezierSeedID.Int64 = 0
			parameterDB.SpiralBezierSeedID.Valid = true
		}

		// commit pointer value parameter.SpiralBezierGrid translates to updating the parameter.SpiralBezierGridID
		parameterDB.SpiralBezierGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralBezierGrid != nil {
			if SpiralBezierGridId, ok := backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[parameter.SpiralBezierGrid]; ok {
				parameterDB.SpiralBezierGridID.Int64 = int64(SpiralBezierGridId)
				parameterDB.SpiralBezierGridID.Valid = true
			}
		} else {
			parameterDB.SpiralBezierGridID.Int64 = 0
			parameterDB.SpiralBezierGridID.Valid = true
		}

		// commit pointer value parameter.SpiralBezierFullGrid translates to updating the parameter.SpiralBezierFullGridID
		parameterDB.SpiralBezierFullGridID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralBezierFullGrid != nil {
			if SpiralBezierFullGridId, ok := backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridPtr_SpiralBezierGridDBID[parameter.SpiralBezierFullGrid]; ok {
				parameterDB.SpiralBezierFullGridID.Int64 = int64(SpiralBezierFullGridId)
				parameterDB.SpiralBezierFullGridID.Valid = true
			}
		} else {
			parameterDB.SpiralBezierFullGridID.Int64 = 0
			parameterDB.SpiralBezierFullGridID.Valid = true
		}

		// commit pointer value parameter.FrontCurveStack translates to updating the parameter.FrontCurveStackID
		parameterDB.FrontCurveStackID.Valid = true // allow for a 0 value (nil association)
		if parameter.FrontCurveStack != nil {
			if FrontCurveStackId, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[parameter.FrontCurveStack]; ok {
				parameterDB.FrontCurveStackID.Int64 = int64(FrontCurveStackId)
				parameterDB.FrontCurveStackID.Valid = true
			}
		} else {
			parameterDB.FrontCurveStackID.Int64 = 0
			parameterDB.FrontCurveStackID.Valid = true
		}

		// commit pointer value parameter.HourCurve translates to updating the parameter.HourCurveID
		parameterDB.HourCurveID.Valid = true // allow for a 0 value (nil association)
		if parameter.HourCurve != nil {
			if HourCurveId, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[parameter.HourCurve]; ok {
				parameterDB.HourCurveID.Int64 = int64(HourCurveId)
				parameterDB.HourCurveID.Valid = true
			}
		} else {
			parameterDB.HourCurveID.Int64 = 0
			parameterDB.HourCurveID.Valid = true
		}

		// commit pointer value parameter.HourMarker translates to updating the parameter.HourMarkerID
		parameterDB.HourMarkerID.Valid = true // allow for a 0 value (nil association)
		if parameter.HourMarker != nil {
			if HourMarkerId, ok := backRepo.BackRepoSpiralCircle.Map_SpiralCirclePtr_SpiralCircleDBID[parameter.HourMarker]; ok {
				parameterDB.HourMarkerID.Int64 = int64(HourMarkerId)
				parameterDB.HourMarkerID.Valid = true
			}
		} else {
			parameterDB.HourMarkerID.Int64 = 0
			parameterDB.HourMarkerID.Valid = true
		}

		// commit pointer value parameter.MinuteCurve translates to updating the parameter.MinuteCurveID
		parameterDB.MinuteCurveID.Valid = true // allow for a 0 value (nil association)
		if parameter.MinuteCurve != nil {
			if MinuteCurveId, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[parameter.MinuteCurve]; ok {
				parameterDB.MinuteCurveID.Int64 = int64(MinuteCurveId)
				parameterDB.MinuteCurveID.Valid = true
			}
		} else {
			parameterDB.MinuteCurveID.Int64 = 0
			parameterDB.MinuteCurveID.Valid = true
		}

		// commit pointer value parameter.MinuteMarker translates to updating the parameter.MinuteMarkerID
		parameterDB.MinuteMarkerID.Valid = true // allow for a 0 value (nil association)
		if parameter.MinuteMarker != nil {
			if MinuteMarkerId, ok := backRepo.BackRepoSpiralCircle.Map_SpiralCirclePtr_SpiralCircleDBID[parameter.MinuteMarker]; ok {
				parameterDB.MinuteMarkerID.Int64 = int64(MinuteMarkerId)
				parameterDB.MinuteMarkerID.Valid = true
			}
		} else {
			parameterDB.MinuteMarkerID.Int64 = 0
			parameterDB.MinuteMarkerID.Valid = true
		}

		// commit pointer value parameter.BackendCurve translates to updating the parameter.BackendCurveID
		parameterDB.BackendCurveID.Valid = true // allow for a 0 value (nil association)
		if parameter.BackendCurve != nil {
			if BackendCurveId, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[parameter.BackendCurve]; ok {
				parameterDB.BackendCurveID.Int64 = int64(BackendCurveId)
				parameterDB.BackendCurveID.Valid = true
			}
		} else {
			parameterDB.BackendCurveID.Int64 = 0
			parameterDB.BackendCurveID.Valid = true
		}

		// commit pointer value parameter.BackendMarker translates to updating the parameter.BackendMarkerID
		parameterDB.BackendMarkerID.Valid = true // allow for a 0 value (nil association)
		if parameter.BackendMarker != nil {
			if BackendMarkerId, ok := backRepo.BackRepoSpiralCircle.Map_SpiralCirclePtr_SpiralCircleDBID[parameter.BackendMarker]; ok {
				parameterDB.BackendMarkerID.Int64 = int64(BackendMarkerId)
				parameterDB.BackendMarkerID.Valid = true
			}
		} else {
			parameterDB.BackendMarkerID.Int64 = 0
			parameterDB.BackendMarkerID.Valid = true
		}

		// commit pointer value parameter.Fkey translates to updating the parameter.FkeyID
		parameterDB.FkeyID.Valid = true // allow for a 0 value (nil association)
		if parameter.Fkey != nil {
			if FkeyId, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[parameter.Fkey]; ok {
				parameterDB.FkeyID.Int64 = int64(FkeyId)
				parameterDB.FkeyID.Valid = true
			}
		} else {
			parameterDB.FkeyID.Int64 = 0
			parameterDB.FkeyID.Valid = true
		}

		// commit pointer value parameter.PitchLines translates to updating the parameter.PitchLinesID
		parameterDB.PitchLinesID.Valid = true // allow for a 0 value (nil association)
		if parameter.PitchLines != nil {
			if PitchLinesId, ok := backRepo.BackRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[parameter.PitchLines]; ok {
				parameterDB.PitchLinesID.Int64 = int64(PitchLinesId)
				parameterDB.PitchLinesID.Valid = true
			}
		} else {
			parameterDB.PitchLinesID.Int64 = 0
			parameterDB.PitchLinesID.Valid = true
		}

		// commit pointer value parameter.MeasureLines translates to updating the parameter.MeasureLinesID
		parameterDB.MeasureLinesID.Valid = true // allow for a 0 value (nil association)
		if parameter.MeasureLines != nil {
			if MeasureLinesId, ok := backRepo.BackRepoAxisGrid.Map_AxisGridPtr_AxisGridDBID[parameter.MeasureLines]; ok {
				parameterDB.MeasureLinesID.Int64 = int64(MeasureLinesId)
				parameterDB.MeasureLinesID.Valid = true
			}
		} else {
			parameterDB.MeasureLinesID.Int64 = 0
			parameterDB.MeasureLinesID.Valid = true
		}

		// commit pointer value parameter.FirstVoice translates to updating the parameter.FirstVoiceID
		parameterDB.FirstVoiceID.Valid = true // allow for a 0 value (nil association)
		if parameter.FirstVoice != nil {
			if FirstVoiceId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.FirstVoice]; ok {
				parameterDB.FirstVoiceID.Int64 = int64(FirstVoiceId)
				parameterDB.FirstVoiceID.Valid = true
			}
		} else {
			parameterDB.FirstVoiceID.Int64 = 0
			parameterDB.FirstVoiceID.Valid = true
		}

		// commit pointer value parameter.FirstVoiceShiftRigth translates to updating the parameter.FirstVoiceShiftRigthID
		parameterDB.FirstVoiceShiftRigthID.Valid = true // allow for a 0 value (nil association)
		if parameter.FirstVoiceShiftRigth != nil {
			if FirstVoiceShiftRigthId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.FirstVoiceShiftRigth]; ok {
				parameterDB.FirstVoiceShiftRigthID.Int64 = int64(FirstVoiceShiftRigthId)
				parameterDB.FirstVoiceShiftRigthID.Valid = true
			}
		} else {
			parameterDB.FirstVoiceShiftRigthID.Int64 = 0
			parameterDB.FirstVoiceShiftRigthID.Valid = true
		}

		// commit pointer value parameter.SecondVoice translates to updating the parameter.SecondVoiceID
		parameterDB.SecondVoiceID.Valid = true // allow for a 0 value (nil association)
		if parameter.SecondVoice != nil {
			if SecondVoiceId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.SecondVoice]; ok {
				parameterDB.SecondVoiceID.Int64 = int64(SecondVoiceId)
				parameterDB.SecondVoiceID.Valid = true
			}
		} else {
			parameterDB.SecondVoiceID.Int64 = 0
			parameterDB.SecondVoiceID.Valid = true
		}

		// commit pointer value parameter.SecondVoiceShiftedRight translates to updating the parameter.SecondVoiceShiftedRightID
		parameterDB.SecondVoiceShiftedRightID.Valid = true // allow for a 0 value (nil association)
		if parameter.SecondVoiceShiftedRight != nil {
			if SecondVoiceShiftedRightId, ok := backRepo.BackRepoBezierGrid.Map_BezierGridPtr_BezierGridDBID[parameter.SecondVoiceShiftedRight]; ok {
				parameterDB.SecondVoiceShiftedRightID.Int64 = int64(SecondVoiceShiftedRightId)
				parameterDB.SecondVoiceShiftedRightID.Valid = true
			}
		} else {
			parameterDB.SecondVoiceShiftedRightID.Int64 = 0
			parameterDB.SecondVoiceShiftedRightID.Valid = true
		}

		// commit pointer value parameter.FirstVoiceNotes translates to updating the parameter.FirstVoiceNotesID
		parameterDB.FirstVoiceNotesID.Valid = true // allow for a 0 value (nil association)
		if parameter.FirstVoiceNotes != nil {
			if FirstVoiceNotesId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.FirstVoiceNotes]; ok {
				parameterDB.FirstVoiceNotesID.Int64 = int64(FirstVoiceNotesId)
				parameterDB.FirstVoiceNotesID.Valid = true
			}
		} else {
			parameterDB.FirstVoiceNotesID.Int64 = 0
			parameterDB.FirstVoiceNotesID.Valid = true
		}

		// commit pointer value parameter.FirstVoiceNotesShiftedRight translates to updating the parameter.FirstVoiceNotesShiftedRightID
		parameterDB.FirstVoiceNotesShiftedRightID.Valid = true // allow for a 0 value (nil association)
		if parameter.FirstVoiceNotesShiftedRight != nil {
			if FirstVoiceNotesShiftedRightId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.FirstVoiceNotesShiftedRight]; ok {
				parameterDB.FirstVoiceNotesShiftedRightID.Int64 = int64(FirstVoiceNotesShiftedRightId)
				parameterDB.FirstVoiceNotesShiftedRightID.Valid = true
			}
		} else {
			parameterDB.FirstVoiceNotesShiftedRightID.Int64 = 0
			parameterDB.FirstVoiceNotesShiftedRightID.Valid = true
		}

		// commit pointer value parameter.SecondVoiceNotes translates to updating the parameter.SecondVoiceNotesID
		parameterDB.SecondVoiceNotesID.Valid = true // allow for a 0 value (nil association)
		if parameter.SecondVoiceNotes != nil {
			if SecondVoiceNotesId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.SecondVoiceNotes]; ok {
				parameterDB.SecondVoiceNotesID.Int64 = int64(SecondVoiceNotesId)
				parameterDB.SecondVoiceNotesID.Valid = true
			}
		} else {
			parameterDB.SecondVoiceNotesID.Int64 = 0
			parameterDB.SecondVoiceNotesID.Valid = true
		}

		// commit pointer value parameter.SecondVoiceNotesShiftedRight translates to updating the parameter.SecondVoiceNotesShiftedRightID
		parameterDB.SecondVoiceNotesShiftedRightID.Valid = true // allow for a 0 value (nil association)
		if parameter.SecondVoiceNotesShiftedRight != nil {
			if SecondVoiceNotesShiftedRightId, ok := backRepo.BackRepoCircleGrid.Map_CircleGridPtr_CircleGridDBID[parameter.SecondVoiceNotesShiftedRight]; ok {
				parameterDB.SecondVoiceNotesShiftedRightID.Int64 = int64(SecondVoiceNotesShiftedRightId)
				parameterDB.SecondVoiceNotesShiftedRightID.Valid = true
			}
		} else {
			parameterDB.SecondVoiceNotesShiftedRightID.Int64 = 0
			parameterDB.SecondVoiceNotesShiftedRightID.Valid = true
		}

		// 1. reset
		parameterDB.ParameterPointersEncoding.NoteInfos = make([]int, 0)
		// 2. encode
		for _, noteinfoAssocEnd := range parameter.NoteInfos {
			noteinfoAssocEnd_DB :=
				backRepo.BackRepoNoteInfo.GetNoteInfoDBFromNoteInfoPtr(noteinfoAssocEnd)
			
			// the stage might be inconsistant, meaning that the noteinfoAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if noteinfoAssocEnd_DB == nil {
				continue
			}
			
			parameterDB.ParameterPointersEncoding.NoteInfos =
				append(parameterDB.ParameterPointersEncoding.NoteInfos, int(noteinfoAssocEnd_DB.ID))
		}

		// commit pointer value parameter.HorizontalAxis translates to updating the parameter.HorizontalAxisID
		parameterDB.HorizontalAxisID.Valid = true // allow for a 0 value (nil association)
		if parameter.HorizontalAxis != nil {
			if HorizontalAxisId, ok := backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisPtr_HorizontalAxisDBID[parameter.HorizontalAxis]; ok {
				parameterDB.HorizontalAxisID.Int64 = int64(HorizontalAxisId)
				parameterDB.HorizontalAxisID.Valid = true
			}
		} else {
			parameterDB.HorizontalAxisID.Int64 = 0
			parameterDB.HorizontalAxisID.Valid = true
		}

		// commit pointer value parameter.VerticalAxis translates to updating the parameter.VerticalAxisID
		parameterDB.VerticalAxisID.Valid = true // allow for a 0 value (nil association)
		if parameter.VerticalAxis != nil {
			if VerticalAxisId, ok := backRepo.BackRepoVerticalAxis.Map_VerticalAxisPtr_VerticalAxisDBID[parameter.VerticalAxis]; ok {
				parameterDB.VerticalAxisID.Int64 = int64(VerticalAxisId)
				parameterDB.VerticalAxisID.Valid = true
			}
		} else {
			parameterDB.VerticalAxisID.Int64 = 0
			parameterDB.VerticalAxisID.Valid = true
		}

		// commit pointer value parameter.SpiralOrigin translates to updating the parameter.SpiralOriginID
		parameterDB.SpiralOriginID.Valid = true // allow for a 0 value (nil association)
		if parameter.SpiralOrigin != nil {
			if SpiralOriginId, ok := backRepo.BackRepoSpiralOrigin.Map_SpiralOriginPtr_SpiralOriginDBID[parameter.SpiralOrigin]; ok {
				parameterDB.SpiralOriginID.Int64 = int64(SpiralOriginId)
				parameterDB.SpiralOriginID.Valid = true
			}
		} else {
			parameterDB.SpiralOriginID.Int64 = 0
			parameterDB.SpiralOriginID.Valid = true
		}

		_, err := backRepoParameter.db.Save(&parameterDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Parameter intance %s", parameter.Name))
		return err
	}

	return
}

// BackRepoParameter.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseOne() (Error error) {

	parameterDBArray := make([]ParameterDB, 0)
	_, err := backRepoParameter.db.Find(&parameterDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	parameterInstancesToBeRemovedFromTheStage := make(map[*models.Parameter]any)
	for key, value := range backRepoParameter.stage.Parameters {
		parameterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, parameterDB := range parameterDBArray {
		backRepoParameter.CheckoutPhaseOneInstance(&parameterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		parameter, ok := backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID]
		if ok {
			delete(parameterInstancesToBeRemovedFromTheStage, parameter)
		}
	}

	// remove from stage and back repo's 3 maps all parameters that are not in the checkout
	for parameter := range parameterInstancesToBeRemovedFromTheStage {
		parameter.Unstage(backRepoParameter.GetStage())

		// remove instance from the back repo 3 maps
		parameterID := backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]
		delete(backRepoParameter.Map_ParameterPtr_ParameterDBID, parameter)
		delete(backRepoParameter.Map_ParameterDBID_ParameterDB, parameterID)
		delete(backRepoParameter.Map_ParameterDBID_ParameterPtr, parameterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a parameterDB that has been found in the DB, updates the backRepo and stages the
// models version of the parameterDB
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseOneInstance(parameterDB *ParameterDB) (Error error) {

	parameter, ok := backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID]
	if !ok {
		parameter = new(models.Parameter)

		backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID] = parameter
		backRepoParameter.Map_ParameterPtr_ParameterDBID[parameter] = parameterDB.ID

		// append model store with the new element
		parameter.Name = parameterDB.Name_Data.String
		parameter.Stage(backRepoParameter.GetStage())
	}
	parameterDB.CopyBasicFieldsToParameter(parameter)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	parameter.Stage(backRepoParameter.GetStage())

	// preserve pointer to parameterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ParameterDBID_ParameterDB)[parameterDB hold variable pointers
	parameterDB_Data := *parameterDB
	preservedPtrToParameter := &parameterDB_Data
	backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = preservedPtrToParameter

	return
}

// BackRepoParameter.CheckoutPhaseTwo Checkouts all staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {
		backRepoParameter.CheckoutPhaseTwoInstance(backRepo, parameterDB)
	}
	return
}

// BackRepoParameter.CheckoutPhaseTwoInstance Checkouts staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, parameterDB *ParameterDB) (Error error) {

	parameter := backRepoParameter.Map_ParameterDBID_ParameterPtr[parameterDB.ID]

	parameterDB.DecodePointers(backRepo, parameter)

	return
}

func (parameterDB *ParameterDB) DecodePointers(backRepo *BackRepoStruct, parameter *models.Parameter) {

	// insertion point for checkout of pointer encoding
	// InitialRhombus field
	parameter.InitialRhombus = nil
	if parameterDB.InitialRhombusID.Int64 != 0 {
		parameter.InitialRhombus = backRepo.BackRepoRhombus.Map_RhombusDBID_RhombusPtr[uint(parameterDB.InitialRhombusID.Int64)]
	}
	// InitialCircle field
	parameter.InitialCircle = nil
	if parameterDB.InitialCircleID.Int64 != 0 {
		parameter.InitialCircle = backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(parameterDB.InitialCircleID.Int64)]
	}
	// InitialRhombusGrid field
	parameter.InitialRhombusGrid = nil
	if parameterDB.InitialRhombusGridID.Int64 != 0 {
		parameter.InitialRhombusGrid = backRepo.BackRepoRhombusGrid.Map_RhombusGridDBID_RhombusGridPtr[uint(parameterDB.InitialRhombusGridID.Int64)]
	}
	// InitialCircleGrid field
	parameter.InitialCircleGrid = nil
	if parameterDB.InitialCircleGridID.Int64 != 0 {
		parameter.InitialCircleGrid = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.InitialCircleGridID.Int64)]
	}
	// InitialAxis field
	parameter.InitialAxis = nil
	if parameterDB.InitialAxisID.Int64 != 0 {
		parameter.InitialAxis = backRepo.BackRepoAxis.Map_AxisDBID_AxisPtr[uint(parameterDB.InitialAxisID.Int64)]
	}
	// RotatedAxis field
	parameter.RotatedAxis = nil
	if parameterDB.RotatedAxisID.Int64 != 0 {
		parameter.RotatedAxis = backRepo.BackRepoAxis.Map_AxisDBID_AxisPtr[uint(parameterDB.RotatedAxisID.Int64)]
	}
	// RotatedRhombus field
	parameter.RotatedRhombus = nil
	if parameterDB.RotatedRhombusID.Int64 != 0 {
		parameter.RotatedRhombus = backRepo.BackRepoRhombus.Map_RhombusDBID_RhombusPtr[uint(parameterDB.RotatedRhombusID.Int64)]
	}
	// RotatedRhombusGrid field
	parameter.RotatedRhombusGrid = nil
	if parameterDB.RotatedRhombusGridID.Int64 != 0 {
		parameter.RotatedRhombusGrid = backRepo.BackRepoRhombusGrid.Map_RhombusGridDBID_RhombusGridPtr[uint(parameterDB.RotatedRhombusGridID.Int64)]
	}
	// RotatedCircleGrid field
	parameter.RotatedCircleGrid = nil
	if parameterDB.RotatedCircleGridID.Int64 != 0 {
		parameter.RotatedCircleGrid = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.RotatedCircleGridID.Int64)]
	}
	// NextRhombus field
	parameter.NextRhombus = nil
	if parameterDB.NextRhombusID.Int64 != 0 {
		parameter.NextRhombus = backRepo.BackRepoRhombus.Map_RhombusDBID_RhombusPtr[uint(parameterDB.NextRhombusID.Int64)]
	}
	// NextCircle field
	parameter.NextCircle = nil
	if parameterDB.NextCircleID.Int64 != 0 {
		parameter.NextCircle = backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(parameterDB.NextCircleID.Int64)]
	}
	// GrowingRhombusGridSeed field
	parameter.GrowingRhombusGridSeed = nil
	if parameterDB.GrowingRhombusGridSeedID.Int64 != 0 {
		parameter.GrowingRhombusGridSeed = backRepo.BackRepoRhombus.Map_RhombusDBID_RhombusPtr[uint(parameterDB.GrowingRhombusGridSeedID.Int64)]
	}
	// GrowingRhombusGrid field
	parameter.GrowingRhombusGrid = nil
	if parameterDB.GrowingRhombusGridID.Int64 != 0 {
		parameter.GrowingRhombusGrid = backRepo.BackRepoRhombusGrid.Map_RhombusGridDBID_RhombusGridPtr[uint(parameterDB.GrowingRhombusGridID.Int64)]
	}
	// GrowingCircleGridSeed field
	parameter.GrowingCircleGridSeed = nil
	if parameterDB.GrowingCircleGridSeedID.Int64 != 0 {
		parameter.GrowingCircleGridSeed = backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(parameterDB.GrowingCircleGridSeedID.Int64)]
	}
	// GrowingCircleGrid field
	parameter.GrowingCircleGrid = nil
	if parameterDB.GrowingCircleGridID.Int64 != 0 {
		parameter.GrowingCircleGrid = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.GrowingCircleGridID.Int64)]
	}
	// GrowingCircleGridLeftSeed field
	parameter.GrowingCircleGridLeftSeed = nil
	if parameterDB.GrowingCircleGridLeftSeedID.Int64 != 0 {
		parameter.GrowingCircleGridLeftSeed = backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(parameterDB.GrowingCircleGridLeftSeedID.Int64)]
	}
	// GrowingCircleGridLeft field
	parameter.GrowingCircleGridLeft = nil
	if parameterDB.GrowingCircleGridLeftID.Int64 != 0 {
		parameter.GrowingCircleGridLeft = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.GrowingCircleGridLeftID.Int64)]
	}
	// ConstructionAxis field
	parameter.ConstructionAxis = nil
	if parameterDB.ConstructionAxisID.Int64 != 0 {
		parameter.ConstructionAxis = backRepo.BackRepoAxis.Map_AxisDBID_AxisPtr[uint(parameterDB.ConstructionAxisID.Int64)]
	}
	// ConstructionAxisGrid field
	parameter.ConstructionAxisGrid = nil
	if parameterDB.ConstructionAxisGridID.Int64 != 0 {
		parameter.ConstructionAxisGrid = backRepo.BackRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[uint(parameterDB.ConstructionAxisGridID.Int64)]
	}
	// ConstructionCircle field
	parameter.ConstructionCircle = nil
	if parameterDB.ConstructionCircleID.Int64 != 0 {
		parameter.ConstructionCircle = backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr[uint(parameterDB.ConstructionCircleID.Int64)]
	}
	// ConstructionCircleGrid field
	parameter.ConstructionCircleGrid = nil
	if parameterDB.ConstructionCircleGridID.Int64 != 0 {
		parameter.ConstructionCircleGrid = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.ConstructionCircleGridID.Int64)]
	}
	// GrowthCurveSeed field
	parameter.GrowthCurveSeed = nil
	if parameterDB.GrowthCurveSeedID.Int64 != 0 {
		parameter.GrowthCurveSeed = backRepo.BackRepoBezier.Map_BezierDBID_BezierPtr[uint(parameterDB.GrowthCurveSeedID.Int64)]
	}
	// GrowthCurve field
	parameter.GrowthCurve = nil
	if parameterDB.GrowthCurveID.Int64 != 0 {
		parameter.GrowthCurve = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.GrowthCurveID.Int64)]
	}
	// GrowthCurveShiftedRightSeed field
	parameter.GrowthCurveShiftedRightSeed = nil
	if parameterDB.GrowthCurveShiftedRightSeedID.Int64 != 0 {
		parameter.GrowthCurveShiftedRightSeed = backRepo.BackRepoBezier.Map_BezierDBID_BezierPtr[uint(parameterDB.GrowthCurveShiftedRightSeedID.Int64)]
	}
	// GrowthCurveShiftedRight field
	parameter.GrowthCurveShiftedRight = nil
	if parameterDB.GrowthCurveShiftedRightID.Int64 != 0 {
		parameter.GrowthCurveShiftedRight = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.GrowthCurveShiftedRightID.Int64)]
	}
	// GrowthCurveNextSeed field
	parameter.GrowthCurveNextSeed = nil
	if parameterDB.GrowthCurveNextSeedID.Int64 != 0 {
		parameter.GrowthCurveNextSeed = backRepo.BackRepoBezier.Map_BezierDBID_BezierPtr[uint(parameterDB.GrowthCurveNextSeedID.Int64)]
	}
	// GrowthCurveNext field
	parameter.GrowthCurveNext = nil
	if parameterDB.GrowthCurveNextID.Int64 != 0 {
		parameter.GrowthCurveNext = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.GrowthCurveNextID.Int64)]
	}
	// GrowthCurveNextShiftedRightSeed field
	parameter.GrowthCurveNextShiftedRightSeed = nil
	if parameterDB.GrowthCurveNextShiftedRightSeedID.Int64 != 0 {
		parameter.GrowthCurveNextShiftedRightSeed = backRepo.BackRepoBezier.Map_BezierDBID_BezierPtr[uint(parameterDB.GrowthCurveNextShiftedRightSeedID.Int64)]
	}
	// GrowthCurveNextShiftedRight field
	parameter.GrowthCurveNextShiftedRight = nil
	if parameterDB.GrowthCurveNextShiftedRightID.Int64 != 0 {
		parameter.GrowthCurveNextShiftedRight = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.GrowthCurveNextShiftedRightID.Int64)]
	}
	// GrowthCurveStack field
	parameter.GrowthCurveStack = nil
	if parameterDB.GrowthCurveStackID.Int64 != 0 {
		parameter.GrowthCurveStack = backRepo.BackRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[uint(parameterDB.GrowthCurveStackID.Int64)]
	}
	// SpiralRhombusGridSeed field
	parameter.SpiralRhombusGridSeed = nil
	if parameterDB.SpiralRhombusGridSeedID.Int64 != 0 {
		parameter.SpiralRhombusGridSeed = backRepo.BackRepoSpiralRhombus.Map_SpiralRhombusDBID_SpiralRhombusPtr[uint(parameterDB.SpiralRhombusGridSeedID.Int64)]
	}
	// SpiralRhombusGrid field
	parameter.SpiralRhombusGrid = nil
	if parameterDB.SpiralRhombusGridID.Int64 != 0 {
		parameter.SpiralRhombusGrid = backRepo.BackRepoSpiralRhombusGrid.Map_SpiralRhombusGridDBID_SpiralRhombusGridPtr[uint(parameterDB.SpiralRhombusGridID.Int64)]
	}
	// SpiralCircleSeed field
	parameter.SpiralCircleSeed = nil
	if parameterDB.SpiralCircleSeedID.Int64 != 0 {
		parameter.SpiralCircleSeed = backRepo.BackRepoSpiralCircle.Map_SpiralCircleDBID_SpiralCirclePtr[uint(parameterDB.SpiralCircleSeedID.Int64)]
	}
	// SpiralCircleGrid field
	parameter.SpiralCircleGrid = nil
	if parameterDB.SpiralCircleGridID.Int64 != 0 {
		parameter.SpiralCircleGrid = backRepo.BackRepoSpiralCircleGrid.Map_SpiralCircleGridDBID_SpiralCircleGridPtr[uint(parameterDB.SpiralCircleGridID.Int64)]
	}
	// SpiralCircleFullGrid field
	parameter.SpiralCircleFullGrid = nil
	if parameterDB.SpiralCircleFullGridID.Int64 != 0 {
		parameter.SpiralCircleFullGrid = backRepo.BackRepoSpiralCircleGrid.Map_SpiralCircleGridDBID_SpiralCircleGridPtr[uint(parameterDB.SpiralCircleFullGridID.Int64)]
	}
	// SpiralConstructionOuterLineSeed field
	parameter.SpiralConstructionOuterLineSeed = nil
	if parameterDB.SpiralConstructionOuterLineSeedID.Int64 != 0 {
		parameter.SpiralConstructionOuterLineSeed = backRepo.BackRepoSpiralLine.Map_SpiralLineDBID_SpiralLinePtr[uint(parameterDB.SpiralConstructionOuterLineSeedID.Int64)]
	}
	// SpiralConstructionInnerLineSeed field
	parameter.SpiralConstructionInnerLineSeed = nil
	if parameterDB.SpiralConstructionInnerLineSeedID.Int64 != 0 {
		parameter.SpiralConstructionInnerLineSeed = backRepo.BackRepoSpiralLine.Map_SpiralLineDBID_SpiralLinePtr[uint(parameterDB.SpiralConstructionInnerLineSeedID.Int64)]
	}
	// SpiralConstructionOuterLineGrid field
	parameter.SpiralConstructionOuterLineGrid = nil
	if parameterDB.SpiralConstructionOuterLineGridID.Int64 != 0 {
		parameter.SpiralConstructionOuterLineGrid = backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[uint(parameterDB.SpiralConstructionOuterLineGridID.Int64)]
	}
	// SpiralConstructionInnerLineGrid field
	parameter.SpiralConstructionInnerLineGrid = nil
	if parameterDB.SpiralConstructionInnerLineGridID.Int64 != 0 {
		parameter.SpiralConstructionInnerLineGrid = backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[uint(parameterDB.SpiralConstructionInnerLineGridID.Int64)]
	}
	// SpiralConstructionCircleGrid field
	parameter.SpiralConstructionCircleGrid = nil
	if parameterDB.SpiralConstructionCircleGridID.Int64 != 0 {
		parameter.SpiralConstructionCircleGrid = backRepo.BackRepoSpiralCircleGrid.Map_SpiralCircleGridDBID_SpiralCircleGridPtr[uint(parameterDB.SpiralConstructionCircleGridID.Int64)]
	}
	// SpiralConstructionOuterLineFullGrid field
	parameter.SpiralConstructionOuterLineFullGrid = nil
	if parameterDB.SpiralConstructionOuterLineFullGridID.Int64 != 0 {
		parameter.SpiralConstructionOuterLineFullGrid = backRepo.BackRepoSpiralLineGrid.Map_SpiralLineGridDBID_SpiralLineGridPtr[uint(parameterDB.SpiralConstructionOuterLineFullGridID.Int64)]
	}
	// SpiralBezierSeed field
	parameter.SpiralBezierSeed = nil
	if parameterDB.SpiralBezierSeedID.Int64 != 0 {
		parameter.SpiralBezierSeed = backRepo.BackRepoSpiralBezier.Map_SpiralBezierDBID_SpiralBezierPtr[uint(parameterDB.SpiralBezierSeedID.Int64)]
	}
	// SpiralBezierGrid field
	parameter.SpiralBezierGrid = nil
	if parameterDB.SpiralBezierGridID.Int64 != 0 {
		parameter.SpiralBezierGrid = backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[uint(parameterDB.SpiralBezierGridID.Int64)]
	}
	// SpiralBezierFullGrid field
	parameter.SpiralBezierFullGrid = nil
	if parameterDB.SpiralBezierFullGridID.Int64 != 0 {
		parameter.SpiralBezierFullGrid = backRepo.BackRepoSpiralBezierGrid.Map_SpiralBezierGridDBID_SpiralBezierGridPtr[uint(parameterDB.SpiralBezierFullGridID.Int64)]
	}
	// FrontCurveStack field
	parameter.FrontCurveStack = nil
	if parameterDB.FrontCurveStackID.Int64 != 0 {
		parameter.FrontCurveStack = backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[uint(parameterDB.FrontCurveStackID.Int64)]
	}
	// HourCurve field
	parameter.HourCurve = nil
	if parameterDB.HourCurveID.Int64 != 0 {
		parameter.HourCurve = backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[uint(parameterDB.HourCurveID.Int64)]
	}
	// HourMarker field
	parameter.HourMarker = nil
	if parameterDB.HourMarkerID.Int64 != 0 {
		parameter.HourMarker = backRepo.BackRepoSpiralCircle.Map_SpiralCircleDBID_SpiralCirclePtr[uint(parameterDB.HourMarkerID.Int64)]
	}
	// MinuteCurve field
	parameter.MinuteCurve = nil
	if parameterDB.MinuteCurveID.Int64 != 0 {
		parameter.MinuteCurve = backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[uint(parameterDB.MinuteCurveID.Int64)]
	}
	// MinuteMarker field
	parameter.MinuteMarker = nil
	if parameterDB.MinuteMarkerID.Int64 != 0 {
		parameter.MinuteMarker = backRepo.BackRepoSpiralCircle.Map_SpiralCircleDBID_SpiralCirclePtr[uint(parameterDB.MinuteMarkerID.Int64)]
	}
	// BackendCurve field
	parameter.BackendCurve = nil
	if parameterDB.BackendCurveID.Int64 != 0 {
		parameter.BackendCurve = backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[uint(parameterDB.BackendCurveID.Int64)]
	}
	// BackendMarker field
	parameter.BackendMarker = nil
	if parameterDB.BackendMarkerID.Int64 != 0 {
		parameter.BackendMarker = backRepo.BackRepoSpiralCircle.Map_SpiralCircleDBID_SpiralCirclePtr[uint(parameterDB.BackendMarkerID.Int64)]
	}
	// Fkey field
	parameter.Fkey = nil
	if parameterDB.FkeyID.Int64 != 0 {
		parameter.Fkey = backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(parameterDB.FkeyID.Int64)]
	}
	// PitchLines field
	parameter.PitchLines = nil
	if parameterDB.PitchLinesID.Int64 != 0 {
		parameter.PitchLines = backRepo.BackRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[uint(parameterDB.PitchLinesID.Int64)]
	}
	// MeasureLines field
	parameter.MeasureLines = nil
	if parameterDB.MeasureLinesID.Int64 != 0 {
		parameter.MeasureLines = backRepo.BackRepoAxisGrid.Map_AxisGridDBID_AxisGridPtr[uint(parameterDB.MeasureLinesID.Int64)]
	}
	// FirstVoice field
	parameter.FirstVoice = nil
	if parameterDB.FirstVoiceID.Int64 != 0 {
		parameter.FirstVoice = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.FirstVoiceID.Int64)]
	}
	// FirstVoiceShiftRigth field
	parameter.FirstVoiceShiftRigth = nil
	if parameterDB.FirstVoiceShiftRigthID.Int64 != 0 {
		parameter.FirstVoiceShiftRigth = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.FirstVoiceShiftRigthID.Int64)]
	}
	// SecondVoice field
	parameter.SecondVoice = nil
	if parameterDB.SecondVoiceID.Int64 != 0 {
		parameter.SecondVoice = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.SecondVoiceID.Int64)]
	}
	// SecondVoiceShiftedRight field
	parameter.SecondVoiceShiftedRight = nil
	if parameterDB.SecondVoiceShiftedRightID.Int64 != 0 {
		parameter.SecondVoiceShiftedRight = backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(parameterDB.SecondVoiceShiftedRightID.Int64)]
	}
	// FirstVoiceNotes field
	parameter.FirstVoiceNotes = nil
	if parameterDB.FirstVoiceNotesID.Int64 != 0 {
		parameter.FirstVoiceNotes = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.FirstVoiceNotesID.Int64)]
	}
	// FirstVoiceNotesShiftedRight field
	parameter.FirstVoiceNotesShiftedRight = nil
	if parameterDB.FirstVoiceNotesShiftedRightID.Int64 != 0 {
		parameter.FirstVoiceNotesShiftedRight = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.FirstVoiceNotesShiftedRightID.Int64)]
	}
	// SecondVoiceNotes field
	parameter.SecondVoiceNotes = nil
	if parameterDB.SecondVoiceNotesID.Int64 != 0 {
		parameter.SecondVoiceNotes = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.SecondVoiceNotesID.Int64)]
	}
	// SecondVoiceNotesShiftedRight field
	parameter.SecondVoiceNotesShiftedRight = nil
	if parameterDB.SecondVoiceNotesShiftedRightID.Int64 != 0 {
		parameter.SecondVoiceNotesShiftedRight = backRepo.BackRepoCircleGrid.Map_CircleGridDBID_CircleGridPtr[uint(parameterDB.SecondVoiceNotesShiftedRightID.Int64)]
	}
	// This loop redeem parameter.NoteInfos in the stage from the encode in the back repo
	// It parses all NoteInfoDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	parameter.NoteInfos = parameter.NoteInfos[:0]
	for _, _NoteInfoid := range parameterDB.ParameterPointersEncoding.NoteInfos {
		parameter.NoteInfos = append(parameter.NoteInfos, backRepo.BackRepoNoteInfo.Map_NoteInfoDBID_NoteInfoPtr[uint(_NoteInfoid)])
	}

	// HorizontalAxis field
	parameter.HorizontalAxis = nil
	if parameterDB.HorizontalAxisID.Int64 != 0 {
		parameter.HorizontalAxis = backRepo.BackRepoHorizontalAxis.Map_HorizontalAxisDBID_HorizontalAxisPtr[uint(parameterDB.HorizontalAxisID.Int64)]
	}
	// VerticalAxis field
	parameter.VerticalAxis = nil
	if parameterDB.VerticalAxisID.Int64 != 0 {
		parameter.VerticalAxis = backRepo.BackRepoVerticalAxis.Map_VerticalAxisDBID_VerticalAxisPtr[uint(parameterDB.VerticalAxisID.Int64)]
	}
	// SpiralOrigin field
	parameter.SpiralOrigin = nil
	if parameterDB.SpiralOriginID.Int64 != 0 {
		parameter.SpiralOrigin = backRepo.BackRepoSpiralOrigin.Map_SpiralOriginDBID_SpiralOriginPtr[uint(parameterDB.SpiralOriginID.Int64)]
	}
	return
}

// CommitParameter allows commit of a single parameter (if already staged)
func (backRepo *BackRepoStruct) CommitParameter(parameter *models.Parameter) {
	backRepo.BackRepoParameter.CommitPhaseOneInstance(parameter)
	if id, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {
		backRepo.BackRepoParameter.CommitPhaseTwoInstance(backRepo, id, parameter)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitParameter allows checkout of a single parameter (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutParameter(parameter *models.Parameter) {
	// check if the parameter is staged
	if _, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {

		if id, ok := backRepo.BackRepoParameter.Map_ParameterPtr_ParameterDBID[parameter]; ok {
			var parameterDB ParameterDB
			parameterDB.ID = id

			if _, err := backRepo.BackRepoParameter.db.First(&parameterDB, id); err != nil {
				log.Fatalln("CheckoutParameter : Problem with getting object with id:", id)
			}
			backRepo.BackRepoParameter.CheckoutPhaseOneInstance(&parameterDB)
			backRepo.BackRepoParameter.CheckoutPhaseTwoInstance(backRepo, &parameterDB)
		}
	}
}

// CopyBasicFieldsFromParameter
func (parameterDB *ParameterDB) CopyBasicFieldsFromParameter(parameter *models.Parameter) {
	// insertion point for fields commit

	parameterDB.Name_Data.String = parameter.Name
	parameterDB.Name_Data.Valid = true

	parameterDB.BackendColor_Data.String = parameter.BackendColor
	parameterDB.BackendColor_Data.Valid = true

	parameterDB.MinuteColor_Data.String = parameter.MinuteColor
	parameterDB.MinuteColor_Data.Valid = true

	parameterDB.HourColor_Data.String = parameter.HourColor
	parameterDB.HourColor_Data.Valid = true

	parameterDB.N_Data.Int64 = int64(parameter.N)
	parameterDB.N_Data.Valid = true

	parameterDB.M_Data.Int64 = int64(parameter.M)
	parameterDB.M_Data.Valid = true

	parameterDB.Z_Data.Int64 = int64(parameter.Z)
	parameterDB.Z_Data.Valid = true

	parameterDB.ShiftToNearestCircle_Data.Int64 = int64(parameter.ShiftToNearestCircle)
	parameterDB.ShiftToNearestCircle_Data.Valid = true

	parameterDB.InsideAngle_Data.Float64 = parameter.InsideAngle
	parameterDB.InsideAngle_Data.Valid = true

	parameterDB.SideLength_Data.Float64 = parameter.SideLength
	parameterDB.SideLength_Data.Valid = true

	parameterDB.StackWidth_Data.Int64 = int64(parameter.StackWidth)
	parameterDB.StackWidth_Data.Valid = true

	parameterDB.NbShitRight_Data.Int64 = int64(parameter.NbShitRight)
	parameterDB.NbShitRight_Data.Valid = true

	parameterDB.StackHeight_Data.Int64 = int64(parameter.StackHeight)
	parameterDB.StackHeight_Data.Valid = true

	parameterDB.BezierControlLengthRatio_Data.Float64 = parameter.BezierControlLengthRatio
	parameterDB.BezierControlLengthRatio_Data.Valid = true

	parameterDB.SpiralBezierStrength_Data.Float64 = parameter.SpiralBezierStrength
	parameterDB.SpiralBezierStrength_Data.Valid = true

	parameterDB.NbInterpolationPoints_Data.Int64 = int64(parameter.NbInterpolationPoints)
	parameterDB.NbInterpolationPoints_Data.Valid = true

	parameterDB.HourHandleRotationAngle_Data.Float64 = parameter.HourHandleRotationAngle
	parameterDB.HourHandleRotationAngle_Data.Valid = true

	parameterDB.HourHandleDiskDistance_Data.Float64 = parameter.HourHandleDiskDistance
	parameterDB.HourHandleDiskDistance_Data.Valid = true

	parameterDB.HourHandleRadius_Data.Float64 = parameter.HourHandleRadius
	parameterDB.HourHandleRadius_Data.Valid = true

	parameterDB.MinuteHandleRotationAngle_Data.Float64 = parameter.MinuteHandleRotationAngle
	parameterDB.MinuteHandleRotationAngle_Data.Valid = true

	parameterDB.MinuteHandleDiskDistance_Data.Float64 = parameter.MinuteHandleDiskDistance
	parameterDB.MinuteHandleDiskDistance_Data.Valid = true

	parameterDB.MinuteHandleRadius_Data.Float64 = parameter.MinuteHandleRadius
	parameterDB.MinuteHandleRadius_Data.Valid = true

	parameterDB.MinuteOffset_Data.Float64 = parameter.MinuteOffset
	parameterDB.MinuteOffset_Data.Valid = true

	parameterDB.BackendHandleRotationAngle_Data.Float64 = parameter.BackendHandleRotationAngle
	parameterDB.BackendHandleRotationAngle_Data.Valid = true

	parameterDB.BackendHandleDiskDistance_Data.Float64 = parameter.BackendHandleDiskDistance
	parameterDB.BackendHandleDiskDistance_Data.Valid = true

	parameterDB.BackendHandleRadius_Data.Float64 = parameter.BackendHandleRadius
	parameterDB.BackendHandleRadius_Data.Valid = true

	parameterDB.BackendOffset_Data.Float64 = parameter.BackendOffset
	parameterDB.BackendOffset_Data.Valid = true

	parameterDB.FkeySizeRatio_Data.Float64 = parameter.FkeySizeRatio
	parameterDB.FkeySizeRatio_Data.Valid = true

	parameterDB.FkeyOriginRelativeX_Data.Float64 = parameter.FkeyOriginRelativeX
	parameterDB.FkeyOriginRelativeX_Data.Valid = true

	parameterDB.FkeyOriginRelativeY_Data.Float64 = parameter.FkeyOriginRelativeY
	parameterDB.FkeyOriginRelativeY_Data.Valid = true

	parameterDB.PitchHeight_Data.Float64 = parameter.PitchHeight
	parameterDB.PitchHeight_Data.Valid = true

	parameterDB.NbPitchLines_Data.Int64 = int64(parameter.NbPitchLines)
	parameterDB.NbPitchLines_Data.Valid = true

	parameterDB.MeasureLinesHeightRatio_Data.Float64 = parameter.MeasureLinesHeightRatio
	parameterDB.MeasureLinesHeightRatio_Data.Valid = true

	parameterDB.NbMeasureLines_Data.Int64 = int64(parameter.NbMeasureLines)
	parameterDB.NbMeasureLines_Data.Valid = true

	parameterDB.NbMeasureLinesPerCurve_Data.Int64 = int64(parameter.NbMeasureLinesPerCurve)
	parameterDB.NbMeasureLinesPerCurve_Data.Valid = true

	parameterDB.FirstVoiceShiftX_Data.Float64 = parameter.FirstVoiceShiftX
	parameterDB.FirstVoiceShiftX_Data.Valid = true

	parameterDB.FirstVoiceShiftY_Data.Float64 = parameter.FirstVoiceShiftY
	parameterDB.FirstVoiceShiftY_Data.Valid = true

	parameterDB.PitchDifference_Data.Int64 = int64(parameter.PitchDifference)
	parameterDB.PitchDifference_Data.Valid = true

	parameterDB.Speed_Data.Float64 = parameter.Speed
	parameterDB.Speed_Data.Valid = true

	parameterDB.Level_Data.Float64 = parameter.Level
	parameterDB.Level_Data.Valid = true

	parameterDB.IsMinor_Data.Bool = parameter.IsMinor
	parameterDB.IsMinor_Data.Valid = true

	parameterDB.OriginX_Data.Float64 = parameter.OriginX
	parameterDB.OriginX_Data.Valid = true

	parameterDB.OriginY_Data.Float64 = parameter.OriginY
	parameterDB.OriginY_Data.Valid = true

	parameterDB.SpiralOriginX_Data.Float64 = parameter.SpiralOriginX
	parameterDB.SpiralOriginX_Data.Valid = true

	parameterDB.SpiralOriginY_Data.Float64 = parameter.SpiralOriginY
	parameterDB.SpiralOriginY_Data.Valid = true

	parameterDB.OriginCrossWidth_Data.Float64 = parameter.OriginCrossWidth
	parameterDB.OriginCrossWidth_Data.Valid = true

	parameterDB.SpiralRadiusRatio_Data.Float64 = parameter.SpiralRadiusRatio
	parameterDB.SpiralRadiusRatio_Data.Valid = true

	parameterDB.ShowSpiralBezierConstruct_Data.Bool = parameter.ShowSpiralBezierConstruct
	parameterDB.ShowSpiralBezierConstruct_Data.Valid = true

	parameterDB.ShowInterpolationPoints_Data.Bool = parameter.ShowInterpolationPoints
	parameterDB.ShowInterpolationPoints_Data.Valid = true
}

// CopyBasicFieldsFromParameter_WOP
func (parameterDB *ParameterDB) CopyBasicFieldsFromParameter_WOP(parameter *models.Parameter_WOP) {
	// insertion point for fields commit

	parameterDB.Name_Data.String = parameter.Name
	parameterDB.Name_Data.Valid = true

	parameterDB.BackendColor_Data.String = parameter.BackendColor
	parameterDB.BackendColor_Data.Valid = true

	parameterDB.MinuteColor_Data.String = parameter.MinuteColor
	parameterDB.MinuteColor_Data.Valid = true

	parameterDB.HourColor_Data.String = parameter.HourColor
	parameterDB.HourColor_Data.Valid = true

	parameterDB.N_Data.Int64 = int64(parameter.N)
	parameterDB.N_Data.Valid = true

	parameterDB.M_Data.Int64 = int64(parameter.M)
	parameterDB.M_Data.Valid = true

	parameterDB.Z_Data.Int64 = int64(parameter.Z)
	parameterDB.Z_Data.Valid = true

	parameterDB.ShiftToNearestCircle_Data.Int64 = int64(parameter.ShiftToNearestCircle)
	parameterDB.ShiftToNearestCircle_Data.Valid = true

	parameterDB.InsideAngle_Data.Float64 = parameter.InsideAngle
	parameterDB.InsideAngle_Data.Valid = true

	parameterDB.SideLength_Data.Float64 = parameter.SideLength
	parameterDB.SideLength_Data.Valid = true

	parameterDB.StackWidth_Data.Int64 = int64(parameter.StackWidth)
	parameterDB.StackWidth_Data.Valid = true

	parameterDB.NbShitRight_Data.Int64 = int64(parameter.NbShitRight)
	parameterDB.NbShitRight_Data.Valid = true

	parameterDB.StackHeight_Data.Int64 = int64(parameter.StackHeight)
	parameterDB.StackHeight_Data.Valid = true

	parameterDB.BezierControlLengthRatio_Data.Float64 = parameter.BezierControlLengthRatio
	parameterDB.BezierControlLengthRatio_Data.Valid = true

	parameterDB.SpiralBezierStrength_Data.Float64 = parameter.SpiralBezierStrength
	parameterDB.SpiralBezierStrength_Data.Valid = true

	parameterDB.NbInterpolationPoints_Data.Int64 = int64(parameter.NbInterpolationPoints)
	parameterDB.NbInterpolationPoints_Data.Valid = true

	parameterDB.HourHandleRotationAngle_Data.Float64 = parameter.HourHandleRotationAngle
	parameterDB.HourHandleRotationAngle_Data.Valid = true

	parameterDB.HourHandleDiskDistance_Data.Float64 = parameter.HourHandleDiskDistance
	parameterDB.HourHandleDiskDistance_Data.Valid = true

	parameterDB.HourHandleRadius_Data.Float64 = parameter.HourHandleRadius
	parameterDB.HourHandleRadius_Data.Valid = true

	parameterDB.MinuteHandleRotationAngle_Data.Float64 = parameter.MinuteHandleRotationAngle
	parameterDB.MinuteHandleRotationAngle_Data.Valid = true

	parameterDB.MinuteHandleDiskDistance_Data.Float64 = parameter.MinuteHandleDiskDistance
	parameterDB.MinuteHandleDiskDistance_Data.Valid = true

	parameterDB.MinuteHandleRadius_Data.Float64 = parameter.MinuteHandleRadius
	parameterDB.MinuteHandleRadius_Data.Valid = true

	parameterDB.MinuteOffset_Data.Float64 = parameter.MinuteOffset
	parameterDB.MinuteOffset_Data.Valid = true

	parameterDB.BackendHandleRotationAngle_Data.Float64 = parameter.BackendHandleRotationAngle
	parameterDB.BackendHandleRotationAngle_Data.Valid = true

	parameterDB.BackendHandleDiskDistance_Data.Float64 = parameter.BackendHandleDiskDistance
	parameterDB.BackendHandleDiskDistance_Data.Valid = true

	parameterDB.BackendHandleRadius_Data.Float64 = parameter.BackendHandleRadius
	parameterDB.BackendHandleRadius_Data.Valid = true

	parameterDB.BackendOffset_Data.Float64 = parameter.BackendOffset
	parameterDB.BackendOffset_Data.Valid = true

	parameterDB.FkeySizeRatio_Data.Float64 = parameter.FkeySizeRatio
	parameterDB.FkeySizeRatio_Data.Valid = true

	parameterDB.FkeyOriginRelativeX_Data.Float64 = parameter.FkeyOriginRelativeX
	parameterDB.FkeyOriginRelativeX_Data.Valid = true

	parameterDB.FkeyOriginRelativeY_Data.Float64 = parameter.FkeyOriginRelativeY
	parameterDB.FkeyOriginRelativeY_Data.Valid = true

	parameterDB.PitchHeight_Data.Float64 = parameter.PitchHeight
	parameterDB.PitchHeight_Data.Valid = true

	parameterDB.NbPitchLines_Data.Int64 = int64(parameter.NbPitchLines)
	parameterDB.NbPitchLines_Data.Valid = true

	parameterDB.MeasureLinesHeightRatio_Data.Float64 = parameter.MeasureLinesHeightRatio
	parameterDB.MeasureLinesHeightRatio_Data.Valid = true

	parameterDB.NbMeasureLines_Data.Int64 = int64(parameter.NbMeasureLines)
	parameterDB.NbMeasureLines_Data.Valid = true

	parameterDB.NbMeasureLinesPerCurve_Data.Int64 = int64(parameter.NbMeasureLinesPerCurve)
	parameterDB.NbMeasureLinesPerCurve_Data.Valid = true

	parameterDB.FirstVoiceShiftX_Data.Float64 = parameter.FirstVoiceShiftX
	parameterDB.FirstVoiceShiftX_Data.Valid = true

	parameterDB.FirstVoiceShiftY_Data.Float64 = parameter.FirstVoiceShiftY
	parameterDB.FirstVoiceShiftY_Data.Valid = true

	parameterDB.PitchDifference_Data.Int64 = int64(parameter.PitchDifference)
	parameterDB.PitchDifference_Data.Valid = true

	parameterDB.Speed_Data.Float64 = parameter.Speed
	parameterDB.Speed_Data.Valid = true

	parameterDB.Level_Data.Float64 = parameter.Level
	parameterDB.Level_Data.Valid = true

	parameterDB.IsMinor_Data.Bool = parameter.IsMinor
	parameterDB.IsMinor_Data.Valid = true

	parameterDB.OriginX_Data.Float64 = parameter.OriginX
	parameterDB.OriginX_Data.Valid = true

	parameterDB.OriginY_Data.Float64 = parameter.OriginY
	parameterDB.OriginY_Data.Valid = true

	parameterDB.SpiralOriginX_Data.Float64 = parameter.SpiralOriginX
	parameterDB.SpiralOriginX_Data.Valid = true

	parameterDB.SpiralOriginY_Data.Float64 = parameter.SpiralOriginY
	parameterDB.SpiralOriginY_Data.Valid = true

	parameterDB.OriginCrossWidth_Data.Float64 = parameter.OriginCrossWidth
	parameterDB.OriginCrossWidth_Data.Valid = true

	parameterDB.SpiralRadiusRatio_Data.Float64 = parameter.SpiralRadiusRatio
	parameterDB.SpiralRadiusRatio_Data.Valid = true

	parameterDB.ShowSpiralBezierConstruct_Data.Bool = parameter.ShowSpiralBezierConstruct
	parameterDB.ShowSpiralBezierConstruct_Data.Valid = true

	parameterDB.ShowInterpolationPoints_Data.Bool = parameter.ShowInterpolationPoints
	parameterDB.ShowInterpolationPoints_Data.Valid = true
}

// CopyBasicFieldsFromParameterWOP
func (parameterDB *ParameterDB) CopyBasicFieldsFromParameterWOP(parameter *ParameterWOP) {
	// insertion point for fields commit

	parameterDB.Name_Data.String = parameter.Name
	parameterDB.Name_Data.Valid = true

	parameterDB.BackendColor_Data.String = parameter.BackendColor
	parameterDB.BackendColor_Data.Valid = true

	parameterDB.MinuteColor_Data.String = parameter.MinuteColor
	parameterDB.MinuteColor_Data.Valid = true

	parameterDB.HourColor_Data.String = parameter.HourColor
	parameterDB.HourColor_Data.Valid = true

	parameterDB.N_Data.Int64 = int64(parameter.N)
	parameterDB.N_Data.Valid = true

	parameterDB.M_Data.Int64 = int64(parameter.M)
	parameterDB.M_Data.Valid = true

	parameterDB.Z_Data.Int64 = int64(parameter.Z)
	parameterDB.Z_Data.Valid = true

	parameterDB.ShiftToNearestCircle_Data.Int64 = int64(parameter.ShiftToNearestCircle)
	parameterDB.ShiftToNearestCircle_Data.Valid = true

	parameterDB.InsideAngle_Data.Float64 = parameter.InsideAngle
	parameterDB.InsideAngle_Data.Valid = true

	parameterDB.SideLength_Data.Float64 = parameter.SideLength
	parameterDB.SideLength_Data.Valid = true

	parameterDB.StackWidth_Data.Int64 = int64(parameter.StackWidth)
	parameterDB.StackWidth_Data.Valid = true

	parameterDB.NbShitRight_Data.Int64 = int64(parameter.NbShitRight)
	parameterDB.NbShitRight_Data.Valid = true

	parameterDB.StackHeight_Data.Int64 = int64(parameter.StackHeight)
	parameterDB.StackHeight_Data.Valid = true

	parameterDB.BezierControlLengthRatio_Data.Float64 = parameter.BezierControlLengthRatio
	parameterDB.BezierControlLengthRatio_Data.Valid = true

	parameterDB.SpiralBezierStrength_Data.Float64 = parameter.SpiralBezierStrength
	parameterDB.SpiralBezierStrength_Data.Valid = true

	parameterDB.NbInterpolationPoints_Data.Int64 = int64(parameter.NbInterpolationPoints)
	parameterDB.NbInterpolationPoints_Data.Valid = true

	parameterDB.HourHandleRotationAngle_Data.Float64 = parameter.HourHandleRotationAngle
	parameterDB.HourHandleRotationAngle_Data.Valid = true

	parameterDB.HourHandleDiskDistance_Data.Float64 = parameter.HourHandleDiskDistance
	parameterDB.HourHandleDiskDistance_Data.Valid = true

	parameterDB.HourHandleRadius_Data.Float64 = parameter.HourHandleRadius
	parameterDB.HourHandleRadius_Data.Valid = true

	parameterDB.MinuteHandleRotationAngle_Data.Float64 = parameter.MinuteHandleRotationAngle
	parameterDB.MinuteHandleRotationAngle_Data.Valid = true

	parameterDB.MinuteHandleDiskDistance_Data.Float64 = parameter.MinuteHandleDiskDistance
	parameterDB.MinuteHandleDiskDistance_Data.Valid = true

	parameterDB.MinuteHandleRadius_Data.Float64 = parameter.MinuteHandleRadius
	parameterDB.MinuteHandleRadius_Data.Valid = true

	parameterDB.MinuteOffset_Data.Float64 = parameter.MinuteOffset
	parameterDB.MinuteOffset_Data.Valid = true

	parameterDB.BackendHandleRotationAngle_Data.Float64 = parameter.BackendHandleRotationAngle
	parameterDB.BackendHandleRotationAngle_Data.Valid = true

	parameterDB.BackendHandleDiskDistance_Data.Float64 = parameter.BackendHandleDiskDistance
	parameterDB.BackendHandleDiskDistance_Data.Valid = true

	parameterDB.BackendHandleRadius_Data.Float64 = parameter.BackendHandleRadius
	parameterDB.BackendHandleRadius_Data.Valid = true

	parameterDB.BackendOffset_Data.Float64 = parameter.BackendOffset
	parameterDB.BackendOffset_Data.Valid = true

	parameterDB.FkeySizeRatio_Data.Float64 = parameter.FkeySizeRatio
	parameterDB.FkeySizeRatio_Data.Valid = true

	parameterDB.FkeyOriginRelativeX_Data.Float64 = parameter.FkeyOriginRelativeX
	parameterDB.FkeyOriginRelativeX_Data.Valid = true

	parameterDB.FkeyOriginRelativeY_Data.Float64 = parameter.FkeyOriginRelativeY
	parameterDB.FkeyOriginRelativeY_Data.Valid = true

	parameterDB.PitchHeight_Data.Float64 = parameter.PitchHeight
	parameterDB.PitchHeight_Data.Valid = true

	parameterDB.NbPitchLines_Data.Int64 = int64(parameter.NbPitchLines)
	parameterDB.NbPitchLines_Data.Valid = true

	parameterDB.MeasureLinesHeightRatio_Data.Float64 = parameter.MeasureLinesHeightRatio
	parameterDB.MeasureLinesHeightRatio_Data.Valid = true

	parameterDB.NbMeasureLines_Data.Int64 = int64(parameter.NbMeasureLines)
	parameterDB.NbMeasureLines_Data.Valid = true

	parameterDB.NbMeasureLinesPerCurve_Data.Int64 = int64(parameter.NbMeasureLinesPerCurve)
	parameterDB.NbMeasureLinesPerCurve_Data.Valid = true

	parameterDB.FirstVoiceShiftX_Data.Float64 = parameter.FirstVoiceShiftX
	parameterDB.FirstVoiceShiftX_Data.Valid = true

	parameterDB.FirstVoiceShiftY_Data.Float64 = parameter.FirstVoiceShiftY
	parameterDB.FirstVoiceShiftY_Data.Valid = true

	parameterDB.PitchDifference_Data.Int64 = int64(parameter.PitchDifference)
	parameterDB.PitchDifference_Data.Valid = true

	parameterDB.Speed_Data.Float64 = parameter.Speed
	parameterDB.Speed_Data.Valid = true

	parameterDB.Level_Data.Float64 = parameter.Level
	parameterDB.Level_Data.Valid = true

	parameterDB.IsMinor_Data.Bool = parameter.IsMinor
	parameterDB.IsMinor_Data.Valid = true

	parameterDB.OriginX_Data.Float64 = parameter.OriginX
	parameterDB.OriginX_Data.Valid = true

	parameterDB.OriginY_Data.Float64 = parameter.OriginY
	parameterDB.OriginY_Data.Valid = true

	parameterDB.SpiralOriginX_Data.Float64 = parameter.SpiralOriginX
	parameterDB.SpiralOriginX_Data.Valid = true

	parameterDB.SpiralOriginY_Data.Float64 = parameter.SpiralOriginY
	parameterDB.SpiralOriginY_Data.Valid = true

	parameterDB.OriginCrossWidth_Data.Float64 = parameter.OriginCrossWidth
	parameterDB.OriginCrossWidth_Data.Valid = true

	parameterDB.SpiralRadiusRatio_Data.Float64 = parameter.SpiralRadiusRatio
	parameterDB.SpiralRadiusRatio_Data.Valid = true

	parameterDB.ShowSpiralBezierConstruct_Data.Bool = parameter.ShowSpiralBezierConstruct
	parameterDB.ShowSpiralBezierConstruct_Data.Valid = true

	parameterDB.ShowInterpolationPoints_Data.Bool = parameter.ShowInterpolationPoints
	parameterDB.ShowInterpolationPoints_Data.Valid = true
}

// CopyBasicFieldsToParameter
func (parameterDB *ParameterDB) CopyBasicFieldsToParameter(parameter *models.Parameter) {
	// insertion point for checkout of basic fields (back repo to stage)
	parameter.Name = parameterDB.Name_Data.String
	parameter.BackendColor = parameterDB.BackendColor_Data.String
	parameter.MinuteColor = parameterDB.MinuteColor_Data.String
	parameter.HourColor = parameterDB.HourColor_Data.String
	parameter.N = int(parameterDB.N_Data.Int64)
	parameter.M = int(parameterDB.M_Data.Int64)
	parameter.Z = int(parameterDB.Z_Data.Int64)
	parameter.ShiftToNearestCircle = int(parameterDB.ShiftToNearestCircle_Data.Int64)
	parameter.InsideAngle = parameterDB.InsideAngle_Data.Float64
	parameter.SideLength = parameterDB.SideLength_Data.Float64
	parameter.StackWidth = int(parameterDB.StackWidth_Data.Int64)
	parameter.NbShitRight = int(parameterDB.NbShitRight_Data.Int64)
	parameter.StackHeight = int(parameterDB.StackHeight_Data.Int64)
	parameter.BezierControlLengthRatio = parameterDB.BezierControlLengthRatio_Data.Float64
	parameter.SpiralBezierStrength = parameterDB.SpiralBezierStrength_Data.Float64
	parameter.NbInterpolationPoints = int(parameterDB.NbInterpolationPoints_Data.Int64)
	parameter.HourHandleRotationAngle = parameterDB.HourHandleRotationAngle_Data.Float64
	parameter.HourHandleDiskDistance = parameterDB.HourHandleDiskDistance_Data.Float64
	parameter.HourHandleRadius = parameterDB.HourHandleRadius_Data.Float64
	parameter.MinuteHandleRotationAngle = parameterDB.MinuteHandleRotationAngle_Data.Float64
	parameter.MinuteHandleDiskDistance = parameterDB.MinuteHandleDiskDistance_Data.Float64
	parameter.MinuteHandleRadius = parameterDB.MinuteHandleRadius_Data.Float64
	parameter.MinuteOffset = parameterDB.MinuteOffset_Data.Float64
	parameter.BackendHandleRotationAngle = parameterDB.BackendHandleRotationAngle_Data.Float64
	parameter.BackendHandleDiskDistance = parameterDB.BackendHandleDiskDistance_Data.Float64
	parameter.BackendHandleRadius = parameterDB.BackendHandleRadius_Data.Float64
	parameter.BackendOffset = parameterDB.BackendOffset_Data.Float64
	parameter.FkeySizeRatio = parameterDB.FkeySizeRatio_Data.Float64
	parameter.FkeyOriginRelativeX = parameterDB.FkeyOriginRelativeX_Data.Float64
	parameter.FkeyOriginRelativeY = parameterDB.FkeyOriginRelativeY_Data.Float64
	parameter.PitchHeight = parameterDB.PitchHeight_Data.Float64
	parameter.NbPitchLines = int(parameterDB.NbPitchLines_Data.Int64)
	parameter.MeasureLinesHeightRatio = parameterDB.MeasureLinesHeightRatio_Data.Float64
	parameter.NbMeasureLines = int(parameterDB.NbMeasureLines_Data.Int64)
	parameter.NbMeasureLinesPerCurve = int(parameterDB.NbMeasureLinesPerCurve_Data.Int64)
	parameter.FirstVoiceShiftX = parameterDB.FirstVoiceShiftX_Data.Float64
	parameter.FirstVoiceShiftY = parameterDB.FirstVoiceShiftY_Data.Float64
	parameter.PitchDifference = int(parameterDB.PitchDifference_Data.Int64)
	parameter.Speed = parameterDB.Speed_Data.Float64
	parameter.Level = parameterDB.Level_Data.Float64
	parameter.IsMinor = parameterDB.IsMinor_Data.Bool
	parameter.OriginX = parameterDB.OriginX_Data.Float64
	parameter.OriginY = parameterDB.OriginY_Data.Float64
	parameter.SpiralOriginX = parameterDB.SpiralOriginX_Data.Float64
	parameter.SpiralOriginY = parameterDB.SpiralOriginY_Data.Float64
	parameter.OriginCrossWidth = parameterDB.OriginCrossWidth_Data.Float64
	parameter.SpiralRadiusRatio = parameterDB.SpiralRadiusRatio_Data.Float64
	parameter.ShowSpiralBezierConstruct = parameterDB.ShowSpiralBezierConstruct_Data.Bool
	parameter.ShowInterpolationPoints = parameterDB.ShowInterpolationPoints_Data.Bool
}

// CopyBasicFieldsToParameter_WOP
func (parameterDB *ParameterDB) CopyBasicFieldsToParameter_WOP(parameter *models.Parameter_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	parameter.Name = parameterDB.Name_Data.String
	parameter.BackendColor = parameterDB.BackendColor_Data.String
	parameter.MinuteColor = parameterDB.MinuteColor_Data.String
	parameter.HourColor = parameterDB.HourColor_Data.String
	parameter.N = int(parameterDB.N_Data.Int64)
	parameter.M = int(parameterDB.M_Data.Int64)
	parameter.Z = int(parameterDB.Z_Data.Int64)
	parameter.ShiftToNearestCircle = int(parameterDB.ShiftToNearestCircle_Data.Int64)
	parameter.InsideAngle = parameterDB.InsideAngle_Data.Float64
	parameter.SideLength = parameterDB.SideLength_Data.Float64
	parameter.StackWidth = int(parameterDB.StackWidth_Data.Int64)
	parameter.NbShitRight = int(parameterDB.NbShitRight_Data.Int64)
	parameter.StackHeight = int(parameterDB.StackHeight_Data.Int64)
	parameter.BezierControlLengthRatio = parameterDB.BezierControlLengthRatio_Data.Float64
	parameter.SpiralBezierStrength = parameterDB.SpiralBezierStrength_Data.Float64
	parameter.NbInterpolationPoints = int(parameterDB.NbInterpolationPoints_Data.Int64)
	parameter.HourHandleRotationAngle = parameterDB.HourHandleRotationAngle_Data.Float64
	parameter.HourHandleDiskDistance = parameterDB.HourHandleDiskDistance_Data.Float64
	parameter.HourHandleRadius = parameterDB.HourHandleRadius_Data.Float64
	parameter.MinuteHandleRotationAngle = parameterDB.MinuteHandleRotationAngle_Data.Float64
	parameter.MinuteHandleDiskDistance = parameterDB.MinuteHandleDiskDistance_Data.Float64
	parameter.MinuteHandleRadius = parameterDB.MinuteHandleRadius_Data.Float64
	parameter.MinuteOffset = parameterDB.MinuteOffset_Data.Float64
	parameter.BackendHandleRotationAngle = parameterDB.BackendHandleRotationAngle_Data.Float64
	parameter.BackendHandleDiskDistance = parameterDB.BackendHandleDiskDistance_Data.Float64
	parameter.BackendHandleRadius = parameterDB.BackendHandleRadius_Data.Float64
	parameter.BackendOffset = parameterDB.BackendOffset_Data.Float64
	parameter.FkeySizeRatio = parameterDB.FkeySizeRatio_Data.Float64
	parameter.FkeyOriginRelativeX = parameterDB.FkeyOriginRelativeX_Data.Float64
	parameter.FkeyOriginRelativeY = parameterDB.FkeyOriginRelativeY_Data.Float64
	parameter.PitchHeight = parameterDB.PitchHeight_Data.Float64
	parameter.NbPitchLines = int(parameterDB.NbPitchLines_Data.Int64)
	parameter.MeasureLinesHeightRatio = parameterDB.MeasureLinesHeightRatio_Data.Float64
	parameter.NbMeasureLines = int(parameterDB.NbMeasureLines_Data.Int64)
	parameter.NbMeasureLinesPerCurve = int(parameterDB.NbMeasureLinesPerCurve_Data.Int64)
	parameter.FirstVoiceShiftX = parameterDB.FirstVoiceShiftX_Data.Float64
	parameter.FirstVoiceShiftY = parameterDB.FirstVoiceShiftY_Data.Float64
	parameter.PitchDifference = int(parameterDB.PitchDifference_Data.Int64)
	parameter.Speed = parameterDB.Speed_Data.Float64
	parameter.Level = parameterDB.Level_Data.Float64
	parameter.IsMinor = parameterDB.IsMinor_Data.Bool
	parameter.OriginX = parameterDB.OriginX_Data.Float64
	parameter.OriginY = parameterDB.OriginY_Data.Float64
	parameter.SpiralOriginX = parameterDB.SpiralOriginX_Data.Float64
	parameter.SpiralOriginY = parameterDB.SpiralOriginY_Data.Float64
	parameter.OriginCrossWidth = parameterDB.OriginCrossWidth_Data.Float64
	parameter.SpiralRadiusRatio = parameterDB.SpiralRadiusRatio_Data.Float64
	parameter.ShowSpiralBezierConstruct = parameterDB.ShowSpiralBezierConstruct_Data.Bool
	parameter.ShowInterpolationPoints = parameterDB.ShowInterpolationPoints_Data.Bool
}

// CopyBasicFieldsToParameterWOP
func (parameterDB *ParameterDB) CopyBasicFieldsToParameterWOP(parameter *ParameterWOP) {
	parameter.ID = int(parameterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	parameter.Name = parameterDB.Name_Data.String
	parameter.BackendColor = parameterDB.BackendColor_Data.String
	parameter.MinuteColor = parameterDB.MinuteColor_Data.String
	parameter.HourColor = parameterDB.HourColor_Data.String
	parameter.N = int(parameterDB.N_Data.Int64)
	parameter.M = int(parameterDB.M_Data.Int64)
	parameter.Z = int(parameterDB.Z_Data.Int64)
	parameter.ShiftToNearestCircle = int(parameterDB.ShiftToNearestCircle_Data.Int64)
	parameter.InsideAngle = parameterDB.InsideAngle_Data.Float64
	parameter.SideLength = parameterDB.SideLength_Data.Float64
	parameter.StackWidth = int(parameterDB.StackWidth_Data.Int64)
	parameter.NbShitRight = int(parameterDB.NbShitRight_Data.Int64)
	parameter.StackHeight = int(parameterDB.StackHeight_Data.Int64)
	parameter.BezierControlLengthRatio = parameterDB.BezierControlLengthRatio_Data.Float64
	parameter.SpiralBezierStrength = parameterDB.SpiralBezierStrength_Data.Float64
	parameter.NbInterpolationPoints = int(parameterDB.NbInterpolationPoints_Data.Int64)
	parameter.HourHandleRotationAngle = parameterDB.HourHandleRotationAngle_Data.Float64
	parameter.HourHandleDiskDistance = parameterDB.HourHandleDiskDistance_Data.Float64
	parameter.HourHandleRadius = parameterDB.HourHandleRadius_Data.Float64
	parameter.MinuteHandleRotationAngle = parameterDB.MinuteHandleRotationAngle_Data.Float64
	parameter.MinuteHandleDiskDistance = parameterDB.MinuteHandleDiskDistance_Data.Float64
	parameter.MinuteHandleRadius = parameterDB.MinuteHandleRadius_Data.Float64
	parameter.MinuteOffset = parameterDB.MinuteOffset_Data.Float64
	parameter.BackendHandleRotationAngle = parameterDB.BackendHandleRotationAngle_Data.Float64
	parameter.BackendHandleDiskDistance = parameterDB.BackendHandleDiskDistance_Data.Float64
	parameter.BackendHandleRadius = parameterDB.BackendHandleRadius_Data.Float64
	parameter.BackendOffset = parameterDB.BackendOffset_Data.Float64
	parameter.FkeySizeRatio = parameterDB.FkeySizeRatio_Data.Float64
	parameter.FkeyOriginRelativeX = parameterDB.FkeyOriginRelativeX_Data.Float64
	parameter.FkeyOriginRelativeY = parameterDB.FkeyOriginRelativeY_Data.Float64
	parameter.PitchHeight = parameterDB.PitchHeight_Data.Float64
	parameter.NbPitchLines = int(parameterDB.NbPitchLines_Data.Int64)
	parameter.MeasureLinesHeightRatio = parameterDB.MeasureLinesHeightRatio_Data.Float64
	parameter.NbMeasureLines = int(parameterDB.NbMeasureLines_Data.Int64)
	parameter.NbMeasureLinesPerCurve = int(parameterDB.NbMeasureLinesPerCurve_Data.Int64)
	parameter.FirstVoiceShiftX = parameterDB.FirstVoiceShiftX_Data.Float64
	parameter.FirstVoiceShiftY = parameterDB.FirstVoiceShiftY_Data.Float64
	parameter.PitchDifference = int(parameterDB.PitchDifference_Data.Int64)
	parameter.Speed = parameterDB.Speed_Data.Float64
	parameter.Level = parameterDB.Level_Data.Float64
	parameter.IsMinor = parameterDB.IsMinor_Data.Bool
	parameter.OriginX = parameterDB.OriginX_Data.Float64
	parameter.OriginY = parameterDB.OriginY_Data.Float64
	parameter.SpiralOriginX = parameterDB.SpiralOriginX_Data.Float64
	parameter.SpiralOriginY = parameterDB.SpiralOriginY_Data.Float64
	parameter.OriginCrossWidth = parameterDB.OriginCrossWidth_Data.Float64
	parameter.SpiralRadiusRatio = parameterDB.SpiralRadiusRatio_Data.Float64
	parameter.ShowSpiralBezierConstruct = parameterDB.ShowSpiralBezierConstruct_Data.Bool
	parameter.ShowInterpolationPoints = parameterDB.ShowInterpolationPoints_Data.Bool
}

// Backup generates a json file from a slice of all ParameterDB instances in the backrepo
func (backRepoParameter *BackRepoParameterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ParameterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ParameterDB, 0)
	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {
		forBackup = append(forBackup, parameterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Parameter ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Parameter file", err.Error())
	}
}

// Backup generates a json file from a slice of all ParameterDB instances in the backrepo
func (backRepoParameter *BackRepoParameterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ParameterDB, 0)
	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {
		forBackup = append(forBackup, parameterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Parameter")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Parameter_Fields, -1)
	for _, parameterDB := range forBackup {

		var parameterWOP ParameterWOP
		parameterDB.CopyBasicFieldsToParameterWOP(&parameterWOP)

		row := sh.AddRow()
		row.WriteStruct(&parameterWOP, -1)
	}
}

// RestoreXL from the "Parameter" sheet all ParameterDB instances
func (backRepoParameter *BackRepoParameterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoParameterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Parameter"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoParameter.rowVisitorParameter)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoParameter *BackRepoParameterStruct) rowVisitorParameter(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var parameterWOP ParameterWOP
		row.ReadStruct(&parameterWOP)

		// add the unmarshalled struct to the stage
		parameterDB := new(ParameterDB)
		parameterDB.CopyBasicFieldsFromParameterWOP(&parameterWOP)

		parameterDB_ID_atBackupTime := parameterDB.ID
		parameterDB.ID = 0
		_, err := backRepoParameter.db.Create(parameterDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = parameterDB
		BackRepoParameterid_atBckpTime_newID[parameterDB_ID_atBackupTime] = parameterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ParameterDB.json" in dirPath that stores an array
// of ParameterDB and stores it in the database
// the map BackRepoParameterid_atBckpTime_newID is updated accordingly
func (backRepoParameter *BackRepoParameterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoParameterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ParameterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Parameter file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ParameterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ParameterDBID_ParameterDB
	for _, parameterDB := range forRestore {

		parameterDB_ID_atBackupTime := parameterDB.ID
		parameterDB.ID = 0
		_, err := backRepoParameter.db.Create(parameterDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoParameter.Map_ParameterDBID_ParameterDB[parameterDB.ID] = parameterDB
		BackRepoParameterid_atBckpTime_newID[parameterDB_ID_atBackupTime] = parameterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Parameter file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Parameter>id_atBckpTime_newID
// to compute new index
func (backRepoParameter *BackRepoParameterStruct) RestorePhaseTwo() {

	for _, parameterDB := range backRepoParameter.Map_ParameterDBID_ParameterDB {

		// next line of code is to avert unused variable compilation error
		_ = parameterDB

		// insertion point for reindexing pointers encoding
		// reindexing InitialRhombus field
		if parameterDB.InitialRhombusID.Int64 != 0 {
			parameterDB.InitialRhombusID.Int64 = int64(BackRepoRhombusid_atBckpTime_newID[uint(parameterDB.InitialRhombusID.Int64)])
			parameterDB.InitialRhombusID.Valid = true
		}

		// reindexing InitialCircle field
		if parameterDB.InitialCircleID.Int64 != 0 {
			parameterDB.InitialCircleID.Int64 = int64(BackRepoCircleid_atBckpTime_newID[uint(parameterDB.InitialCircleID.Int64)])
			parameterDB.InitialCircleID.Valid = true
		}

		// reindexing InitialRhombusGrid field
		if parameterDB.InitialRhombusGridID.Int64 != 0 {
			parameterDB.InitialRhombusGridID.Int64 = int64(BackRepoRhombusGridid_atBckpTime_newID[uint(parameterDB.InitialRhombusGridID.Int64)])
			parameterDB.InitialRhombusGridID.Valid = true
		}

		// reindexing InitialCircleGrid field
		if parameterDB.InitialCircleGridID.Int64 != 0 {
			parameterDB.InitialCircleGridID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.InitialCircleGridID.Int64)])
			parameterDB.InitialCircleGridID.Valid = true
		}

		// reindexing InitialAxis field
		if parameterDB.InitialAxisID.Int64 != 0 {
			parameterDB.InitialAxisID.Int64 = int64(BackRepoAxisid_atBckpTime_newID[uint(parameterDB.InitialAxisID.Int64)])
			parameterDB.InitialAxisID.Valid = true
		}

		// reindexing RotatedAxis field
		if parameterDB.RotatedAxisID.Int64 != 0 {
			parameterDB.RotatedAxisID.Int64 = int64(BackRepoAxisid_atBckpTime_newID[uint(parameterDB.RotatedAxisID.Int64)])
			parameterDB.RotatedAxisID.Valid = true
		}

		// reindexing RotatedRhombus field
		if parameterDB.RotatedRhombusID.Int64 != 0 {
			parameterDB.RotatedRhombusID.Int64 = int64(BackRepoRhombusid_atBckpTime_newID[uint(parameterDB.RotatedRhombusID.Int64)])
			parameterDB.RotatedRhombusID.Valid = true
		}

		// reindexing RotatedRhombusGrid field
		if parameterDB.RotatedRhombusGridID.Int64 != 0 {
			parameterDB.RotatedRhombusGridID.Int64 = int64(BackRepoRhombusGridid_atBckpTime_newID[uint(parameterDB.RotatedRhombusGridID.Int64)])
			parameterDB.RotatedRhombusGridID.Valid = true
		}

		// reindexing RotatedCircleGrid field
		if parameterDB.RotatedCircleGridID.Int64 != 0 {
			parameterDB.RotatedCircleGridID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.RotatedCircleGridID.Int64)])
			parameterDB.RotatedCircleGridID.Valid = true
		}

		// reindexing NextRhombus field
		if parameterDB.NextRhombusID.Int64 != 0 {
			parameterDB.NextRhombusID.Int64 = int64(BackRepoRhombusid_atBckpTime_newID[uint(parameterDB.NextRhombusID.Int64)])
			parameterDB.NextRhombusID.Valid = true
		}

		// reindexing NextCircle field
		if parameterDB.NextCircleID.Int64 != 0 {
			parameterDB.NextCircleID.Int64 = int64(BackRepoCircleid_atBckpTime_newID[uint(parameterDB.NextCircleID.Int64)])
			parameterDB.NextCircleID.Valid = true
		}

		// reindexing GrowingRhombusGridSeed field
		if parameterDB.GrowingRhombusGridSeedID.Int64 != 0 {
			parameterDB.GrowingRhombusGridSeedID.Int64 = int64(BackRepoRhombusid_atBckpTime_newID[uint(parameterDB.GrowingRhombusGridSeedID.Int64)])
			parameterDB.GrowingRhombusGridSeedID.Valid = true
		}

		// reindexing GrowingRhombusGrid field
		if parameterDB.GrowingRhombusGridID.Int64 != 0 {
			parameterDB.GrowingRhombusGridID.Int64 = int64(BackRepoRhombusGridid_atBckpTime_newID[uint(parameterDB.GrowingRhombusGridID.Int64)])
			parameterDB.GrowingRhombusGridID.Valid = true
		}

		// reindexing GrowingCircleGridSeed field
		if parameterDB.GrowingCircleGridSeedID.Int64 != 0 {
			parameterDB.GrowingCircleGridSeedID.Int64 = int64(BackRepoCircleid_atBckpTime_newID[uint(parameterDB.GrowingCircleGridSeedID.Int64)])
			parameterDB.GrowingCircleGridSeedID.Valid = true
		}

		// reindexing GrowingCircleGrid field
		if parameterDB.GrowingCircleGridID.Int64 != 0 {
			parameterDB.GrowingCircleGridID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.GrowingCircleGridID.Int64)])
			parameterDB.GrowingCircleGridID.Valid = true
		}

		// reindexing GrowingCircleGridLeftSeed field
		if parameterDB.GrowingCircleGridLeftSeedID.Int64 != 0 {
			parameterDB.GrowingCircleGridLeftSeedID.Int64 = int64(BackRepoCircleid_atBckpTime_newID[uint(parameterDB.GrowingCircleGridLeftSeedID.Int64)])
			parameterDB.GrowingCircleGridLeftSeedID.Valid = true
		}

		// reindexing GrowingCircleGridLeft field
		if parameterDB.GrowingCircleGridLeftID.Int64 != 0 {
			parameterDB.GrowingCircleGridLeftID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.GrowingCircleGridLeftID.Int64)])
			parameterDB.GrowingCircleGridLeftID.Valid = true
		}

		// reindexing ConstructionAxis field
		if parameterDB.ConstructionAxisID.Int64 != 0 {
			parameterDB.ConstructionAxisID.Int64 = int64(BackRepoAxisid_atBckpTime_newID[uint(parameterDB.ConstructionAxisID.Int64)])
			parameterDB.ConstructionAxisID.Valid = true
		}

		// reindexing ConstructionAxisGrid field
		if parameterDB.ConstructionAxisGridID.Int64 != 0 {
			parameterDB.ConstructionAxisGridID.Int64 = int64(BackRepoAxisGridid_atBckpTime_newID[uint(parameterDB.ConstructionAxisGridID.Int64)])
			parameterDB.ConstructionAxisGridID.Valid = true
		}

		// reindexing ConstructionCircle field
		if parameterDB.ConstructionCircleID.Int64 != 0 {
			parameterDB.ConstructionCircleID.Int64 = int64(BackRepoCircleid_atBckpTime_newID[uint(parameterDB.ConstructionCircleID.Int64)])
			parameterDB.ConstructionCircleID.Valid = true
		}

		// reindexing ConstructionCircleGrid field
		if parameterDB.ConstructionCircleGridID.Int64 != 0 {
			parameterDB.ConstructionCircleGridID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.ConstructionCircleGridID.Int64)])
			parameterDB.ConstructionCircleGridID.Valid = true
		}

		// reindexing GrowthCurveSeed field
		if parameterDB.GrowthCurveSeedID.Int64 != 0 {
			parameterDB.GrowthCurveSeedID.Int64 = int64(BackRepoBezierid_atBckpTime_newID[uint(parameterDB.GrowthCurveSeedID.Int64)])
			parameterDB.GrowthCurveSeedID.Valid = true
		}

		// reindexing GrowthCurve field
		if parameterDB.GrowthCurveID.Int64 != 0 {
			parameterDB.GrowthCurveID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.GrowthCurveID.Int64)])
			parameterDB.GrowthCurveID.Valid = true
		}

		// reindexing GrowthCurveShiftedRightSeed field
		if parameterDB.GrowthCurveShiftedRightSeedID.Int64 != 0 {
			parameterDB.GrowthCurveShiftedRightSeedID.Int64 = int64(BackRepoBezierid_atBckpTime_newID[uint(parameterDB.GrowthCurveShiftedRightSeedID.Int64)])
			parameterDB.GrowthCurveShiftedRightSeedID.Valid = true
		}

		// reindexing GrowthCurveShiftedRight field
		if parameterDB.GrowthCurveShiftedRightID.Int64 != 0 {
			parameterDB.GrowthCurveShiftedRightID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.GrowthCurveShiftedRightID.Int64)])
			parameterDB.GrowthCurveShiftedRightID.Valid = true
		}

		// reindexing GrowthCurveNextSeed field
		if parameterDB.GrowthCurveNextSeedID.Int64 != 0 {
			parameterDB.GrowthCurveNextSeedID.Int64 = int64(BackRepoBezierid_atBckpTime_newID[uint(parameterDB.GrowthCurveNextSeedID.Int64)])
			parameterDB.GrowthCurveNextSeedID.Valid = true
		}

		// reindexing GrowthCurveNext field
		if parameterDB.GrowthCurveNextID.Int64 != 0 {
			parameterDB.GrowthCurveNextID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.GrowthCurveNextID.Int64)])
			parameterDB.GrowthCurveNextID.Valid = true
		}

		// reindexing GrowthCurveNextShiftedRightSeed field
		if parameterDB.GrowthCurveNextShiftedRightSeedID.Int64 != 0 {
			parameterDB.GrowthCurveNextShiftedRightSeedID.Int64 = int64(BackRepoBezierid_atBckpTime_newID[uint(parameterDB.GrowthCurveNextShiftedRightSeedID.Int64)])
			parameterDB.GrowthCurveNextShiftedRightSeedID.Valid = true
		}

		// reindexing GrowthCurveNextShiftedRight field
		if parameterDB.GrowthCurveNextShiftedRightID.Int64 != 0 {
			parameterDB.GrowthCurveNextShiftedRightID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.GrowthCurveNextShiftedRightID.Int64)])
			parameterDB.GrowthCurveNextShiftedRightID.Valid = true
		}

		// reindexing GrowthCurveStack field
		if parameterDB.GrowthCurveStackID.Int64 != 0 {
			parameterDB.GrowthCurveStackID.Int64 = int64(BackRepoBezierGridStackid_atBckpTime_newID[uint(parameterDB.GrowthCurveStackID.Int64)])
			parameterDB.GrowthCurveStackID.Valid = true
		}

		// reindexing SpiralRhombusGridSeed field
		if parameterDB.SpiralRhombusGridSeedID.Int64 != 0 {
			parameterDB.SpiralRhombusGridSeedID.Int64 = int64(BackRepoSpiralRhombusid_atBckpTime_newID[uint(parameterDB.SpiralRhombusGridSeedID.Int64)])
			parameterDB.SpiralRhombusGridSeedID.Valid = true
		}

		// reindexing SpiralRhombusGrid field
		if parameterDB.SpiralRhombusGridID.Int64 != 0 {
			parameterDB.SpiralRhombusGridID.Int64 = int64(BackRepoSpiralRhombusGridid_atBckpTime_newID[uint(parameterDB.SpiralRhombusGridID.Int64)])
			parameterDB.SpiralRhombusGridID.Valid = true
		}

		// reindexing SpiralCircleSeed field
		if parameterDB.SpiralCircleSeedID.Int64 != 0 {
			parameterDB.SpiralCircleSeedID.Int64 = int64(BackRepoSpiralCircleid_atBckpTime_newID[uint(parameterDB.SpiralCircleSeedID.Int64)])
			parameterDB.SpiralCircleSeedID.Valid = true
		}

		// reindexing SpiralCircleGrid field
		if parameterDB.SpiralCircleGridID.Int64 != 0 {
			parameterDB.SpiralCircleGridID.Int64 = int64(BackRepoSpiralCircleGridid_atBckpTime_newID[uint(parameterDB.SpiralCircleGridID.Int64)])
			parameterDB.SpiralCircleGridID.Valid = true
		}

		// reindexing SpiralCircleFullGrid field
		if parameterDB.SpiralCircleFullGridID.Int64 != 0 {
			parameterDB.SpiralCircleFullGridID.Int64 = int64(BackRepoSpiralCircleGridid_atBckpTime_newID[uint(parameterDB.SpiralCircleFullGridID.Int64)])
			parameterDB.SpiralCircleFullGridID.Valid = true
		}

		// reindexing SpiralConstructionOuterLineSeed field
		if parameterDB.SpiralConstructionOuterLineSeedID.Int64 != 0 {
			parameterDB.SpiralConstructionOuterLineSeedID.Int64 = int64(BackRepoSpiralLineid_atBckpTime_newID[uint(parameterDB.SpiralConstructionOuterLineSeedID.Int64)])
			parameterDB.SpiralConstructionOuterLineSeedID.Valid = true
		}

		// reindexing SpiralConstructionInnerLineSeed field
		if parameterDB.SpiralConstructionInnerLineSeedID.Int64 != 0 {
			parameterDB.SpiralConstructionInnerLineSeedID.Int64 = int64(BackRepoSpiralLineid_atBckpTime_newID[uint(parameterDB.SpiralConstructionInnerLineSeedID.Int64)])
			parameterDB.SpiralConstructionInnerLineSeedID.Valid = true
		}

		// reindexing SpiralConstructionOuterLineGrid field
		if parameterDB.SpiralConstructionOuterLineGridID.Int64 != 0 {
			parameterDB.SpiralConstructionOuterLineGridID.Int64 = int64(BackRepoSpiralLineGridid_atBckpTime_newID[uint(parameterDB.SpiralConstructionOuterLineGridID.Int64)])
			parameterDB.SpiralConstructionOuterLineGridID.Valid = true
		}

		// reindexing SpiralConstructionInnerLineGrid field
		if parameterDB.SpiralConstructionInnerLineGridID.Int64 != 0 {
			parameterDB.SpiralConstructionInnerLineGridID.Int64 = int64(BackRepoSpiralLineGridid_atBckpTime_newID[uint(parameterDB.SpiralConstructionInnerLineGridID.Int64)])
			parameterDB.SpiralConstructionInnerLineGridID.Valid = true
		}

		// reindexing SpiralConstructionCircleGrid field
		if parameterDB.SpiralConstructionCircleGridID.Int64 != 0 {
			parameterDB.SpiralConstructionCircleGridID.Int64 = int64(BackRepoSpiralCircleGridid_atBckpTime_newID[uint(parameterDB.SpiralConstructionCircleGridID.Int64)])
			parameterDB.SpiralConstructionCircleGridID.Valid = true
		}

		// reindexing SpiralConstructionOuterLineFullGrid field
		if parameterDB.SpiralConstructionOuterLineFullGridID.Int64 != 0 {
			parameterDB.SpiralConstructionOuterLineFullGridID.Int64 = int64(BackRepoSpiralLineGridid_atBckpTime_newID[uint(parameterDB.SpiralConstructionOuterLineFullGridID.Int64)])
			parameterDB.SpiralConstructionOuterLineFullGridID.Valid = true
		}

		// reindexing SpiralBezierSeed field
		if parameterDB.SpiralBezierSeedID.Int64 != 0 {
			parameterDB.SpiralBezierSeedID.Int64 = int64(BackRepoSpiralBezierid_atBckpTime_newID[uint(parameterDB.SpiralBezierSeedID.Int64)])
			parameterDB.SpiralBezierSeedID.Valid = true
		}

		// reindexing SpiralBezierGrid field
		if parameterDB.SpiralBezierGridID.Int64 != 0 {
			parameterDB.SpiralBezierGridID.Int64 = int64(BackRepoSpiralBezierGridid_atBckpTime_newID[uint(parameterDB.SpiralBezierGridID.Int64)])
			parameterDB.SpiralBezierGridID.Valid = true
		}

		// reindexing SpiralBezierFullGrid field
		if parameterDB.SpiralBezierFullGridID.Int64 != 0 {
			parameterDB.SpiralBezierFullGridID.Int64 = int64(BackRepoSpiralBezierGridid_atBckpTime_newID[uint(parameterDB.SpiralBezierFullGridID.Int64)])
			parameterDB.SpiralBezierFullGridID.Valid = true
		}

		// reindexing FrontCurveStack field
		if parameterDB.FrontCurveStackID.Int64 != 0 {
			parameterDB.FrontCurveStackID.Int64 = int64(BackRepoFrontCurveStackid_atBckpTime_newID[uint(parameterDB.FrontCurveStackID.Int64)])
			parameterDB.FrontCurveStackID.Valid = true
		}

		// reindexing HourCurve field
		if parameterDB.HourCurveID.Int64 != 0 {
			parameterDB.HourCurveID.Int64 = int64(BackRepoFrontCurveStackid_atBckpTime_newID[uint(parameterDB.HourCurveID.Int64)])
			parameterDB.HourCurveID.Valid = true
		}

		// reindexing HourMarker field
		if parameterDB.HourMarkerID.Int64 != 0 {
			parameterDB.HourMarkerID.Int64 = int64(BackRepoSpiralCircleid_atBckpTime_newID[uint(parameterDB.HourMarkerID.Int64)])
			parameterDB.HourMarkerID.Valid = true
		}

		// reindexing MinuteCurve field
		if parameterDB.MinuteCurveID.Int64 != 0 {
			parameterDB.MinuteCurveID.Int64 = int64(BackRepoFrontCurveStackid_atBckpTime_newID[uint(parameterDB.MinuteCurveID.Int64)])
			parameterDB.MinuteCurveID.Valid = true
		}

		// reindexing MinuteMarker field
		if parameterDB.MinuteMarkerID.Int64 != 0 {
			parameterDB.MinuteMarkerID.Int64 = int64(BackRepoSpiralCircleid_atBckpTime_newID[uint(parameterDB.MinuteMarkerID.Int64)])
			parameterDB.MinuteMarkerID.Valid = true
		}

		// reindexing BackendCurve field
		if parameterDB.BackendCurveID.Int64 != 0 {
			parameterDB.BackendCurveID.Int64 = int64(BackRepoFrontCurveStackid_atBckpTime_newID[uint(parameterDB.BackendCurveID.Int64)])
			parameterDB.BackendCurveID.Valid = true
		}

		// reindexing BackendMarker field
		if parameterDB.BackendMarkerID.Int64 != 0 {
			parameterDB.BackendMarkerID.Int64 = int64(BackRepoSpiralCircleid_atBckpTime_newID[uint(parameterDB.BackendMarkerID.Int64)])
			parameterDB.BackendMarkerID.Valid = true
		}

		// reindexing Fkey field
		if parameterDB.FkeyID.Int64 != 0 {
			parameterDB.FkeyID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(parameterDB.FkeyID.Int64)])
			parameterDB.FkeyID.Valid = true
		}

		// reindexing PitchLines field
		if parameterDB.PitchLinesID.Int64 != 0 {
			parameterDB.PitchLinesID.Int64 = int64(BackRepoAxisGridid_atBckpTime_newID[uint(parameterDB.PitchLinesID.Int64)])
			parameterDB.PitchLinesID.Valid = true
		}

		// reindexing MeasureLines field
		if parameterDB.MeasureLinesID.Int64 != 0 {
			parameterDB.MeasureLinesID.Int64 = int64(BackRepoAxisGridid_atBckpTime_newID[uint(parameterDB.MeasureLinesID.Int64)])
			parameterDB.MeasureLinesID.Valid = true
		}

		// reindexing FirstVoice field
		if parameterDB.FirstVoiceID.Int64 != 0 {
			parameterDB.FirstVoiceID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.FirstVoiceID.Int64)])
			parameterDB.FirstVoiceID.Valid = true
		}

		// reindexing FirstVoiceShiftRigth field
		if parameterDB.FirstVoiceShiftRigthID.Int64 != 0 {
			parameterDB.FirstVoiceShiftRigthID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.FirstVoiceShiftRigthID.Int64)])
			parameterDB.FirstVoiceShiftRigthID.Valid = true
		}

		// reindexing SecondVoice field
		if parameterDB.SecondVoiceID.Int64 != 0 {
			parameterDB.SecondVoiceID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.SecondVoiceID.Int64)])
			parameterDB.SecondVoiceID.Valid = true
		}

		// reindexing SecondVoiceShiftedRight field
		if parameterDB.SecondVoiceShiftedRightID.Int64 != 0 {
			parameterDB.SecondVoiceShiftedRightID.Int64 = int64(BackRepoBezierGridid_atBckpTime_newID[uint(parameterDB.SecondVoiceShiftedRightID.Int64)])
			parameterDB.SecondVoiceShiftedRightID.Valid = true
		}

		// reindexing FirstVoiceNotes field
		if parameterDB.FirstVoiceNotesID.Int64 != 0 {
			parameterDB.FirstVoiceNotesID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.FirstVoiceNotesID.Int64)])
			parameterDB.FirstVoiceNotesID.Valid = true
		}

		// reindexing FirstVoiceNotesShiftedRight field
		if parameterDB.FirstVoiceNotesShiftedRightID.Int64 != 0 {
			parameterDB.FirstVoiceNotesShiftedRightID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.FirstVoiceNotesShiftedRightID.Int64)])
			parameterDB.FirstVoiceNotesShiftedRightID.Valid = true
		}

		// reindexing SecondVoiceNotes field
		if parameterDB.SecondVoiceNotesID.Int64 != 0 {
			parameterDB.SecondVoiceNotesID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.SecondVoiceNotesID.Int64)])
			parameterDB.SecondVoiceNotesID.Valid = true
		}

		// reindexing SecondVoiceNotesShiftedRight field
		if parameterDB.SecondVoiceNotesShiftedRightID.Int64 != 0 {
			parameterDB.SecondVoiceNotesShiftedRightID.Int64 = int64(BackRepoCircleGridid_atBckpTime_newID[uint(parameterDB.SecondVoiceNotesShiftedRightID.Int64)])
			parameterDB.SecondVoiceNotesShiftedRightID.Valid = true
		}

		// reindexing HorizontalAxis field
		if parameterDB.HorizontalAxisID.Int64 != 0 {
			parameterDB.HorizontalAxisID.Int64 = int64(BackRepoHorizontalAxisid_atBckpTime_newID[uint(parameterDB.HorizontalAxisID.Int64)])
			parameterDB.HorizontalAxisID.Valid = true
		}

		// reindexing VerticalAxis field
		if parameterDB.VerticalAxisID.Int64 != 0 {
			parameterDB.VerticalAxisID.Int64 = int64(BackRepoVerticalAxisid_atBckpTime_newID[uint(parameterDB.VerticalAxisID.Int64)])
			parameterDB.VerticalAxisID.Valid = true
		}

		// reindexing SpiralOrigin field
		if parameterDB.SpiralOriginID.Int64 != 0 {
			parameterDB.SpiralOriginID.Int64 = int64(BackRepoSpiralOriginid_atBckpTime_newID[uint(parameterDB.SpiralOriginID.Int64)])
			parameterDB.SpiralOriginID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoParameter.db.Model(parameterDB)
		_, err := db.Updates(*parameterDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoParameter.ResetReversePointers commits all staged instances of Parameter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParameter *BackRepoParameterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, parameter := range backRepoParameter.Map_ParameterDBID_ParameterPtr {
		backRepoParameter.ResetReversePointersInstance(backRepo, idx, parameter)
	}

	return
}

func (backRepoParameter *BackRepoParameterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, parameter *models.Parameter) (Error error) {

	// fetch matching parameterDB
	if parameterDB, ok := backRepoParameter.Map_ParameterDBID_ParameterDB[idx]; ok {
		_ = parameterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoParameterid_atBckpTime_newID map[uint]uint
