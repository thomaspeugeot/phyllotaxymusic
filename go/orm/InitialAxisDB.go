// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phylotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_InitialAxis_sql sql.NullBool
var dummy_InitialAxis_time time.Duration
var dummy_InitialAxis_sort sort.Float64Slice

// InitialAxisAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model initialaxisAPI
type InitialAxisAPI struct {
	gorm.Model

	models.InitialAxis_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	InitialAxisPointersEncoding InitialAxisPointersEncoding
}

// InitialAxisPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type InitialAxisPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// InitialAxisDB describes a initialaxis in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model initialaxisDB
type InitialAxisDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field initialaxisDB.Name
	Name_Data sql.NullString

	// Declation for basic field initialaxisDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field initialaxisDB.Angle
	Angle_Data sql.NullFloat64

	// Declation for basic field initialaxisDB.Length
	Length_Data sql.NullFloat64

	// Declation for basic field initialaxisDB.Color
	Color_Data sql.NullString

	// Declation for basic field initialaxisDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field initialaxisDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field initialaxisDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field initialaxisDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field initialaxisDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field initialaxisDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field initialaxisDB.Transform
	Transform_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	InitialAxisPointersEncoding
}

// InitialAxisDBs arrays initialaxisDBs
// swagger:response initialaxisDBsResponse
type InitialAxisDBs []InitialAxisDB

// InitialAxisDBResponse provides response
// swagger:response initialaxisDBResponse
type InitialAxisDBResponse struct {
	InitialAxisDB
}

// InitialAxisWOP is a InitialAxis without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type InitialAxisWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	Angle float64 `xlsx:"3"`

	Length float64 `xlsx:"4"`

	Color string `xlsx:"5"`

	FillOpacity float64 `xlsx:"6"`

	Stroke string `xlsx:"7"`

	StrokeOpacity float64 `xlsx:"8"`

	StrokeWidth float64 `xlsx:"9"`

	StrokeDashArray string `xlsx:"10"`

	StrokeDashArrayWhenSelected string `xlsx:"11"`

	Transform string `xlsx:"12"`
	// insertion for WOP pointer fields
}

var InitialAxis_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"Angle",
	"Length",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoInitialAxisStruct struct {
	// stores InitialAxisDB according to their gorm ID
	Map_InitialAxisDBID_InitialAxisDB map[uint]*InitialAxisDB

	// stores InitialAxisDB ID according to InitialAxis address
	Map_InitialAxisPtr_InitialAxisDBID map[*models.InitialAxis]uint

	// stores InitialAxis according to their gorm ID
	Map_InitialAxisDBID_InitialAxisPtr map[uint]*models.InitialAxis

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoInitialAxis *BackRepoInitialAxisStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoInitialAxis.stage
	return
}

func (backRepoInitialAxis *BackRepoInitialAxisStruct) GetDB() *gorm.DB {
	return backRepoInitialAxis.db
}

// GetInitialAxisDBFromInitialAxisPtr is a handy function to access the back repo instance from the stage instance
func (backRepoInitialAxis *BackRepoInitialAxisStruct) GetInitialAxisDBFromInitialAxisPtr(initialaxis *models.InitialAxis) (initialaxisDB *InitialAxisDB) {
	id := backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis]
	initialaxisDB = backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[id]
	return
}

// BackRepoInitialAxis.CommitPhaseOne commits all staged instances of InitialAxis to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for initialaxis := range stage.InitialAxiss {
		backRepoInitialAxis.CommitPhaseOneInstance(initialaxis)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, initialaxis := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr {
		if _, ok := stage.InitialAxiss[initialaxis]; !ok {
			backRepoInitialAxis.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoInitialAxis.CommitDeleteInstance commits deletion of InitialAxis to the BackRepo
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CommitDeleteInstance(id uint) (Error error) {

	initialaxis := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr[id]

	// initialaxis is not staged anymore, remove initialaxisDB
	initialaxisDB := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[id]
	query := backRepoInitialAxis.db.Unscoped().Delete(&initialaxisDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID, initialaxis)
	delete(backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr, id)
	delete(backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB, id)

	return
}

// BackRepoInitialAxis.CommitPhaseOneInstance commits initialaxis staged instances of InitialAxis to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CommitPhaseOneInstance(initialaxis *models.InitialAxis) (Error error) {

	// check if the initialaxis is not commited yet
	if _, ok := backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis]; ok {
		return
	}

	// initiate initialaxis
	var initialaxisDB InitialAxisDB
	initialaxisDB.CopyBasicFieldsFromInitialAxis(initialaxis)

	query := backRepoInitialAxis.db.Create(&initialaxisDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis] = initialaxisDB.ID
	backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr[initialaxisDB.ID] = initialaxis
	backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[initialaxisDB.ID] = &initialaxisDB

	return
}

// BackRepoInitialAxis.CommitPhaseTwo commits all staged instances of InitialAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, initialaxis := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr {
		backRepoInitialAxis.CommitPhaseTwoInstance(backRepo, idx, initialaxis)
	}

	return
}

// BackRepoInitialAxis.CommitPhaseTwoInstance commits {{structname }} of models.InitialAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, initialaxis *models.InitialAxis) (Error error) {

	// fetch matching initialaxisDB
	if initialaxisDB, ok := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[idx]; ok {

		initialaxisDB.CopyBasicFieldsFromInitialAxis(initialaxis)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoInitialAxis.db.Save(&initialaxisDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown InitialAxis intance %s", initialaxis.Name))
		return err
	}

	return
}

// BackRepoInitialAxis.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CheckoutPhaseOne() (Error error) {

	initialaxisDBArray := make([]InitialAxisDB, 0)
	query := backRepoInitialAxis.db.Find(&initialaxisDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	initialaxisInstancesToBeRemovedFromTheStage := make(map[*models.InitialAxis]any)
	for key, value := range backRepoInitialAxis.stage.InitialAxiss {
		initialaxisInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, initialaxisDB := range initialaxisDBArray {
		backRepoInitialAxis.CheckoutPhaseOneInstance(&initialaxisDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		initialaxis, ok := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr[initialaxisDB.ID]
		if ok {
			delete(initialaxisInstancesToBeRemovedFromTheStage, initialaxis)
		}
	}

	// remove from stage and back repo's 3 maps all initialaxiss that are not in the checkout
	for initialaxis := range initialaxisInstancesToBeRemovedFromTheStage {
		initialaxis.Unstage(backRepoInitialAxis.GetStage())

		// remove instance from the back repo 3 maps
		initialaxisID := backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis]
		delete(backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID, initialaxis)
		delete(backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB, initialaxisID)
		delete(backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr, initialaxisID)
	}

	return
}

// CheckoutPhaseOneInstance takes a initialaxisDB that has been found in the DB, updates the backRepo and stages the
// models version of the initialaxisDB
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CheckoutPhaseOneInstance(initialaxisDB *InitialAxisDB) (Error error) {

	initialaxis, ok := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr[initialaxisDB.ID]
	if !ok {
		initialaxis = new(models.InitialAxis)

		backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr[initialaxisDB.ID] = initialaxis
		backRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis] = initialaxisDB.ID

		// append model store with the new element
		initialaxis.Name = initialaxisDB.Name_Data.String
		initialaxis.Stage(backRepoInitialAxis.GetStage())
	}
	initialaxisDB.CopyBasicFieldsToInitialAxis(initialaxis)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	initialaxis.Stage(backRepoInitialAxis.GetStage())

	// preserve pointer to initialaxisDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_InitialAxisDBID_InitialAxisDB)[initialaxisDB hold variable pointers
	initialaxisDB_Data := *initialaxisDB
	preservedPtrToInitialAxis := &initialaxisDB_Data
	backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[initialaxisDB.ID] = preservedPtrToInitialAxis

	return
}

// BackRepoInitialAxis.CheckoutPhaseTwo Checkouts all staged instances of InitialAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, initialaxisDB := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB {
		backRepoInitialAxis.CheckoutPhaseTwoInstance(backRepo, initialaxisDB)
	}
	return
}

// BackRepoInitialAxis.CheckoutPhaseTwoInstance Checkouts staged instances of InitialAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInitialAxis *BackRepoInitialAxisStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, initialaxisDB *InitialAxisDB) (Error error) {

	initialaxis := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr[initialaxisDB.ID]

	initialaxisDB.DecodePointers(backRepo, initialaxis)

	return
}

func (initialaxisDB *InitialAxisDB) DecodePointers(backRepo *BackRepoStruct, initialaxis *models.InitialAxis) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitInitialAxis allows commit of a single initialaxis (if already staged)
func (backRepo *BackRepoStruct) CommitInitialAxis(initialaxis *models.InitialAxis) {
	backRepo.BackRepoInitialAxis.CommitPhaseOneInstance(initialaxis)
	if id, ok := backRepo.BackRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis]; ok {
		backRepo.BackRepoInitialAxis.CommitPhaseTwoInstance(backRepo, id, initialaxis)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitInitialAxis allows checkout of a single initialaxis (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutInitialAxis(initialaxis *models.InitialAxis) {
	// check if the initialaxis is staged
	if _, ok := backRepo.BackRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis]; ok {

		if id, ok := backRepo.BackRepoInitialAxis.Map_InitialAxisPtr_InitialAxisDBID[initialaxis]; ok {
			var initialaxisDB InitialAxisDB
			initialaxisDB.ID = id

			if err := backRepo.BackRepoInitialAxis.db.First(&initialaxisDB, id).Error; err != nil {
				log.Fatalln("CheckoutInitialAxis : Problem with getting object with id:", id)
			}
			backRepo.BackRepoInitialAxis.CheckoutPhaseOneInstance(&initialaxisDB)
			backRepo.BackRepoInitialAxis.CheckoutPhaseTwoInstance(backRepo, &initialaxisDB)
		}
	}
}

// CopyBasicFieldsFromInitialAxis
func (initialaxisDB *InitialAxisDB) CopyBasicFieldsFromInitialAxis(initialaxis *models.InitialAxis) {
	// insertion point for fields commit

	initialaxisDB.Name_Data.String = initialaxis.Name
	initialaxisDB.Name_Data.Valid = true

	initialaxisDB.IsDisplayed_Data.Bool = initialaxis.IsDisplayed
	initialaxisDB.IsDisplayed_Data.Valid = true

	initialaxisDB.Angle_Data.Float64 = initialaxis.Angle
	initialaxisDB.Angle_Data.Valid = true

	initialaxisDB.Length_Data.Float64 = initialaxis.Length
	initialaxisDB.Length_Data.Valid = true

	initialaxisDB.Color_Data.String = initialaxis.Color
	initialaxisDB.Color_Data.Valid = true

	initialaxisDB.FillOpacity_Data.Float64 = initialaxis.FillOpacity
	initialaxisDB.FillOpacity_Data.Valid = true

	initialaxisDB.Stroke_Data.String = initialaxis.Stroke
	initialaxisDB.Stroke_Data.Valid = true

	initialaxisDB.StrokeOpacity_Data.Float64 = initialaxis.StrokeOpacity
	initialaxisDB.StrokeOpacity_Data.Valid = true

	initialaxisDB.StrokeWidth_Data.Float64 = initialaxis.StrokeWidth
	initialaxisDB.StrokeWidth_Data.Valid = true

	initialaxisDB.StrokeDashArray_Data.String = initialaxis.StrokeDashArray
	initialaxisDB.StrokeDashArray_Data.Valid = true

	initialaxisDB.StrokeDashArrayWhenSelected_Data.String = initialaxis.StrokeDashArrayWhenSelected
	initialaxisDB.StrokeDashArrayWhenSelected_Data.Valid = true

	initialaxisDB.Transform_Data.String = initialaxis.Transform
	initialaxisDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromInitialAxis_WOP
func (initialaxisDB *InitialAxisDB) CopyBasicFieldsFromInitialAxis_WOP(initialaxis *models.InitialAxis_WOP) {
	// insertion point for fields commit

	initialaxisDB.Name_Data.String = initialaxis.Name
	initialaxisDB.Name_Data.Valid = true

	initialaxisDB.IsDisplayed_Data.Bool = initialaxis.IsDisplayed
	initialaxisDB.IsDisplayed_Data.Valid = true

	initialaxisDB.Angle_Data.Float64 = initialaxis.Angle
	initialaxisDB.Angle_Data.Valid = true

	initialaxisDB.Length_Data.Float64 = initialaxis.Length
	initialaxisDB.Length_Data.Valid = true

	initialaxisDB.Color_Data.String = initialaxis.Color
	initialaxisDB.Color_Data.Valid = true

	initialaxisDB.FillOpacity_Data.Float64 = initialaxis.FillOpacity
	initialaxisDB.FillOpacity_Data.Valid = true

	initialaxisDB.Stroke_Data.String = initialaxis.Stroke
	initialaxisDB.Stroke_Data.Valid = true

	initialaxisDB.StrokeOpacity_Data.Float64 = initialaxis.StrokeOpacity
	initialaxisDB.StrokeOpacity_Data.Valid = true

	initialaxisDB.StrokeWidth_Data.Float64 = initialaxis.StrokeWidth
	initialaxisDB.StrokeWidth_Data.Valid = true

	initialaxisDB.StrokeDashArray_Data.String = initialaxis.StrokeDashArray
	initialaxisDB.StrokeDashArray_Data.Valid = true

	initialaxisDB.StrokeDashArrayWhenSelected_Data.String = initialaxis.StrokeDashArrayWhenSelected
	initialaxisDB.StrokeDashArrayWhenSelected_Data.Valid = true

	initialaxisDB.Transform_Data.String = initialaxis.Transform
	initialaxisDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromInitialAxisWOP
func (initialaxisDB *InitialAxisDB) CopyBasicFieldsFromInitialAxisWOP(initialaxis *InitialAxisWOP) {
	// insertion point for fields commit

	initialaxisDB.Name_Data.String = initialaxis.Name
	initialaxisDB.Name_Data.Valid = true

	initialaxisDB.IsDisplayed_Data.Bool = initialaxis.IsDisplayed
	initialaxisDB.IsDisplayed_Data.Valid = true

	initialaxisDB.Angle_Data.Float64 = initialaxis.Angle
	initialaxisDB.Angle_Data.Valid = true

	initialaxisDB.Length_Data.Float64 = initialaxis.Length
	initialaxisDB.Length_Data.Valid = true

	initialaxisDB.Color_Data.String = initialaxis.Color
	initialaxisDB.Color_Data.Valid = true

	initialaxisDB.FillOpacity_Data.Float64 = initialaxis.FillOpacity
	initialaxisDB.FillOpacity_Data.Valid = true

	initialaxisDB.Stroke_Data.String = initialaxis.Stroke
	initialaxisDB.Stroke_Data.Valid = true

	initialaxisDB.StrokeOpacity_Data.Float64 = initialaxis.StrokeOpacity
	initialaxisDB.StrokeOpacity_Data.Valid = true

	initialaxisDB.StrokeWidth_Data.Float64 = initialaxis.StrokeWidth
	initialaxisDB.StrokeWidth_Data.Valid = true

	initialaxisDB.StrokeDashArray_Data.String = initialaxis.StrokeDashArray
	initialaxisDB.StrokeDashArray_Data.Valid = true

	initialaxisDB.StrokeDashArrayWhenSelected_Data.String = initialaxis.StrokeDashArrayWhenSelected
	initialaxisDB.StrokeDashArrayWhenSelected_Data.Valid = true

	initialaxisDB.Transform_Data.String = initialaxis.Transform
	initialaxisDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToInitialAxis
func (initialaxisDB *InitialAxisDB) CopyBasicFieldsToInitialAxis(initialaxis *models.InitialAxis) {
	// insertion point for checkout of basic fields (back repo to stage)
	initialaxis.Name = initialaxisDB.Name_Data.String
	initialaxis.IsDisplayed = initialaxisDB.IsDisplayed_Data.Bool
	initialaxis.Angle = initialaxisDB.Angle_Data.Float64
	initialaxis.Length = initialaxisDB.Length_Data.Float64
	initialaxis.Color = initialaxisDB.Color_Data.String
	initialaxis.FillOpacity = initialaxisDB.FillOpacity_Data.Float64
	initialaxis.Stroke = initialaxisDB.Stroke_Data.String
	initialaxis.StrokeOpacity = initialaxisDB.StrokeOpacity_Data.Float64
	initialaxis.StrokeWidth = initialaxisDB.StrokeWidth_Data.Float64
	initialaxis.StrokeDashArray = initialaxisDB.StrokeDashArray_Data.String
	initialaxis.StrokeDashArrayWhenSelected = initialaxisDB.StrokeDashArrayWhenSelected_Data.String
	initialaxis.Transform = initialaxisDB.Transform_Data.String
}

// CopyBasicFieldsToInitialAxis_WOP
func (initialaxisDB *InitialAxisDB) CopyBasicFieldsToInitialAxis_WOP(initialaxis *models.InitialAxis_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	initialaxis.Name = initialaxisDB.Name_Data.String
	initialaxis.IsDisplayed = initialaxisDB.IsDisplayed_Data.Bool
	initialaxis.Angle = initialaxisDB.Angle_Data.Float64
	initialaxis.Length = initialaxisDB.Length_Data.Float64
	initialaxis.Color = initialaxisDB.Color_Data.String
	initialaxis.FillOpacity = initialaxisDB.FillOpacity_Data.Float64
	initialaxis.Stroke = initialaxisDB.Stroke_Data.String
	initialaxis.StrokeOpacity = initialaxisDB.StrokeOpacity_Data.Float64
	initialaxis.StrokeWidth = initialaxisDB.StrokeWidth_Data.Float64
	initialaxis.StrokeDashArray = initialaxisDB.StrokeDashArray_Data.String
	initialaxis.StrokeDashArrayWhenSelected = initialaxisDB.StrokeDashArrayWhenSelected_Data.String
	initialaxis.Transform = initialaxisDB.Transform_Data.String
}

// CopyBasicFieldsToInitialAxisWOP
func (initialaxisDB *InitialAxisDB) CopyBasicFieldsToInitialAxisWOP(initialaxis *InitialAxisWOP) {
	initialaxis.ID = int(initialaxisDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	initialaxis.Name = initialaxisDB.Name_Data.String
	initialaxis.IsDisplayed = initialaxisDB.IsDisplayed_Data.Bool
	initialaxis.Angle = initialaxisDB.Angle_Data.Float64
	initialaxis.Length = initialaxisDB.Length_Data.Float64
	initialaxis.Color = initialaxisDB.Color_Data.String
	initialaxis.FillOpacity = initialaxisDB.FillOpacity_Data.Float64
	initialaxis.Stroke = initialaxisDB.Stroke_Data.String
	initialaxis.StrokeOpacity = initialaxisDB.StrokeOpacity_Data.Float64
	initialaxis.StrokeWidth = initialaxisDB.StrokeWidth_Data.Float64
	initialaxis.StrokeDashArray = initialaxisDB.StrokeDashArray_Data.String
	initialaxis.StrokeDashArrayWhenSelected = initialaxisDB.StrokeDashArrayWhenSelected_Data.String
	initialaxis.Transform = initialaxisDB.Transform_Data.String
}

// Backup generates a json file from a slice of all InitialAxisDB instances in the backrepo
func (backRepoInitialAxis *BackRepoInitialAxisStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "InitialAxisDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InitialAxisDB, 0)
	for _, initialaxisDB := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB {
		forBackup = append(forBackup, initialaxisDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json InitialAxis ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json InitialAxis file", err.Error())
	}
}

// Backup generates a json file from a slice of all InitialAxisDB instances in the backrepo
func (backRepoInitialAxis *BackRepoInitialAxisStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InitialAxisDB, 0)
	for _, initialaxisDB := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB {
		forBackup = append(forBackup, initialaxisDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("InitialAxis")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&InitialAxis_Fields, -1)
	for _, initialaxisDB := range forBackup {

		var initialaxisWOP InitialAxisWOP
		initialaxisDB.CopyBasicFieldsToInitialAxisWOP(&initialaxisWOP)

		row := sh.AddRow()
		row.WriteStruct(&initialaxisWOP, -1)
	}
}

// RestoreXL from the "InitialAxis" sheet all InitialAxisDB instances
func (backRepoInitialAxis *BackRepoInitialAxisStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoInitialAxisid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["InitialAxis"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoInitialAxis.rowVisitorInitialAxis)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoInitialAxis *BackRepoInitialAxisStruct) rowVisitorInitialAxis(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var initialaxisWOP InitialAxisWOP
		row.ReadStruct(&initialaxisWOP)

		// add the unmarshalled struct to the stage
		initialaxisDB := new(InitialAxisDB)
		initialaxisDB.CopyBasicFieldsFromInitialAxisWOP(&initialaxisWOP)

		initialaxisDB_ID_atBackupTime := initialaxisDB.ID
		initialaxisDB.ID = 0
		query := backRepoInitialAxis.db.Create(initialaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[initialaxisDB.ID] = initialaxisDB
		BackRepoInitialAxisid_atBckpTime_newID[initialaxisDB_ID_atBackupTime] = initialaxisDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "InitialAxisDB.json" in dirPath that stores an array
// of InitialAxisDB and stores it in the database
// the map BackRepoInitialAxisid_atBckpTime_newID is updated accordingly
func (backRepoInitialAxis *BackRepoInitialAxisStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoInitialAxisid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "InitialAxisDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json InitialAxis file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*InitialAxisDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_InitialAxisDBID_InitialAxisDB
	for _, initialaxisDB := range forRestore {

		initialaxisDB_ID_atBackupTime := initialaxisDB.ID
		initialaxisDB.ID = 0
		query := backRepoInitialAxis.db.Create(initialaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[initialaxisDB.ID] = initialaxisDB
		BackRepoInitialAxisid_atBckpTime_newID[initialaxisDB_ID_atBackupTime] = initialaxisDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json InitialAxis file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<InitialAxis>id_atBckpTime_newID
// to compute new index
func (backRepoInitialAxis *BackRepoInitialAxisStruct) RestorePhaseTwo() {

	for _, initialaxisDB := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB {

		// next line of code is to avert unused variable compilation error
		_ = initialaxisDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoInitialAxis.db.Model(initialaxisDB).Updates(*initialaxisDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoInitialAxis.ResetReversePointers commits all staged instances of InitialAxis to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInitialAxis *BackRepoInitialAxisStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, initialaxis := range backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisPtr {
		backRepoInitialAxis.ResetReversePointersInstance(backRepo, idx, initialaxis)
	}

	return
}

func (backRepoInitialAxis *BackRepoInitialAxisStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, initialaxis *models.InitialAxis) (Error error) {

	// fetch matching initialaxisDB
	if initialaxisDB, ok := backRepoInitialAxis.Map_InitialAxisDBID_InitialAxisDB[idx]; ok {
		_ = initialaxisDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoInitialAxisid_atBckpTime_newID map[uint]uint
