// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BezierGridStack_sql sql.NullBool
var dummy_BezierGridStack_time time.Duration
var dummy_BezierGridStack_sort sort.Float64Slice

// BezierGridStackAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beziergridstackAPI
type BezierGridStackAPI struct {
	gorm.Model

	models.BezierGridStack_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BezierGridStackPointersEncoding BezierGridStackPointersEncoding
}

// BezierGridStackPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BezierGridStackPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field BezierGrids is a slice of pointers to another Struct (optional or 0..1)
	BezierGrids IntSlice `gorm:"type:TEXT"`
}

// BezierGridStackDB describes a beziergridstack in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beziergridstackDB
type BezierGridStackDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beziergridstackDB.Name
	Name_Data sql.NullString

	// Declation for basic field beziergridstackDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BezierGridStackPointersEncoding
}

// BezierGridStackDBs arrays beziergridstackDBs
// swagger:response beziergridstackDBsResponse
type BezierGridStackDBs []BezierGridStackDB

// BezierGridStackDBResponse provides response
// swagger:response beziergridstackDBResponse
type BezierGridStackDBResponse struct {
	BezierGridStackDB
}

// BezierGridStackWOP is a BezierGridStack without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BezierGridStackWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var BezierGridStack_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
}

type BackRepoBezierGridStackStruct struct {
	// stores BezierGridStackDB according to their gorm ID
	Map_BezierGridStackDBID_BezierGridStackDB map[uint]*BezierGridStackDB

	// stores BezierGridStackDB ID according to BezierGridStack address
	Map_BezierGridStackPtr_BezierGridStackDBID map[*models.BezierGridStack]uint

	// stores BezierGridStack according to their gorm ID
	Map_BezierGridStackDBID_BezierGridStackPtr map[uint]*models.BezierGridStack

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBezierGridStack.stage
	return
}

func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) GetDB() db.DBInterface {
	return backRepoBezierGridStack.db
}

// GetBezierGridStackDBFromBezierGridStackPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) GetBezierGridStackDBFromBezierGridStackPtr(beziergridstack *models.BezierGridStack) (beziergridstackDB *BezierGridStackDB) {
	id := backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack]
	beziergridstackDB = backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[id]
	return
}

// BackRepoBezierGridStack.CommitPhaseOne commits all staged instances of BezierGridStack to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beziergridstack := range stage.BezierGridStacks {
		backRepoBezierGridStack.CommitPhaseOneInstance(beziergridstack)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beziergridstack := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr {
		if _, ok := stage.BezierGridStacks[beziergridstack]; !ok {
			backRepoBezierGridStack.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBezierGridStack.CommitDeleteInstance commits deletion of BezierGridStack to the BackRepo
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CommitDeleteInstance(id uint) (Error error) {

	beziergridstack := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[id]

	// beziergridstack is not staged anymore, remove beziergridstackDB
	beziergridstackDB := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[id]
	db, _ := backRepoBezierGridStack.db.Unscoped()
	_, err := db.Delete(beziergridstackDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID, beziergridstack)
	delete(backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr, id)
	delete(backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB, id)

	return
}

// BackRepoBezierGridStack.CommitPhaseOneInstance commits beziergridstack staged instances of BezierGridStack to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CommitPhaseOneInstance(beziergridstack *models.BezierGridStack) (Error error) {

	// check if the beziergridstack is not commited yet
	if _, ok := backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack]; ok {
		return
	}

	// initiate beziergridstack
	var beziergridstackDB BezierGridStackDB
	beziergridstackDB.CopyBasicFieldsFromBezierGridStack(beziergridstack)

	_, err := backRepoBezierGridStack.db.Create(&beziergridstackDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack] = beziergridstackDB.ID
	backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[beziergridstackDB.ID] = beziergridstack
	backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[beziergridstackDB.ID] = &beziergridstackDB

	return
}

// BackRepoBezierGridStack.CommitPhaseTwo commits all staged instances of BezierGridStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beziergridstack := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr {
		backRepoBezierGridStack.CommitPhaseTwoInstance(backRepo, idx, beziergridstack)
	}

	return
}

// BackRepoBezierGridStack.CommitPhaseTwoInstance commits {{structname }} of models.BezierGridStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beziergridstack *models.BezierGridStack) (Error error) {

	// fetch matching beziergridstackDB
	if beziergridstackDB, ok := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[idx]; ok {

		beziergridstackDB.CopyBasicFieldsFromBezierGridStack(beziergridstack)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value beziergridstack.ShapeCategory translates to updating the beziergridstack.ShapeCategoryID
		beziergridstackDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if beziergridstack.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[beziergridstack.ShapeCategory]; ok {
				beziergridstackDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				beziergridstackDB.ShapeCategoryID.Valid = true
			}
		} else {
			beziergridstackDB.ShapeCategoryID.Int64 = 0
			beziergridstackDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		beziergridstackDB.BezierGridStackPointersEncoding.BezierGrids = make([]int, 0)
		// 2. encode
		for _, beziergridAssocEnd := range beziergridstack.BezierGrids {
			beziergridAssocEnd_DB :=
				backRepo.BackRepoBezierGrid.GetBezierGridDBFromBezierGridPtr(beziergridAssocEnd)
			
			// the stage might be inconsistant, meaning that the beziergridAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if beziergridAssocEnd_DB == nil {
				continue
			}
			
			beziergridstackDB.BezierGridStackPointersEncoding.BezierGrids =
				append(beziergridstackDB.BezierGridStackPointersEncoding.BezierGrids, int(beziergridAssocEnd_DB.ID))
		}

		_, err := backRepoBezierGridStack.db.Save(beziergridstackDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BezierGridStack intance %s", beziergridstack.Name))
		return err
	}

	return
}

// BackRepoBezierGridStack.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CheckoutPhaseOne() (Error error) {

	beziergridstackDBArray := make([]BezierGridStackDB, 0)
	_, err := backRepoBezierGridStack.db.Find(&beziergridstackDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beziergridstackInstancesToBeRemovedFromTheStage := make(map[*models.BezierGridStack]any)
	for key, value := range backRepoBezierGridStack.stage.BezierGridStacks {
		beziergridstackInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beziergridstackDB := range beziergridstackDBArray {
		backRepoBezierGridStack.CheckoutPhaseOneInstance(&beziergridstackDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beziergridstack, ok := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[beziergridstackDB.ID]
		if ok {
			delete(beziergridstackInstancesToBeRemovedFromTheStage, beziergridstack)
		}
	}

	// remove from stage and back repo's 3 maps all beziergridstacks that are not in the checkout
	for beziergridstack := range beziergridstackInstancesToBeRemovedFromTheStage {
		beziergridstack.Unstage(backRepoBezierGridStack.GetStage())

		// remove instance from the back repo 3 maps
		beziergridstackID := backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack]
		delete(backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID, beziergridstack)
		delete(backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB, beziergridstackID)
		delete(backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr, beziergridstackID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beziergridstackDB that has been found in the DB, updates the backRepo and stages the
// models version of the beziergridstackDB
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CheckoutPhaseOneInstance(beziergridstackDB *BezierGridStackDB) (Error error) {

	beziergridstack, ok := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[beziergridstackDB.ID]
	if !ok {
		beziergridstack = new(models.BezierGridStack)

		backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[beziergridstackDB.ID] = beziergridstack
		backRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack] = beziergridstackDB.ID

		// append model store with the new element
		beziergridstack.Name = beziergridstackDB.Name_Data.String
		beziergridstack.Stage(backRepoBezierGridStack.GetStage())
	}
	beziergridstackDB.CopyBasicFieldsToBezierGridStack(beziergridstack)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beziergridstack.Stage(backRepoBezierGridStack.GetStage())

	// preserve pointer to beziergridstackDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BezierGridStackDBID_BezierGridStackDB)[beziergridstackDB hold variable pointers
	beziergridstackDB_Data := *beziergridstackDB
	preservedPtrToBezierGridStack := &beziergridstackDB_Data
	backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[beziergridstackDB.ID] = preservedPtrToBezierGridStack

	return
}

// BackRepoBezierGridStack.CheckoutPhaseTwo Checkouts all staged instances of BezierGridStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beziergridstackDB := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB {
		backRepoBezierGridStack.CheckoutPhaseTwoInstance(backRepo, beziergridstackDB)
	}
	return
}

// BackRepoBezierGridStack.CheckoutPhaseTwoInstance Checkouts staged instances of BezierGridStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beziergridstackDB *BezierGridStackDB) (Error error) {

	beziergridstack := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr[beziergridstackDB.ID]

	beziergridstackDB.DecodePointers(backRepo, beziergridstack)

	return
}

func (beziergridstackDB *BezierGridStackDB) DecodePointers(backRepo *BackRepoStruct, beziergridstack *models.BezierGridStack) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := beziergridstackDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: beziergridstack.ShapeCategory, unknown pointer id", id)
				beziergridstack.ShapeCategory = nil
			} else {
				// updates only if field has changed
				if beziergridstack.ShapeCategory == nil || beziergridstack.ShapeCategory != tmp {
					beziergridstack.ShapeCategory = tmp
				}
			}
		} else {
			beziergridstack.ShapeCategory = nil
		}
	}
	
	// This loop redeem beziergridstack.BezierGrids in the stage from the encode in the back repo
	// It parses all BezierGridDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	beziergridstack.BezierGrids = beziergridstack.BezierGrids[:0]
	for _, _BezierGridid := range beziergridstackDB.BezierGridStackPointersEncoding.BezierGrids {
		beziergridstack.BezierGrids = append(beziergridstack.BezierGrids, backRepo.BackRepoBezierGrid.Map_BezierGridDBID_BezierGridPtr[uint(_BezierGridid)])
	}

	return
}

// CommitBezierGridStack allows commit of a single beziergridstack (if already staged)
func (backRepo *BackRepoStruct) CommitBezierGridStack(beziergridstack *models.BezierGridStack) {
	backRepo.BackRepoBezierGridStack.CommitPhaseOneInstance(beziergridstack)
	if id, ok := backRepo.BackRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack]; ok {
		backRepo.BackRepoBezierGridStack.CommitPhaseTwoInstance(backRepo, id, beziergridstack)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBezierGridStack allows checkout of a single beziergridstack (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBezierGridStack(beziergridstack *models.BezierGridStack) {
	// check if the beziergridstack is staged
	if _, ok := backRepo.BackRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack]; ok {

		if id, ok := backRepo.BackRepoBezierGridStack.Map_BezierGridStackPtr_BezierGridStackDBID[beziergridstack]; ok {
			var beziergridstackDB BezierGridStackDB
			beziergridstackDB.ID = id

			if _, err := backRepo.BackRepoBezierGridStack.db.First(&beziergridstackDB, id); err != nil {
				log.Fatalln("CheckoutBezierGridStack : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBezierGridStack.CheckoutPhaseOneInstance(&beziergridstackDB)
			backRepo.BackRepoBezierGridStack.CheckoutPhaseTwoInstance(backRepo, &beziergridstackDB)
		}
	}
}

// CopyBasicFieldsFromBezierGridStack
func (beziergridstackDB *BezierGridStackDB) CopyBasicFieldsFromBezierGridStack(beziergridstack *models.BezierGridStack) {
	// insertion point for fields commit

	beziergridstackDB.Name_Data.String = beziergridstack.Name
	beziergridstackDB.Name_Data.Valid = true

	beziergridstackDB.IsDisplayed_Data.Bool = beziergridstack.IsDisplayed
	beziergridstackDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromBezierGridStack_WOP
func (beziergridstackDB *BezierGridStackDB) CopyBasicFieldsFromBezierGridStack_WOP(beziergridstack *models.BezierGridStack_WOP) {
	// insertion point for fields commit

	beziergridstackDB.Name_Data.String = beziergridstack.Name
	beziergridstackDB.Name_Data.Valid = true

	beziergridstackDB.IsDisplayed_Data.Bool = beziergridstack.IsDisplayed
	beziergridstackDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsFromBezierGridStackWOP
func (beziergridstackDB *BezierGridStackDB) CopyBasicFieldsFromBezierGridStackWOP(beziergridstack *BezierGridStackWOP) {
	// insertion point for fields commit

	beziergridstackDB.Name_Data.String = beziergridstack.Name
	beziergridstackDB.Name_Data.Valid = true

	beziergridstackDB.IsDisplayed_Data.Bool = beziergridstack.IsDisplayed
	beziergridstackDB.IsDisplayed_Data.Valid = true
}

// CopyBasicFieldsToBezierGridStack
func (beziergridstackDB *BezierGridStackDB) CopyBasicFieldsToBezierGridStack(beziergridstack *models.BezierGridStack) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziergridstack.Name = beziergridstackDB.Name_Data.String
	beziergridstack.IsDisplayed = beziergridstackDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToBezierGridStack_WOP
func (beziergridstackDB *BezierGridStackDB) CopyBasicFieldsToBezierGridStack_WOP(beziergridstack *models.BezierGridStack_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziergridstack.Name = beziergridstackDB.Name_Data.String
	beziergridstack.IsDisplayed = beziergridstackDB.IsDisplayed_Data.Bool
}

// CopyBasicFieldsToBezierGridStackWOP
func (beziergridstackDB *BezierGridStackDB) CopyBasicFieldsToBezierGridStackWOP(beziergridstack *BezierGridStackWOP) {
	beziergridstack.ID = int(beziergridstackDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beziergridstack.Name = beziergridstackDB.Name_Data.String
	beziergridstack.IsDisplayed = beziergridstackDB.IsDisplayed_Data.Bool
}

// Backup generates a json file from a slice of all BezierGridStackDB instances in the backrepo
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BezierGridStackDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierGridStackDB, 0)
	for _, beziergridstackDB := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB {
		forBackup = append(forBackup, beziergridstackDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BezierGridStack ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BezierGridStack file", err.Error())
	}
}

// Backup generates a json file from a slice of all BezierGridStackDB instances in the backrepo
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierGridStackDB, 0)
	for _, beziergridstackDB := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB {
		forBackup = append(forBackup, beziergridstackDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BezierGridStack")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BezierGridStack_Fields, -1)
	for _, beziergridstackDB := range forBackup {

		var beziergridstackWOP BezierGridStackWOP
		beziergridstackDB.CopyBasicFieldsToBezierGridStackWOP(&beziergridstackWOP)

		row := sh.AddRow()
		row.WriteStruct(&beziergridstackWOP, -1)
	}
}

// RestoreXL from the "BezierGridStack" sheet all BezierGridStackDB instances
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBezierGridStackid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BezierGridStack"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBezierGridStack.rowVisitorBezierGridStack)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) rowVisitorBezierGridStack(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beziergridstackWOP BezierGridStackWOP
		row.ReadStruct(&beziergridstackWOP)

		// add the unmarshalled struct to the stage
		beziergridstackDB := new(BezierGridStackDB)
		beziergridstackDB.CopyBasicFieldsFromBezierGridStackWOP(&beziergridstackWOP)

		beziergridstackDB_ID_atBackupTime := beziergridstackDB.ID
		beziergridstackDB.ID = 0
		_, err := backRepoBezierGridStack.db.Create(beziergridstackDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[beziergridstackDB.ID] = beziergridstackDB
		BackRepoBezierGridStackid_atBckpTime_newID[beziergridstackDB_ID_atBackupTime] = beziergridstackDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BezierGridStackDB.json" in dirPath that stores an array
// of BezierGridStackDB and stores it in the database
// the map BackRepoBezierGridStackid_atBckpTime_newID is updated accordingly
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBezierGridStackid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BezierGridStackDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BezierGridStack file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BezierGridStackDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BezierGridStackDBID_BezierGridStackDB
	for _, beziergridstackDB := range forRestore {

		beziergridstackDB_ID_atBackupTime := beziergridstackDB.ID
		beziergridstackDB.ID = 0
		_, err := backRepoBezierGridStack.db.Create(beziergridstackDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[beziergridstackDB.ID] = beziergridstackDB
		BackRepoBezierGridStackid_atBckpTime_newID[beziergridstackDB_ID_atBackupTime] = beziergridstackDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BezierGridStack file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BezierGridStack>id_atBckpTime_newID
// to compute new index
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) RestorePhaseTwo() {

	for _, beziergridstackDB := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB {

		// next line of code is to avert unused variable compilation error
		_ = beziergridstackDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if beziergridstackDB.ShapeCategoryID.Int64 != 0 {
			beziergridstackDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(beziergridstackDB.ShapeCategoryID.Int64)])
			beziergridstackDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoBezierGridStack.db.Model(beziergridstackDB)
		_, err := db.Updates(*beziergridstackDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoBezierGridStack.ResetReversePointers commits all staged instances of BezierGridStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beziergridstack := range backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackPtr {
		backRepoBezierGridStack.ResetReversePointersInstance(backRepo, idx, beziergridstack)
	}

	return
}

func (backRepoBezierGridStack *BackRepoBezierGridStackStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beziergridstack *models.BezierGridStack) (Error error) {

	// fetch matching beziergridstackDB
	if beziergridstackDB, ok := backRepoBezierGridStack.Map_BezierGridStackDBID_BezierGridStackDB[idx]; ok {
		_ = beziergridstackDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBezierGridStackid_atBckpTime_newID map[uint]uint
