// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/phyllotaxymusic/go/db"
	"github.com/thomaspeugeot/phyllotaxymusic/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FrontCurveStack_sql sql.NullBool
var dummy_FrontCurveStack_time time.Duration
var dummy_FrontCurveStack_sort sort.Float64Slice

// FrontCurveStackAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model frontcurvestackAPI
type FrontCurveStackAPI struct {
	gorm.Model

	models.FrontCurveStack_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FrontCurveStackPointersEncoding FrontCurveStackPointersEncoding
}

// FrontCurveStackPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FrontCurveStackPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ShapeCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ShapeCategoryID sql.NullInt64

	// field FrontCurves is a slice of pointers to another Struct (optional or 0..1)
	FrontCurves IntSlice `gorm:"type:TEXT"`

	// field SpiralCircles is a slice of pointers to another Struct (optional or 0..1)
	SpiralCircles IntSlice `gorm:"type:TEXT"`
}

// FrontCurveStackDB describes a frontcurvestack in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model frontcurvestackDB
type FrontCurveStackDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field frontcurvestackDB.Name
	Name_Data sql.NullString

	// Declation for basic field frontcurvestackDB.IsDisplayed
	// provide the sql storage for the boolan
	IsDisplayed_Data sql.NullBool

	// Declation for basic field frontcurvestackDB.Color
	Color_Data sql.NullString

	// Declation for basic field frontcurvestackDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field frontcurvestackDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field frontcurvestackDB.StrokeOpacity
	StrokeOpacity_Data sql.NullFloat64

	// Declation for basic field frontcurvestackDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field frontcurvestackDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field frontcurvestackDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field frontcurvestackDB.Transform
	Transform_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FrontCurveStackPointersEncoding
}

// FrontCurveStackDBs arrays frontcurvestackDBs
// swagger:response frontcurvestackDBsResponse
type FrontCurveStackDBs []FrontCurveStackDB

// FrontCurveStackDBResponse provides response
// swagger:response frontcurvestackDBResponse
type FrontCurveStackDBResponse struct {
	FrontCurveStackDB
}

// FrontCurveStackWOP is a FrontCurveStack without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FrontCurveStackWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsDisplayed bool `xlsx:"2"`

	Color string `xlsx:"3"`

	FillOpacity float64 `xlsx:"4"`

	Stroke string `xlsx:"5"`

	StrokeOpacity float64 `xlsx:"6"`

	StrokeWidth float64 `xlsx:"7"`

	StrokeDashArray string `xlsx:"8"`

	StrokeDashArrayWhenSelected string `xlsx:"9"`

	Transform string `xlsx:"10"`
	// insertion for WOP pointer fields
}

var FrontCurveStack_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsDisplayed",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeOpacity",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoFrontCurveStackStruct struct {
	// stores FrontCurveStackDB according to their gorm ID
	Map_FrontCurveStackDBID_FrontCurveStackDB map[uint]*FrontCurveStackDB

	// stores FrontCurveStackDB ID according to FrontCurveStack address
	Map_FrontCurveStackPtr_FrontCurveStackDBID map[*models.FrontCurveStack]uint

	// stores FrontCurveStack according to their gorm ID
	Map_FrontCurveStackDBID_FrontCurveStackPtr map[uint]*models.FrontCurveStack

	db db.DBInterface

	stage *models.Stage
}

func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) GetStage() (stage *models.Stage) {
	stage = backRepoFrontCurveStack.stage
	return
}

func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) GetDB() db.DBInterface {
	return backRepoFrontCurveStack.db
}

// GetFrontCurveStackDBFromFrontCurveStackPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) GetFrontCurveStackDBFromFrontCurveStackPtr(frontcurvestack *models.FrontCurveStack) (frontcurvestackDB *FrontCurveStackDB) {
	id := backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack]
	frontcurvestackDB = backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[id]
	return
}

// BackRepoFrontCurveStack.CommitPhaseOne commits all staged instances of FrontCurveStack to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var frontcurvestacks []*models.FrontCurveStack
	for frontcurvestack := range stage.FrontCurveStacks {
		frontcurvestacks = append(frontcurvestacks, frontcurvestack)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(frontcurvestacks, func(i, j int) bool {
		return stage.FrontCurveStackMap_Staged_Order[frontcurvestacks[i]] < stage.FrontCurveStackMap_Staged_Order[frontcurvestacks[j]]
	})

	for _, frontcurvestack := range frontcurvestacks {
		backRepoFrontCurveStack.CommitPhaseOneInstance(frontcurvestack)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, frontcurvestack := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr {
		if _, ok := stage.FrontCurveStacks[frontcurvestack]; !ok {
			backRepoFrontCurveStack.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFrontCurveStack.CommitDeleteInstance commits deletion of FrontCurveStack to the BackRepo
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CommitDeleteInstance(id uint) (Error error) {

	frontcurvestack := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[id]

	// frontcurvestack is not staged anymore, remove frontcurvestackDB
	frontcurvestackDB := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[id]
	db, _ := backRepoFrontCurveStack.db.Unscoped()
	_, err := db.Delete(frontcurvestackDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID, frontcurvestack)
	delete(backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr, id)
	delete(backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB, id)

	return
}

// BackRepoFrontCurveStack.CommitPhaseOneInstance commits frontcurvestack staged instances of FrontCurveStack to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CommitPhaseOneInstance(frontcurvestack *models.FrontCurveStack) (Error error) {

	// check if the frontcurvestack is not commited yet
	if _, ok := backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack]; ok {
		return
	}

	// initiate frontcurvestack
	var frontcurvestackDB FrontCurveStackDB
	frontcurvestackDB.CopyBasicFieldsFromFrontCurveStack(frontcurvestack)

	_, err := backRepoFrontCurveStack.db.Create(&frontcurvestackDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack] = frontcurvestackDB.ID
	backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[frontcurvestackDB.ID] = frontcurvestack
	backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[frontcurvestackDB.ID] = &frontcurvestackDB

	return
}

// BackRepoFrontCurveStack.CommitPhaseTwo commits all staged instances of FrontCurveStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, frontcurvestack := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr {
		backRepoFrontCurveStack.CommitPhaseTwoInstance(backRepo, idx, frontcurvestack)
	}

	return
}

// BackRepoFrontCurveStack.CommitPhaseTwoInstance commits {{structname }} of models.FrontCurveStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, frontcurvestack *models.FrontCurveStack) (Error error) {

	// fetch matching frontcurvestackDB
	if frontcurvestackDB, ok := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[idx]; ok {

		frontcurvestackDB.CopyBasicFieldsFromFrontCurveStack(frontcurvestack)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value frontcurvestack.ShapeCategory translates to updating the frontcurvestack.ShapeCategoryID
		frontcurvestackDB.ShapeCategoryID.Valid = true // allow for a 0 value (nil association)
		if frontcurvestack.ShapeCategory != nil {
			if ShapeCategoryId, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryPtr_ShapeCategoryDBID[frontcurvestack.ShapeCategory]; ok {
				frontcurvestackDB.ShapeCategoryID.Int64 = int64(ShapeCategoryId)
				frontcurvestackDB.ShapeCategoryID.Valid = true
			}
		} else {
			frontcurvestackDB.ShapeCategoryID.Int64 = 0
			frontcurvestackDB.ShapeCategoryID.Valid = true
		}

		// 1. reset
		frontcurvestackDB.FrontCurveStackPointersEncoding.FrontCurves = make([]int, 0)
		// 2. encode
		for _, frontcurveAssocEnd := range frontcurvestack.FrontCurves {
			frontcurveAssocEnd_DB :=
				backRepo.BackRepoFrontCurve.GetFrontCurveDBFromFrontCurvePtr(frontcurveAssocEnd)
			
			// the stage might be inconsistant, meaning that the frontcurveAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if frontcurveAssocEnd_DB == nil {
				continue
			}
			
			frontcurvestackDB.FrontCurveStackPointersEncoding.FrontCurves =
				append(frontcurvestackDB.FrontCurveStackPointersEncoding.FrontCurves, int(frontcurveAssocEnd_DB.ID))
		}

		// 1. reset
		frontcurvestackDB.FrontCurveStackPointersEncoding.SpiralCircles = make([]int, 0)
		// 2. encode
		for _, spiralcircleAssocEnd := range frontcurvestack.SpiralCircles {
			spiralcircleAssocEnd_DB :=
				backRepo.BackRepoSpiralCircle.GetSpiralCircleDBFromSpiralCirclePtr(spiralcircleAssocEnd)
			
			// the stage might be inconsistant, meaning that the spiralcircleAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if spiralcircleAssocEnd_DB == nil {
				continue
			}
			
			frontcurvestackDB.FrontCurveStackPointersEncoding.SpiralCircles =
				append(frontcurvestackDB.FrontCurveStackPointersEncoding.SpiralCircles, int(spiralcircleAssocEnd_DB.ID))
		}

		_, err := backRepoFrontCurveStack.db.Save(frontcurvestackDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FrontCurveStack intance %s", frontcurvestack.Name))
		return err
	}

	return
}

// BackRepoFrontCurveStack.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CheckoutPhaseOne() (Error error) {

	frontcurvestackDBArray := make([]FrontCurveStackDB, 0)
	_, err := backRepoFrontCurveStack.db.Find(&frontcurvestackDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	frontcurvestackInstancesToBeRemovedFromTheStage := make(map[*models.FrontCurveStack]any)
	for key, value := range backRepoFrontCurveStack.stage.FrontCurveStacks {
		frontcurvestackInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, frontcurvestackDB := range frontcurvestackDBArray {
		backRepoFrontCurveStack.CheckoutPhaseOneInstance(&frontcurvestackDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		frontcurvestack, ok := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[frontcurvestackDB.ID]
		if ok {
			delete(frontcurvestackInstancesToBeRemovedFromTheStage, frontcurvestack)
		}
	}

	// remove from stage and back repo's 3 maps all frontcurvestacks that are not in the checkout
	for frontcurvestack := range frontcurvestackInstancesToBeRemovedFromTheStage {
		frontcurvestack.Unstage(backRepoFrontCurveStack.GetStage())

		// remove instance from the back repo 3 maps
		frontcurvestackID := backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack]
		delete(backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID, frontcurvestack)
		delete(backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB, frontcurvestackID)
		delete(backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr, frontcurvestackID)
	}

	return
}

// CheckoutPhaseOneInstance takes a frontcurvestackDB that has been found in the DB, updates the backRepo and stages the
// models version of the frontcurvestackDB
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CheckoutPhaseOneInstance(frontcurvestackDB *FrontCurveStackDB) (Error error) {

	frontcurvestack, ok := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[frontcurvestackDB.ID]
	if !ok {
		frontcurvestack = new(models.FrontCurveStack)

		backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[frontcurvestackDB.ID] = frontcurvestack
		backRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack] = frontcurvestackDB.ID

		// append model store with the new element
		frontcurvestack.Name = frontcurvestackDB.Name_Data.String
		frontcurvestack.Stage(backRepoFrontCurveStack.GetStage())
	}
	frontcurvestackDB.CopyBasicFieldsToFrontCurveStack(frontcurvestack)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	frontcurvestack.Stage(backRepoFrontCurveStack.GetStage())

	// preserve pointer to frontcurvestackDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FrontCurveStackDBID_FrontCurveStackDB)[frontcurvestackDB hold variable pointers
	frontcurvestackDB_Data := *frontcurvestackDB
	preservedPtrToFrontCurveStack := &frontcurvestackDB_Data
	backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[frontcurvestackDB.ID] = preservedPtrToFrontCurveStack

	return
}

// BackRepoFrontCurveStack.CheckoutPhaseTwo Checkouts all staged instances of FrontCurveStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, frontcurvestackDB := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB {
		backRepoFrontCurveStack.CheckoutPhaseTwoInstance(backRepo, frontcurvestackDB)
	}
	return
}

// BackRepoFrontCurveStack.CheckoutPhaseTwoInstance Checkouts staged instances of FrontCurveStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, frontcurvestackDB *FrontCurveStackDB) (Error error) {

	frontcurvestack := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr[frontcurvestackDB.ID]

	frontcurvestackDB.DecodePointers(backRepo, frontcurvestack)

	return
}

func (frontcurvestackDB *FrontCurveStackDB) DecodePointers(backRepo *BackRepoStruct, frontcurvestack *models.FrontCurveStack) {

	// insertion point for checkout of pointer encoding
	// ShapeCategory field	
	{
		id := frontcurvestackDB.ShapeCategoryID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoShapeCategory.Map_ShapeCategoryDBID_ShapeCategoryPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: frontcurvestack.ShapeCategory, unknown pointer id", id)
				frontcurvestack.ShapeCategory = nil
			} else {
				// updates only if field has changed
				if frontcurvestack.ShapeCategory == nil || frontcurvestack.ShapeCategory != tmp {
					frontcurvestack.ShapeCategory = tmp
				}
			}
		} else {
			frontcurvestack.ShapeCategory = nil
		}
	}
	
	// This loop redeem frontcurvestack.FrontCurves in the stage from the encode in the back repo
	// It parses all FrontCurveDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	frontcurvestack.FrontCurves = frontcurvestack.FrontCurves[:0]
	for _, _FrontCurveid := range frontcurvestackDB.FrontCurveStackPointersEncoding.FrontCurves {
		frontcurvestack.FrontCurves = append(frontcurvestack.FrontCurves, backRepo.BackRepoFrontCurve.Map_FrontCurveDBID_FrontCurvePtr[uint(_FrontCurveid)])
	}

	// This loop redeem frontcurvestack.SpiralCircles in the stage from the encode in the back repo
	// It parses all SpiralCircleDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	frontcurvestack.SpiralCircles = frontcurvestack.SpiralCircles[:0]
	for _, _SpiralCircleid := range frontcurvestackDB.FrontCurveStackPointersEncoding.SpiralCircles {
		frontcurvestack.SpiralCircles = append(frontcurvestack.SpiralCircles, backRepo.BackRepoSpiralCircle.Map_SpiralCircleDBID_SpiralCirclePtr[uint(_SpiralCircleid)])
	}

	return
}

// CommitFrontCurveStack allows commit of a single frontcurvestack (if already staged)
func (backRepo *BackRepoStruct) CommitFrontCurveStack(frontcurvestack *models.FrontCurveStack) {
	backRepo.BackRepoFrontCurveStack.CommitPhaseOneInstance(frontcurvestack)
	if id, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack]; ok {
		backRepo.BackRepoFrontCurveStack.CommitPhaseTwoInstance(backRepo, id, frontcurvestack)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFrontCurveStack allows checkout of a single frontcurvestack (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFrontCurveStack(frontcurvestack *models.FrontCurveStack) {
	// check if the frontcurvestack is staged
	if _, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack]; ok {

		if id, ok := backRepo.BackRepoFrontCurveStack.Map_FrontCurveStackPtr_FrontCurveStackDBID[frontcurvestack]; ok {
			var frontcurvestackDB FrontCurveStackDB
			frontcurvestackDB.ID = id

			if _, err := backRepo.BackRepoFrontCurveStack.db.First(&frontcurvestackDB, id); err != nil {
				log.Fatalln("CheckoutFrontCurveStack : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFrontCurveStack.CheckoutPhaseOneInstance(&frontcurvestackDB)
			backRepo.BackRepoFrontCurveStack.CheckoutPhaseTwoInstance(backRepo, &frontcurvestackDB)
		}
	}
}

// CopyBasicFieldsFromFrontCurveStack
func (frontcurvestackDB *FrontCurveStackDB) CopyBasicFieldsFromFrontCurveStack(frontcurvestack *models.FrontCurveStack) {
	// insertion point for fields commit

	frontcurvestackDB.Name_Data.String = frontcurvestack.Name
	frontcurvestackDB.Name_Data.Valid = true

	frontcurvestackDB.IsDisplayed_Data.Bool = frontcurvestack.IsDisplayed
	frontcurvestackDB.IsDisplayed_Data.Valid = true

	frontcurvestackDB.Color_Data.String = frontcurvestack.Color
	frontcurvestackDB.Color_Data.Valid = true

	frontcurvestackDB.FillOpacity_Data.Float64 = frontcurvestack.FillOpacity
	frontcurvestackDB.FillOpacity_Data.Valid = true

	frontcurvestackDB.Stroke_Data.String = frontcurvestack.Stroke
	frontcurvestackDB.Stroke_Data.Valid = true

	frontcurvestackDB.StrokeOpacity_Data.Float64 = frontcurvestack.StrokeOpacity
	frontcurvestackDB.StrokeOpacity_Data.Valid = true

	frontcurvestackDB.StrokeWidth_Data.Float64 = frontcurvestack.StrokeWidth
	frontcurvestackDB.StrokeWidth_Data.Valid = true

	frontcurvestackDB.StrokeDashArray_Data.String = frontcurvestack.StrokeDashArray
	frontcurvestackDB.StrokeDashArray_Data.Valid = true

	frontcurvestackDB.StrokeDashArrayWhenSelected_Data.String = frontcurvestack.StrokeDashArrayWhenSelected
	frontcurvestackDB.StrokeDashArrayWhenSelected_Data.Valid = true

	frontcurvestackDB.Transform_Data.String = frontcurvestack.Transform
	frontcurvestackDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromFrontCurveStack_WOP
func (frontcurvestackDB *FrontCurveStackDB) CopyBasicFieldsFromFrontCurveStack_WOP(frontcurvestack *models.FrontCurveStack_WOP) {
	// insertion point for fields commit

	frontcurvestackDB.Name_Data.String = frontcurvestack.Name
	frontcurvestackDB.Name_Data.Valid = true

	frontcurvestackDB.IsDisplayed_Data.Bool = frontcurvestack.IsDisplayed
	frontcurvestackDB.IsDisplayed_Data.Valid = true

	frontcurvestackDB.Color_Data.String = frontcurvestack.Color
	frontcurvestackDB.Color_Data.Valid = true

	frontcurvestackDB.FillOpacity_Data.Float64 = frontcurvestack.FillOpacity
	frontcurvestackDB.FillOpacity_Data.Valid = true

	frontcurvestackDB.Stroke_Data.String = frontcurvestack.Stroke
	frontcurvestackDB.Stroke_Data.Valid = true

	frontcurvestackDB.StrokeOpacity_Data.Float64 = frontcurvestack.StrokeOpacity
	frontcurvestackDB.StrokeOpacity_Data.Valid = true

	frontcurvestackDB.StrokeWidth_Data.Float64 = frontcurvestack.StrokeWidth
	frontcurvestackDB.StrokeWidth_Data.Valid = true

	frontcurvestackDB.StrokeDashArray_Data.String = frontcurvestack.StrokeDashArray
	frontcurvestackDB.StrokeDashArray_Data.Valid = true

	frontcurvestackDB.StrokeDashArrayWhenSelected_Data.String = frontcurvestack.StrokeDashArrayWhenSelected
	frontcurvestackDB.StrokeDashArrayWhenSelected_Data.Valid = true

	frontcurvestackDB.Transform_Data.String = frontcurvestack.Transform
	frontcurvestackDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromFrontCurveStackWOP
func (frontcurvestackDB *FrontCurveStackDB) CopyBasicFieldsFromFrontCurveStackWOP(frontcurvestack *FrontCurveStackWOP) {
	// insertion point for fields commit

	frontcurvestackDB.Name_Data.String = frontcurvestack.Name
	frontcurvestackDB.Name_Data.Valid = true

	frontcurvestackDB.IsDisplayed_Data.Bool = frontcurvestack.IsDisplayed
	frontcurvestackDB.IsDisplayed_Data.Valid = true

	frontcurvestackDB.Color_Data.String = frontcurvestack.Color
	frontcurvestackDB.Color_Data.Valid = true

	frontcurvestackDB.FillOpacity_Data.Float64 = frontcurvestack.FillOpacity
	frontcurvestackDB.FillOpacity_Data.Valid = true

	frontcurvestackDB.Stroke_Data.String = frontcurvestack.Stroke
	frontcurvestackDB.Stroke_Data.Valid = true

	frontcurvestackDB.StrokeOpacity_Data.Float64 = frontcurvestack.StrokeOpacity
	frontcurvestackDB.StrokeOpacity_Data.Valid = true

	frontcurvestackDB.StrokeWidth_Data.Float64 = frontcurvestack.StrokeWidth
	frontcurvestackDB.StrokeWidth_Data.Valid = true

	frontcurvestackDB.StrokeDashArray_Data.String = frontcurvestack.StrokeDashArray
	frontcurvestackDB.StrokeDashArray_Data.Valid = true

	frontcurvestackDB.StrokeDashArrayWhenSelected_Data.String = frontcurvestack.StrokeDashArrayWhenSelected
	frontcurvestackDB.StrokeDashArrayWhenSelected_Data.Valid = true

	frontcurvestackDB.Transform_Data.String = frontcurvestack.Transform
	frontcurvestackDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToFrontCurveStack
func (frontcurvestackDB *FrontCurveStackDB) CopyBasicFieldsToFrontCurveStack(frontcurvestack *models.FrontCurveStack) {
	// insertion point for checkout of basic fields (back repo to stage)
	frontcurvestack.Name = frontcurvestackDB.Name_Data.String
	frontcurvestack.IsDisplayed = frontcurvestackDB.IsDisplayed_Data.Bool
	frontcurvestack.Color = frontcurvestackDB.Color_Data.String
	frontcurvestack.FillOpacity = frontcurvestackDB.FillOpacity_Data.Float64
	frontcurvestack.Stroke = frontcurvestackDB.Stroke_Data.String
	frontcurvestack.StrokeOpacity = frontcurvestackDB.StrokeOpacity_Data.Float64
	frontcurvestack.StrokeWidth = frontcurvestackDB.StrokeWidth_Data.Float64
	frontcurvestack.StrokeDashArray = frontcurvestackDB.StrokeDashArray_Data.String
	frontcurvestack.StrokeDashArrayWhenSelected = frontcurvestackDB.StrokeDashArrayWhenSelected_Data.String
	frontcurvestack.Transform = frontcurvestackDB.Transform_Data.String
}

// CopyBasicFieldsToFrontCurveStack_WOP
func (frontcurvestackDB *FrontCurveStackDB) CopyBasicFieldsToFrontCurveStack_WOP(frontcurvestack *models.FrontCurveStack_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	frontcurvestack.Name = frontcurvestackDB.Name_Data.String
	frontcurvestack.IsDisplayed = frontcurvestackDB.IsDisplayed_Data.Bool
	frontcurvestack.Color = frontcurvestackDB.Color_Data.String
	frontcurvestack.FillOpacity = frontcurvestackDB.FillOpacity_Data.Float64
	frontcurvestack.Stroke = frontcurvestackDB.Stroke_Data.String
	frontcurvestack.StrokeOpacity = frontcurvestackDB.StrokeOpacity_Data.Float64
	frontcurvestack.StrokeWidth = frontcurvestackDB.StrokeWidth_Data.Float64
	frontcurvestack.StrokeDashArray = frontcurvestackDB.StrokeDashArray_Data.String
	frontcurvestack.StrokeDashArrayWhenSelected = frontcurvestackDB.StrokeDashArrayWhenSelected_Data.String
	frontcurvestack.Transform = frontcurvestackDB.Transform_Data.String
}

// CopyBasicFieldsToFrontCurveStackWOP
func (frontcurvestackDB *FrontCurveStackDB) CopyBasicFieldsToFrontCurveStackWOP(frontcurvestack *FrontCurveStackWOP) {
	frontcurvestack.ID = int(frontcurvestackDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	frontcurvestack.Name = frontcurvestackDB.Name_Data.String
	frontcurvestack.IsDisplayed = frontcurvestackDB.IsDisplayed_Data.Bool
	frontcurvestack.Color = frontcurvestackDB.Color_Data.String
	frontcurvestack.FillOpacity = frontcurvestackDB.FillOpacity_Data.Float64
	frontcurvestack.Stroke = frontcurvestackDB.Stroke_Data.String
	frontcurvestack.StrokeOpacity = frontcurvestackDB.StrokeOpacity_Data.Float64
	frontcurvestack.StrokeWidth = frontcurvestackDB.StrokeWidth_Data.Float64
	frontcurvestack.StrokeDashArray = frontcurvestackDB.StrokeDashArray_Data.String
	frontcurvestack.StrokeDashArrayWhenSelected = frontcurvestackDB.StrokeDashArrayWhenSelected_Data.String
	frontcurvestack.Transform = frontcurvestackDB.Transform_Data.String
}

// Backup generates a json file from a slice of all FrontCurveStackDB instances in the backrepo
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FrontCurveStackDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FrontCurveStackDB, 0)
	for _, frontcurvestackDB := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB {
		forBackup = append(forBackup, frontcurvestackDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json FrontCurveStack ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json FrontCurveStack file", err.Error())
	}
}

// Backup generates a json file from a slice of all FrontCurveStackDB instances in the backrepo
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FrontCurveStackDB, 0)
	for _, frontcurvestackDB := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB {
		forBackup = append(forBackup, frontcurvestackDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FrontCurveStack")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FrontCurveStack_Fields, -1)
	for _, frontcurvestackDB := range forBackup {

		var frontcurvestackWOP FrontCurveStackWOP
		frontcurvestackDB.CopyBasicFieldsToFrontCurveStackWOP(&frontcurvestackWOP)

		row := sh.AddRow()
		row.WriteStruct(&frontcurvestackWOP, -1)
	}
}

// RestoreXL from the "FrontCurveStack" sheet all FrontCurveStackDB instances
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFrontCurveStackid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FrontCurveStack"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFrontCurveStack.rowVisitorFrontCurveStack)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) rowVisitorFrontCurveStack(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var frontcurvestackWOP FrontCurveStackWOP
		row.ReadStruct(&frontcurvestackWOP)

		// add the unmarshalled struct to the stage
		frontcurvestackDB := new(FrontCurveStackDB)
		frontcurvestackDB.CopyBasicFieldsFromFrontCurveStackWOP(&frontcurvestackWOP)

		frontcurvestackDB_ID_atBackupTime := frontcurvestackDB.ID
		frontcurvestackDB.ID = 0
		_, err := backRepoFrontCurveStack.db.Create(frontcurvestackDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[frontcurvestackDB.ID] = frontcurvestackDB
		BackRepoFrontCurveStackid_atBckpTime_newID[frontcurvestackDB_ID_atBackupTime] = frontcurvestackDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FrontCurveStackDB.json" in dirPath that stores an array
// of FrontCurveStackDB and stores it in the database
// the map BackRepoFrontCurveStackid_atBckpTime_newID is updated accordingly
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFrontCurveStackid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FrontCurveStackDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json FrontCurveStack file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FrontCurveStackDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FrontCurveStackDBID_FrontCurveStackDB
	for _, frontcurvestackDB := range forRestore {

		frontcurvestackDB_ID_atBackupTime := frontcurvestackDB.ID
		frontcurvestackDB.ID = 0
		_, err := backRepoFrontCurveStack.db.Create(frontcurvestackDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[frontcurvestackDB.ID] = frontcurvestackDB
		BackRepoFrontCurveStackid_atBckpTime_newID[frontcurvestackDB_ID_atBackupTime] = frontcurvestackDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json FrontCurveStack file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FrontCurveStack>id_atBckpTime_newID
// to compute new index
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) RestorePhaseTwo() {

	for _, frontcurvestackDB := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB {

		// next line of code is to avert unused variable compilation error
		_ = frontcurvestackDB

		// insertion point for reindexing pointers encoding
		// reindexing ShapeCategory field
		if frontcurvestackDB.ShapeCategoryID.Int64 != 0 {
			frontcurvestackDB.ShapeCategoryID.Int64 = int64(BackRepoShapeCategoryid_atBckpTime_newID[uint(frontcurvestackDB.ShapeCategoryID.Int64)])
			frontcurvestackDB.ShapeCategoryID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoFrontCurveStack.db.Model(frontcurvestackDB)
		_, err := db.Updates(*frontcurvestackDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFrontCurveStack.ResetReversePointers commits all staged instances of FrontCurveStack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, frontcurvestack := range backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackPtr {
		backRepoFrontCurveStack.ResetReversePointersInstance(backRepo, idx, frontcurvestack)
	}

	return
}

func (backRepoFrontCurveStack *BackRepoFrontCurveStackStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, frontcurvestack *models.FrontCurveStack) (Error error) {

	// fetch matching frontcurvestackDB
	if frontcurvestackDB, ok := backRepoFrontCurveStack.Map_FrontCurveStackDBID_FrontCurveStackDB[idx]; ok {
		_ = frontcurvestackDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFrontCurveStackid_atBckpTime_newID map[uint]uint
