package models

import (
	"encoding/xml"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	gongxsd_musicxml_models "github.com/fullstack-lang/gongxsd/test/musicxml/go/models"
)

// ExportToMusicxml is for catching user interactions with the export button
// gong will forward any update to an instance of the object
//
// it is necessary to have one instance in the persistance
type ExportToMusicxml struct {
	Name string

	Parameter *Parameter
}

func (exportToMusicxml *ExportToMusicxml) OnAfterUpdate(
	phyllotaxyStage *StageStruct,
	stagedExportToMusicxml, backRepoExportToMusicxml *ExportToMusicxml) {

	log.Println("Export to Music xml requested")

	var scorePartwise gongxsd_musicxml_models.Score_partwise
	scorePartwise.XMLName.Local = "score-partwise"

	scorePartwise.A_score_partwise.AttributeGroup_document_attributes.Version = "4.0"

	timestamp := time.Now().Format("20060102_150405")
	scorePartwise.A_score_partwise.Group_score_header.Work =
		&gongxsd_musicxml_models.Work{

			Name:        "genereted from phyllotaxy music",
			Work_number: "",
			Work_title:  "Generated by phyllotaxy music at" + timestamp,
			Opus: &gongxsd_musicxml_models.Opus{
				Name: "",
			},
		}

	// Marshal the books struct back into XML
	output, err := xml.MarshalIndent(scorePartwise, "", "    ")
	if err != nil {
		fmt.Println("Error marshalling to XML:", err)
		return
	}

	parameter := exportToMusicxml.Parameter
	if parameter == nil {
		log.Fatal("please attach parameter to exportToMusicxml singloton")
	}

	// Write the XML to a new file
	filename := generateTimestampedFilename("export", ".musicxml")
	err = os.WriteFile(
		filepath.Join("musicxml", filename),
		[]byte(xml.Header+string(output)), 0644)
	if err != nil {
		fmt.Println("Error writing to file:", err)
		return
	}
}

// generateTimestampedFilename creates a filename using the current timestamp (YYYYMMDD_HHMMSS).
func generateTimestampedFilename(prefix, extension string) string {
	// Format current date and time up to the second
	timestamp := time.Now().Format("20060102_150405")
	// Construct the filename
	return fmt.Sprintf("%s_%s%s", prefix, timestamp, extension)
}
