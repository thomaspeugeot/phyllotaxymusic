// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { SpiralLineGridAPI } from './spirallinegrid-api'
import { SpiralLineGrid, CopySpiralLineGridToSpiralLineGridAPI } from './spirallinegrid'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { ShapeCategoryAPI } from './shapecategory-api'
import { SpiralLineAPI } from './spiralline-api'

@Injectable({
  providedIn: 'root'
})
export class SpiralLineGridService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SpiralLineGridServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private spirallinegridsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.spirallinegridsUrl = origin + '/api/github.com/thomaspeugeot/phylotaxymusic/go/v1/spirallinegrids';
  }

  /** GET spirallinegrids from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI[]> {
    return this.getSpiralLineGrids(GONG__StackPath, frontRepo)
  }
  getSpiralLineGrids(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<SpiralLineGridAPI[]>(this.spirallinegridsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<SpiralLineGridAPI[]>('getSpiralLineGrids', []))
      );
  }

  /** GET spirallinegrid by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI> {
    return this.getSpiralLineGrid(id, GONG__StackPath, frontRepo)
  }
  getSpiralLineGrid(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.spirallinegridsUrl}/${id}`;
    return this.http.get<SpiralLineGridAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched spirallinegrid id=${id}`)),
      catchError(this.handleError<SpiralLineGridAPI>(`getSpiralLineGrid id=${id}`))
    );
  }

  // postFront copy spirallinegrid to a version with encoded pointers and post to the back
  postFront(spirallinegrid: SpiralLineGrid, GONG__StackPath: string): Observable<SpiralLineGridAPI> {
    let spirallinegridAPI = new SpiralLineGridAPI
    CopySpiralLineGridToSpiralLineGridAPI(spirallinegrid, spirallinegridAPI)
    const id = typeof spirallinegridAPI === 'number' ? spirallinegridAPI : spirallinegridAPI.ID
    const url = `${this.spirallinegridsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SpiralLineGridAPI>(url, spirallinegridAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SpiralLineGridAPI>('postSpiralLineGrid'))
    );
  }
  
  /** POST: add a new spirallinegrid to the server */
  post(spirallinegriddb: SpiralLineGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI> {
    return this.postSpiralLineGrid(spirallinegriddb, GONG__StackPath, frontRepo)
  }
  postSpiralLineGrid(spirallinegriddb: SpiralLineGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SpiralLineGridAPI>(this.spirallinegridsUrl, spirallinegriddb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted spirallinegriddb id=${spirallinegriddb.ID}`)
      }),
      catchError(this.handleError<SpiralLineGridAPI>('postSpiralLineGrid'))
    );
  }

  /** DELETE: delete the spirallinegriddb from the server */
  delete(spirallinegriddb: SpiralLineGridAPI | number, GONG__StackPath: string): Observable<SpiralLineGridAPI> {
    return this.deleteSpiralLineGrid(spirallinegriddb, GONG__StackPath)
  }
  deleteSpiralLineGrid(spirallinegriddb: SpiralLineGridAPI | number, GONG__StackPath: string): Observable<SpiralLineGridAPI> {
    const id = typeof spirallinegriddb === 'number' ? spirallinegriddb : spirallinegriddb.ID;
    const url = `${this.spirallinegridsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<SpiralLineGridAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted spirallinegriddb id=${id}`)),
      catchError(this.handleError<SpiralLineGridAPI>('deleteSpiralLineGrid'))
    );
  }

  // updateFront copy spirallinegrid to a version with encoded pointers and update to the back
  updateFront(spirallinegrid: SpiralLineGrid, GONG__StackPath: string): Observable<SpiralLineGridAPI> {
    let spirallinegridAPI = new SpiralLineGridAPI
    CopySpiralLineGridToSpiralLineGridAPI(spirallinegrid, spirallinegridAPI)
    const id = typeof spirallinegridAPI === 'number' ? spirallinegridAPI : spirallinegridAPI.ID
    const url = `${this.spirallinegridsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<SpiralLineGridAPI>(url, spirallinegridAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SpiralLineGridAPI>('updateSpiralLineGrid'))
    );
  }

  /** PUT: update the spirallinegriddb on the server */
  update(spirallinegriddb: SpiralLineGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI> {
    return this.updateSpiralLineGrid(spirallinegriddb, GONG__StackPath, frontRepo)
  }
  updateSpiralLineGrid(spirallinegriddb: SpiralLineGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralLineGridAPI> {
    const id = typeof spirallinegriddb === 'number' ? spirallinegriddb : spirallinegriddb.ID;
    const url = `${this.spirallinegridsUrl}/${id}`;


    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<SpiralLineGridAPI>(url, spirallinegriddb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated spirallinegriddb id=${spirallinegriddb.ID}`)
      }),
      catchError(this.handleError<SpiralLineGridAPI>('updateSpiralLineGrid'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in SpiralLineGridService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("SpiralLineGridService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
