// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { BezierGridAPI } from './beziergrid-api'
import { BezierGrid, CopyBezierGridToBezierGridAPI } from './beziergrid'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { BezierAPI } from './bezier-api'
import { ShapeCategoryAPI } from './shapecategory-api'

@Injectable({
  providedIn: 'root'
})
export class BezierGridService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  BezierGridServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private beziergridsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.beziergridsUrl = origin + '/api/github.com/thomaspeugeot/phylotaxymusic/go/v1/beziergrids';
  }

  /** GET beziergrids from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI[]> {
    return this.getBezierGrids(GONG__StackPath, frontRepo)
  }
  getBezierGrids(GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<BezierGridAPI[]>(this.beziergridsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<BezierGridAPI[]>('getBezierGrids', []))
      );
  }

  /** GET beziergrid by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI> {
    return this.getBezierGrid(id, GONG__StackPath, frontRepo)
  }
  getBezierGrid(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.beziergridsUrl}/${id}`;
    return this.http.get<BezierGridAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched beziergrid id=${id}`)),
      catchError(this.handleError<BezierGridAPI>(`getBezierGrid id=${id}`))
    );
  }

  // postFront copy beziergrid to a version with encoded pointers and post to the back
  postFront(beziergrid: BezierGrid, GONG__StackPath: string): Observable<BezierGridAPI> {
    let beziergridAPI = new BezierGridAPI
    CopyBezierGridToBezierGridAPI(beziergrid, beziergridAPI)
    const id = typeof beziergridAPI === 'number' ? beziergridAPI : beziergridAPI.ID
    const url = `${this.beziergridsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<BezierGridAPI>(url, beziergridAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<BezierGridAPI>('postBezierGrid'))
    );
  }
  
  /** POST: add a new beziergrid to the server */
  post(beziergriddb: BezierGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI> {
    return this.postBezierGrid(beziergriddb, GONG__StackPath, frontRepo)
  }
  postBezierGrid(beziergriddb: BezierGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<BezierGridAPI>(this.beziergridsUrl, beziergriddb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted beziergriddb id=${beziergriddb.ID}`)
      }),
      catchError(this.handleError<BezierGridAPI>('postBezierGrid'))
    );
  }

  /** DELETE: delete the beziergriddb from the server */
  delete(beziergriddb: BezierGridAPI | number, GONG__StackPath: string): Observable<BezierGridAPI> {
    return this.deleteBezierGrid(beziergriddb, GONG__StackPath)
  }
  deleteBezierGrid(beziergriddb: BezierGridAPI | number, GONG__StackPath: string): Observable<BezierGridAPI> {
    const id = typeof beziergriddb === 'number' ? beziergriddb : beziergriddb.ID;
    const url = `${this.beziergridsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<BezierGridAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted beziergriddb id=${id}`)),
      catchError(this.handleError<BezierGridAPI>('deleteBezierGrid'))
    );
  }

  // updateFront copy beziergrid to a version with encoded pointers and update to the back
  updateFront(beziergrid: BezierGrid, GONG__StackPath: string): Observable<BezierGridAPI> {
    let beziergridAPI = new BezierGridAPI
    CopyBezierGridToBezierGridAPI(beziergrid, beziergridAPI)
    const id = typeof beziergridAPI === 'number' ? beziergridAPI : beziergridAPI.ID
    const url = `${this.beziergridsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<BezierGridAPI>(url, beziergridAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<BezierGridAPI>('updateBezierGrid'))
    );
  }

  /** PUT: update the beziergriddb on the server */
  update(beziergriddb: BezierGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI> {
    return this.updateBezierGrid(beziergriddb, GONG__StackPath, frontRepo)
  }
  updateBezierGrid(beziergriddb: BezierGridAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<BezierGridAPI> {
    const id = typeof beziergriddb === 'number' ? beziergriddb : beziergriddb.ID;
    const url = `${this.beziergridsUrl}/${id}`;


    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<BezierGridAPI>(url, beziergriddb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated beziergriddb id=${beziergriddb.ID}`)
      }),
      catchError(this.handleError<BezierGridAPI>('updateBezierGrid'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in BezierGridService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("BezierGridService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
