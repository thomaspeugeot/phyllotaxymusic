// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { SpiralAxisAPI } from './spiralaxis-api'
import { SpiralAxis, CopySpiralAxisToSpiralAxisAPI } from './spiralaxis'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { ShapeCategoryAPI } from './shapecategory-api'

@Injectable({
  providedIn: 'root'
})
export class SpiralAxisService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SpiralAxisServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private spiralaxissUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.spiralaxissUrl = origin + '/api/github.com/thomaspeugeot/phylotaxymusic/go/v1/spiralaxiss';
  }

  /** GET spiralaxiss from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI[]> {
    return this.getSpiralAxiss(GONG__StackPath, frontRepo)
  }
  getSpiralAxiss(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<SpiralAxisAPI[]>(this.spiralaxissUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<SpiralAxisAPI[]>('getSpiralAxiss', []))
      );
  }

  /** GET spiralaxis by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI> {
    return this.getSpiralAxis(id, GONG__StackPath, frontRepo)
  }
  getSpiralAxis(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.spiralaxissUrl}/${id}`;
    return this.http.get<SpiralAxisAPI>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched spiralaxis id=${id}`)),
      catchError(this.handleError<SpiralAxisAPI>(`getSpiralAxis id=${id}`))
    );
  }

  // postFront copy spiralaxis to a version with encoded pointers and post to the back
  postFront(spiralaxis: SpiralAxis, GONG__StackPath: string): Observable<SpiralAxisAPI> {
    let spiralaxisAPI = new SpiralAxisAPI
    CopySpiralAxisToSpiralAxisAPI(spiralaxis, spiralaxisAPI)
    const id = typeof spiralaxisAPI === 'number' ? spiralaxisAPI : spiralaxisAPI.ID
    const url = `${this.spiralaxissUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SpiralAxisAPI>(url, spiralaxisAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SpiralAxisAPI>('postSpiralAxis'))
    );
  }
  
  /** POST: add a new spiralaxis to the server */
  post(spiralaxisdb: SpiralAxisAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI> {
    return this.postSpiralAxis(spiralaxisdb, GONG__StackPath, frontRepo)
  }
  postSpiralAxis(spiralaxisdb: SpiralAxisAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SpiralAxisAPI>(this.spiralaxissUrl, spiralaxisdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`posted spiralaxisdb id=${spiralaxisdb.ID}`)
      }),
      catchError(this.handleError<SpiralAxisAPI>('postSpiralAxis'))
    );
  }

  /** DELETE: delete the spiralaxisdb from the server */
  delete(spiralaxisdb: SpiralAxisAPI | number, GONG__StackPath: string): Observable<SpiralAxisAPI> {
    return this.deleteSpiralAxis(spiralaxisdb, GONG__StackPath)
  }
  deleteSpiralAxis(spiralaxisdb: SpiralAxisAPI | number, GONG__StackPath: string): Observable<SpiralAxisAPI> {
    const id = typeof spiralaxisdb === 'number' ? spiralaxisdb : spiralaxisdb.ID;
    const url = `${this.spiralaxissUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<SpiralAxisAPI>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted spiralaxisdb id=${id}`)),
      catchError(this.handleError<SpiralAxisAPI>('deleteSpiralAxis'))
    );
  }

  // updateFront copy spiralaxis to a version with encoded pointers and update to the back
  updateFront(spiralaxis: SpiralAxis, GONG__StackPath: string): Observable<SpiralAxisAPI> {
    let spiralaxisAPI = new SpiralAxisAPI
    CopySpiralAxisToSpiralAxisAPI(spiralaxis, spiralaxisAPI)
    const id = typeof spiralaxisAPI === 'number' ? spiralaxisAPI : spiralaxisAPI.ID
    const url = `${this.spiralaxissUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<SpiralAxisAPI>(url, spiralaxisAPI, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<SpiralAxisAPI>('updateSpiralAxis'))
    );
  }

  /** PUT: update the spiralaxisdb on the server */
  update(spiralaxisdb: SpiralAxisAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI> {
    return this.updateSpiralAxis(spiralaxisdb, GONG__StackPath, frontRepo)
  }
  updateSpiralAxis(spiralaxisdb: SpiralAxisAPI, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SpiralAxisAPI> {
    const id = typeof spiralaxisdb === 'number' ? spiralaxisdb : spiralaxisdb.ID;
    const url = `${this.spiralaxissUrl}/${id}`;


    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<SpiralAxisAPI>(url, spiralaxisdb, httpOptions).pipe(
      tap(_ => {
        // this.log(`updated spiralaxisdb id=${spiralaxisdb.ID}`)
      }),
      catchError(this.handleError<SpiralAxisAPI>('updateSpiralAxis'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in SpiralAxisService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("SpiralAxisService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
